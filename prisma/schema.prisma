generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Affiliate {
  id                String              @id
  name              String
  code              String              @unique
  cpf               String
  email             String?
  isActive          Boolean             @default(true)
  commissionType    CommissionType
  commissionValue   Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  userId            String              @unique
  phone             String?
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  AffiliateCustomer AffiliateCustomer[]
  Customer          Customer[]
}

model AffiliateCustomer {
  id          String    @id
  customerId  String
  affiliateId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  Customer    Customer  @relation(fields: [customerId], references: [id])
}

model CreditCard {
  id        String   @id
  clientId  String
  token     String
  last4     String
  brand     String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Customer  Customer @relation(fields: [clientId], references: [id])
}

model Customer {
  id                String              @id
  name              String
  document          String
  observation       String?
  email             String?             @default("example@email.com")
  planId            String?
  cep               Int?
  address           String?
  number            Int?
  complement        String?
  city              String?
  state             String?
  adherenceDate     DateTime
  clientType        CustomerType
  createdAt         DateTime            @default(now())
  expireDate        DateTime?
  externalId        String?
  isActive          Boolean             @default(true)
  renovationDate    DateTime?
  updatedAt         DateTime
  affiliateCode     String?
  district          String?
  userId            String              @unique
  phone             String?
  mainPaymentMethod PaymentType         @default(CREDIT_CARD)
  status            CustomerStatus      @default(PENDING)
  AffiliateCustomer AffiliateCustomer[]
  CreditCard        CreditCard[]
  Affiliate         Affiliate?          @relation(fields: [affiliateCode], references: [code])
  Plan              Plan?               @relation(fields: [planId], references: [id])
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  CustomerCard      CustomerCard?
  CustomerPfData    CustomerPfData?
  CustomerPjData    CustomerPjData?
  Dependent         Dependent[]
  Employee          Employee[]
  Subscription      Subscription[]
}

model CustomerCard {
  id          String     @id
  cardNumber  String     @unique
  expireDate  DateTime
  customerId  String?    @unique
  dependentId String?    @unique
  employeeId  String?    @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  Customer    Customer?  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Dependent   Dependent? @relation(fields: [dependentId], references: [id], onDelete: Cascade)
  Employee    Employee?  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model CustomerPfData {
  id         String   @id
  customerId String   @unique
  birthDate  DateTime
  rg         String?
  cpf        String
  sex        String?
  civilState String?
  job        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model CustomerPjData {
  id             String   @id
  customerId     String   @unique
  representative String?
  cnpj           String
  cpf            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Dependent {
  id                  String        @id
  userId              String        @unique
  holderId            String
  name                String
  relationship        String?
  employeeDependentId String?
  cpf                 String?
  birthDate           DateTime
  isActive            Boolean       @default(true)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime
  CustomerCard        CustomerCard?
  Employee            Employee?     @relation(fields: [employeeDependentId], references: [id])
  Customer            Customer      @relation(fields: [holderId], references: [id])
  User                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id            String        @id
  userId        String        @unique
  holderId      String
  name          String
  position      String?
  cpf           String?
  birthDate     DateTime
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  maxDependents Int?
  CustomerCard  CustomerCard?
  Dependent     Dependent[]
  Customer      Customer      @relation(fields: [holderId], references: [id])
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invoice {
  id             String        @id
  subscriptionId String
  dueDate        DateTime
  amount         Int
  status         InvoiceStatus
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  paymentLink    String?
  Subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
}

model Plan {
  id                  String         @id
  externalId          String?
  hasTelemedicine     Boolean        @default(false)
  isActive            Boolean        @default(true)
  additionalInfo      String?
  isShowingInApp      Boolean        @default(true)
  name                String
  prices              Json
  contractText        String
  createdAt           DateTime       @default(now())
  maxDependents       Int?
  maxInstallments     Int
  pricePerDependent   Int?
  pricePerEmployee    Int?
  signupFee           Int
  updatedAt           DateTime
  allowedPaymentTypes PaymentType[]
  Customer            Customer[]
  Subscription        Subscription[]
}

model Subscription {
  id              String             @id
  customerId      String
  planId          String
  status          SubscriptionStatus
  startDate       DateTime
  paymentType     PaymentType
  installments    Int
  createdAt       DateTime           @default(now())
  updatedAt       DateTime
  endDate         DateTime
  firstPayDayDate DateTime
  Invoice         Invoice[]
  Customer        Customer           @relation(fields: [customerId], references: [id])
  Plan            Plan               @relation(fields: [planId], references: [id])
}

model User {
  id        String     @id
  username  String     @unique
  password  String
  type      UserType
  createdAt DateTime   @default(now())
  updatedAt DateTime
  Affiliate Affiliate?
  Customer  Customer?
  Dependent Dependent?
  Employee  Employee?
}

enum CommissionType {
  PERCENT
  FIXED
}

enum CustomerStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum CustomerType {
  PF
  PJ
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
  CANCELED
}

enum PaymentType {
  CREDIT_CARD
  PIX
  BOLETO
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELED
}

enum UserType {
  HOLDER
  AFFILIATE
  DEPENDENT
  EMPLOYEE
  ADMIN
  COMMERCIAL
  FINANCIAL
}
