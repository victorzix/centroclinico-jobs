
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AffiliateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  cpf: 'cpf',
  email: 'email',
  isActive: 'isActive',
  commissionType: 'commissionType',
  commissionValue: 'commissionValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  phone: 'phone'
};

exports.Prisma.AffiliateCustomerScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  affiliateId: 'affiliateId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditCardScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  token: 'token',
  last4: 'last4',
  brand: 'brand',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  document: 'document',
  observation: 'observation',
  email: 'email',
  planId: 'planId',
  cep: 'cep',
  address: 'address',
  number: 'number',
  complement: 'complement',
  city: 'city',
  state: 'state',
  adherenceDate: 'adherenceDate',
  clientType: 'clientType',
  createdAt: 'createdAt',
  expireDate: 'expireDate',
  externalId: 'externalId',
  isActive: 'isActive',
  renovationDate: 'renovationDate',
  updatedAt: 'updatedAt',
  affiliateCode: 'affiliateCode',
  district: 'district',
  userId: 'userId',
  phone: 'phone',
  mainPaymentMethod: 'mainPaymentMethod',
  status: 'status'
};

exports.Prisma.CustomerCardScalarFieldEnum = {
  id: 'id',
  cardNumber: 'cardNumber',
  expireDate: 'expireDate',
  customerId: 'customerId',
  dependentId: 'dependentId',
  employeeId: 'employeeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerPfDataScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  birthDate: 'birthDate',
  rg: 'rg',
  cpf: 'cpf',
  sex: 'sex',
  civilState: 'civilState',
  job: 'job',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerPjDataScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  representative: 'representative',
  cnpj: 'cnpj',
  cpf: 'cpf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DependentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  holderId: 'holderId',
  name: 'name',
  relationship: 'relationship',
  employeeDependentId: 'employeeDependentId',
  cpf: 'cpf',
  birthDate: 'birthDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  holderId: 'holderId',
  name: 'name',
  position: 'position',
  cpf: 'cpf',
  birthDate: 'birthDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  maxDependents: 'maxDependents'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentLink: 'paymentLink'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  externalId: 'externalId',
  hasTelemedicine: 'hasTelemedicine',
  isActive: 'isActive',
  additionalInfo: 'additionalInfo',
  isShowingInApp: 'isShowingInApp',
  name: 'name',
  prices: 'prices',
  contractText: 'contractText',
  createdAt: 'createdAt',
  maxDependents: 'maxDependents',
  maxInstallments: 'maxInstallments',
  pricePerDependent: 'pricePerDependent',
  pricePerEmployee: 'pricePerEmployee',
  signupFee: 'signupFee',
  updatedAt: 'updatedAt',
  allowedPaymentTypes: 'allowedPaymentTypes'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  planId: 'planId',
  status: 'status',
  startDate: 'startDate',
  paymentType: 'paymentType',
  installments: 'installments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  endDate: 'endDate',
  firstPayDayDate: 'firstPayDayDate'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CommissionType = exports.$Enums.CommissionType = {
  PERCENT: 'PERCENT',
  FIXED: 'FIXED'
};

exports.CustomerType = exports.$Enums.CustomerType = {
  PF: 'PF',
  PJ: 'PJ'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  CREDIT_CARD: 'CREDIT_CARD',
  PIX: 'PIX',
  BOLETO: 'BOLETO'
};

exports.CustomerStatus = exports.$Enums.CustomerStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  PAID: 'PAID',
  PENDING: 'PENDING',
  OVERDUE: 'OVERDUE',
  CANCELED: 'CANCELED'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  CANCELED: 'CANCELED'
};

exports.UserType = exports.$Enums.UserType = {
  HOLDER: 'HOLDER',
  AFFILIATE: 'AFFILIATE',
  DEPENDENT: 'DEPENDENT',
  EMPLOYEE: 'EMPLOYEE',
  ADMIN: 'ADMIN',
  COMMERCIAL: 'COMMERCIAL',
  FINANCIAL: 'FINANCIAL'
};

exports.Prisma.ModelName = {
  Affiliate: 'Affiliate',
  AffiliateCustomer: 'AffiliateCustomer',
  CreditCard: 'CreditCard',
  Customer: 'Customer',
  CustomerCard: 'CustomerCard',
  CustomerPfData: 'CustomerPfData',
  CustomerPjData: 'CustomerPjData',
  Dependent: 'Dependent',
  Employee: 'Employee',
  Invoice: 'Invoice',
  Plan: 'Plan',
  Subscription: 'Subscription',
  User: 'User'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
