
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Affiliate
 * 
 */
export type Affiliate = $Result.DefaultSelection<Prisma.$AffiliatePayload>
/**
 * Model AffiliateCustomer
 * 
 */
export type AffiliateCustomer = $Result.DefaultSelection<Prisma.$AffiliateCustomerPayload>
/**
 * Model CreditCard
 * 
 */
export type CreditCard = $Result.DefaultSelection<Prisma.$CreditCardPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model CustomerCard
 * 
 */
export type CustomerCard = $Result.DefaultSelection<Prisma.$CustomerCardPayload>
/**
 * Model CustomerPfData
 * 
 */
export type CustomerPfData = $Result.DefaultSelection<Prisma.$CustomerPfDataPayload>
/**
 * Model CustomerPjData
 * 
 */
export type CustomerPjData = $Result.DefaultSelection<Prisma.$CustomerPjDataPayload>
/**
 * Model Dependent
 * 
 */
export type Dependent = $Result.DefaultSelection<Prisma.$DependentPayload>
/**
 * Model Employee
 * 
 */
export type Employee = $Result.DefaultSelection<Prisma.$EmployeePayload>
/**
 * Model Invoice
 * 
 */
export type Invoice = $Result.DefaultSelection<Prisma.$InvoicePayload>
/**
 * Model Plan
 * 
 */
export type Plan = $Result.DefaultSelection<Prisma.$PlanPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CommissionType: {
  PERCENT: 'PERCENT',
  FIXED: 'FIXED'
};

export type CommissionType = (typeof CommissionType)[keyof typeof CommissionType]


export const CustomerStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type CustomerStatus = (typeof CustomerStatus)[keyof typeof CustomerStatus]


export const CustomerType: {
  PF: 'PF',
  PJ: 'PJ'
};

export type CustomerType = (typeof CustomerType)[keyof typeof CustomerType]


export const InvoiceStatus: {
  PAID: 'PAID',
  PENDING: 'PENDING',
  OVERDUE: 'OVERDUE',
  CANCELED: 'CANCELED'
};

export type InvoiceStatus = (typeof InvoiceStatus)[keyof typeof InvoiceStatus]


export const PaymentType: {
  CREDIT_CARD: 'CREDIT_CARD',
  PIX: 'PIX',
  BOLETO: 'BOLETO'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const SubscriptionStatus: {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  CANCELED: 'CANCELED'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const UserType: {
  HOLDER: 'HOLDER',
  AFFILIATE: 'AFFILIATE',
  DEPENDENT: 'DEPENDENT',
  EMPLOYEE: 'EMPLOYEE',
  ADMIN: 'ADMIN',
  COMMERCIAL: 'COMMERCIAL',
  FINANCIAL: 'FINANCIAL'
};

export type UserType = (typeof UserType)[keyof typeof UserType]

}

export type CommissionType = $Enums.CommissionType

export const CommissionType: typeof $Enums.CommissionType

export type CustomerStatus = $Enums.CustomerStatus

export const CustomerStatus: typeof $Enums.CustomerStatus

export type CustomerType = $Enums.CustomerType

export const CustomerType: typeof $Enums.CustomerType

export type InvoiceStatus = $Enums.InvoiceStatus

export const InvoiceStatus: typeof $Enums.InvoiceStatus

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Affiliates
 * const affiliates = await prisma.affiliate.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Affiliates
   * const affiliates = await prisma.affiliate.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.affiliate`: Exposes CRUD operations for the **Affiliate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Affiliates
    * const affiliates = await prisma.affiliate.findMany()
    * ```
    */
  get affiliate(): Prisma.AffiliateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.affiliateCustomer`: Exposes CRUD operations for the **AffiliateCustomer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AffiliateCustomers
    * const affiliateCustomers = await prisma.affiliateCustomer.findMany()
    * ```
    */
  get affiliateCustomer(): Prisma.AffiliateCustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.creditCard`: Exposes CRUD operations for the **CreditCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CreditCards
    * const creditCards = await prisma.creditCard.findMany()
    * ```
    */
  get creditCard(): Prisma.CreditCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerCard`: Exposes CRUD operations for the **CustomerCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerCards
    * const customerCards = await prisma.customerCard.findMany()
    * ```
    */
  get customerCard(): Prisma.CustomerCardDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerPfData`: Exposes CRUD operations for the **CustomerPfData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerPfData
    * const customerPfData = await prisma.customerPfData.findMany()
    * ```
    */
  get customerPfData(): Prisma.CustomerPfDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerPjData`: Exposes CRUD operations for the **CustomerPjData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerPjData
    * const customerPjData = await prisma.customerPjData.findMany()
    * ```
    */
  get customerPjData(): Prisma.CustomerPjDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dependent`: Exposes CRUD operations for the **Dependent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dependents
    * const dependents = await prisma.dependent.findMany()
    * ```
    */
  get dependent(): Prisma.DependentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employee`: Exposes CRUD operations for the **Employee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employee.findMany()
    * ```
    */
  get employee(): Prisma.EmployeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **Invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.InvoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Affiliate: 'Affiliate',
    AffiliateCustomer: 'AffiliateCustomer',
    CreditCard: 'CreditCard',
    Customer: 'Customer',
    CustomerCard: 'CustomerCard',
    CustomerPfData: 'CustomerPfData',
    CustomerPjData: 'CustomerPjData',
    Dependent: 'Dependent',
    Employee: 'Employee',
    Invoice: 'Invoice',
    Plan: 'Plan',
    Subscription: 'Subscription',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "affiliate" | "affiliateCustomer" | "creditCard" | "customer" | "customerCard" | "customerPfData" | "customerPjData" | "dependent" | "employee" | "invoice" | "plan" | "subscription" | "user"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Affiliate: {
        payload: Prisma.$AffiliatePayload<ExtArgs>
        fields: Prisma.AffiliateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AffiliateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AffiliateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>
          }
          findFirst: {
            args: Prisma.AffiliateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AffiliateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>
          }
          findMany: {
            args: Prisma.AffiliateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>[]
          }
          create: {
            args: Prisma.AffiliateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>
          }
          createMany: {
            args: Prisma.AffiliateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AffiliateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>[]
          }
          delete: {
            args: Prisma.AffiliateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>
          }
          update: {
            args: Prisma.AffiliateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>
          }
          deleteMany: {
            args: Prisma.AffiliateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AffiliateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AffiliateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>[]
          }
          upsert: {
            args: Prisma.AffiliateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliatePayload>
          }
          aggregate: {
            args: Prisma.AffiliateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAffiliate>
          }
          groupBy: {
            args: Prisma.AffiliateGroupByArgs<ExtArgs>
            result: $Utils.Optional<AffiliateGroupByOutputType>[]
          }
          count: {
            args: Prisma.AffiliateCountArgs<ExtArgs>
            result: $Utils.Optional<AffiliateCountAggregateOutputType> | number
          }
        }
      }
      AffiliateCustomer: {
        payload: Prisma.$AffiliateCustomerPayload<ExtArgs>
        fields: Prisma.AffiliateCustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AffiliateCustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AffiliateCustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>
          }
          findFirst: {
            args: Prisma.AffiliateCustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AffiliateCustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>
          }
          findMany: {
            args: Prisma.AffiliateCustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>[]
          }
          create: {
            args: Prisma.AffiliateCustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>
          }
          createMany: {
            args: Prisma.AffiliateCustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AffiliateCustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>[]
          }
          delete: {
            args: Prisma.AffiliateCustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>
          }
          update: {
            args: Prisma.AffiliateCustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>
          }
          deleteMany: {
            args: Prisma.AffiliateCustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AffiliateCustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AffiliateCustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>[]
          }
          upsert: {
            args: Prisma.AffiliateCustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AffiliateCustomerPayload>
          }
          aggregate: {
            args: Prisma.AffiliateCustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAffiliateCustomer>
          }
          groupBy: {
            args: Prisma.AffiliateCustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AffiliateCustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AffiliateCustomerCountArgs<ExtArgs>
            result: $Utils.Optional<AffiliateCustomerCountAggregateOutputType> | number
          }
        }
      }
      CreditCard: {
        payload: Prisma.$CreditCardPayload<ExtArgs>
        fields: Prisma.CreditCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          findFirst: {
            args: Prisma.CreditCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          findMany: {
            args: Prisma.CreditCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>[]
          }
          create: {
            args: Prisma.CreditCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          createMany: {
            args: Prisma.CreditCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CreditCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>[]
          }
          delete: {
            args: Prisma.CreditCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          update: {
            args: Prisma.CreditCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          deleteMany: {
            args: Prisma.CreditCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CreditCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CreditCardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>[]
          }
          upsert: {
            args: Prisma.CreditCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditCardPayload>
          }
          aggregate: {
            args: Prisma.CreditCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditCard>
          }
          groupBy: {
            args: Prisma.CreditCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditCardCountArgs<ExtArgs>
            result: $Utils.Optional<CreditCardCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      CustomerCard: {
        payload: Prisma.$CustomerCardPayload<ExtArgs>
        fields: Prisma.CustomerCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerCardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerCardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>
          }
          findFirst: {
            args: Prisma.CustomerCardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerCardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>
          }
          findMany: {
            args: Prisma.CustomerCardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>[]
          }
          create: {
            args: Prisma.CustomerCardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>
          }
          createMany: {
            args: Prisma.CustomerCardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCardCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>[]
          }
          delete: {
            args: Prisma.CustomerCardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>
          }
          update: {
            args: Prisma.CustomerCardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>
          }
          deleteMany: {
            args: Prisma.CustomerCardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerCardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerCardUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>[]
          }
          upsert: {
            args: Prisma.CustomerCardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerCardPayload>
          }
          aggregate: {
            args: Prisma.CustomerCardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerCard>
          }
          groupBy: {
            args: Prisma.CustomerCardGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCardCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCardCountAggregateOutputType> | number
          }
        }
      }
      CustomerPfData: {
        payload: Prisma.$CustomerPfDataPayload<ExtArgs>
        fields: Prisma.CustomerPfDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerPfDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerPfDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>
          }
          findFirst: {
            args: Prisma.CustomerPfDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerPfDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>
          }
          findMany: {
            args: Prisma.CustomerPfDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>[]
          }
          create: {
            args: Prisma.CustomerPfDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>
          }
          createMany: {
            args: Prisma.CustomerPfDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerPfDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>[]
          }
          delete: {
            args: Prisma.CustomerPfDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>
          }
          update: {
            args: Prisma.CustomerPfDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>
          }
          deleteMany: {
            args: Prisma.CustomerPfDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerPfDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerPfDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>[]
          }
          upsert: {
            args: Prisma.CustomerPfDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPfDataPayload>
          }
          aggregate: {
            args: Prisma.CustomerPfDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerPfData>
          }
          groupBy: {
            args: Prisma.CustomerPfDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerPfDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerPfDataCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerPfDataCountAggregateOutputType> | number
          }
        }
      }
      CustomerPjData: {
        payload: Prisma.$CustomerPjDataPayload<ExtArgs>
        fields: Prisma.CustomerPjDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerPjDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerPjDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>
          }
          findFirst: {
            args: Prisma.CustomerPjDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerPjDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>
          }
          findMany: {
            args: Prisma.CustomerPjDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>[]
          }
          create: {
            args: Prisma.CustomerPjDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>
          }
          createMany: {
            args: Prisma.CustomerPjDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerPjDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>[]
          }
          delete: {
            args: Prisma.CustomerPjDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>
          }
          update: {
            args: Prisma.CustomerPjDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>
          }
          deleteMany: {
            args: Prisma.CustomerPjDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerPjDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerPjDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>[]
          }
          upsert: {
            args: Prisma.CustomerPjDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPjDataPayload>
          }
          aggregate: {
            args: Prisma.CustomerPjDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerPjData>
          }
          groupBy: {
            args: Prisma.CustomerPjDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerPjDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerPjDataCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerPjDataCountAggregateOutputType> | number
          }
        }
      }
      Dependent: {
        payload: Prisma.$DependentPayload<ExtArgs>
        fields: Prisma.DependentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DependentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DependentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>
          }
          findFirst: {
            args: Prisma.DependentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DependentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>
          }
          findMany: {
            args: Prisma.DependentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>[]
          }
          create: {
            args: Prisma.DependentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>
          }
          createMany: {
            args: Prisma.DependentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DependentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>[]
          }
          delete: {
            args: Prisma.DependentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>
          }
          update: {
            args: Prisma.DependentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>
          }
          deleteMany: {
            args: Prisma.DependentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DependentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DependentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>[]
          }
          upsert: {
            args: Prisma.DependentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DependentPayload>
          }
          aggregate: {
            args: Prisma.DependentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDependent>
          }
          groupBy: {
            args: Prisma.DependentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DependentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DependentCountArgs<ExtArgs>
            result: $Utils.Optional<DependentCountAggregateOutputType> | number
          }
        }
      }
      Employee: {
        payload: Prisma.$EmployeePayload<ExtArgs>
        fields: Prisma.EmployeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findFirst: {
            args: Prisma.EmployeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          findMany: {
            args: Prisma.EmployeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          create: {
            args: Prisma.EmployeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          createMany: {
            args: Prisma.EmployeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          delete: {
            args: Prisma.EmployeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          update: {
            args: Prisma.EmployeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          deleteMany: {
            args: Prisma.EmployeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmployeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>[]
          }
          upsert: {
            args: Prisma.EmployeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployeePayload>
          }
          aggregate: {
            args: Prisma.EmployeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployee>
          }
          groupBy: {
            args: Prisma.EmployeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployeeCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeCountAggregateOutputType> | number
          }
        }
      }
      Invoice: {
        payload: Prisma.$InvoicePayload<ExtArgs>
        fields: Prisma.InvoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findFirst: {
            args: Prisma.InvoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          findMany: {
            args: Prisma.InvoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          create: {
            args: Prisma.InvoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          createMany: {
            args: Prisma.InvoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvoiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          delete: {
            args: Prisma.InvoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          update: {
            args: Prisma.InvoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          deleteMany: {
            args: Prisma.InvoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvoiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>[]
          }
          upsert: {
            args: Prisma.InvoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.InvoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: Prisma.$PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          createMany: {
            args: Prisma.PlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    affiliate?: AffiliateOmit
    affiliateCustomer?: AffiliateCustomerOmit
    creditCard?: CreditCardOmit
    customer?: CustomerOmit
    customerCard?: CustomerCardOmit
    customerPfData?: CustomerPfDataOmit
    customerPjData?: CustomerPjDataOmit
    dependent?: DependentOmit
    employee?: EmployeeOmit
    invoice?: InvoiceOmit
    plan?: PlanOmit
    subscription?: SubscriptionOmit
    user?: UserOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AffiliateCountOutputType
   */

  export type AffiliateCountOutputType = {
    AffiliateCustomer: number
    Customer: number
  }

  export type AffiliateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AffiliateCustomer?: boolean | AffiliateCountOutputTypeCountAffiliateCustomerArgs
    Customer?: boolean | AffiliateCountOutputTypeCountCustomerArgs
  }

  // Custom InputTypes
  /**
   * AffiliateCountOutputType without action
   */
  export type AffiliateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCountOutputType
     */
    select?: AffiliateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AffiliateCountOutputType without action
   */
  export type AffiliateCountOutputTypeCountAffiliateCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateCustomerWhereInput
  }

  /**
   * AffiliateCountOutputType without action
   */
  export type AffiliateCountOutputTypeCountCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    AffiliateCustomer: number
    CreditCard: number
    Dependent: number
    Employee: number
    Subscription: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AffiliateCustomer?: boolean | CustomerCountOutputTypeCountAffiliateCustomerArgs
    CreditCard?: boolean | CustomerCountOutputTypeCountCreditCardArgs
    Dependent?: boolean | CustomerCountOutputTypeCountDependentArgs
    Employee?: boolean | CustomerCountOutputTypeCountEmployeeArgs
    Subscription?: boolean | CustomerCountOutputTypeCountSubscriptionArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountAffiliateCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateCustomerWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountCreditCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditCardWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountDependentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DependentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountEmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type EmployeeCountOutputType
   */

  export type EmployeeCountOutputType = {
    Dependent: number
  }

  export type EmployeeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Dependent?: boolean | EmployeeCountOutputTypeCountDependentArgs
  }

  // Custom InputTypes
  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeeCountOutputType
     */
    select?: EmployeeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeeCountOutputType without action
   */
  export type EmployeeCountOutputTypeCountDependentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DependentWhereInput
  }


  /**
   * Count Type PlanCountOutputType
   */

  export type PlanCountOutputType = {
    Customer: number
    Subscription: number
  }

  export type PlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | PlanCountOutputTypeCountCustomerArgs
    Subscription?: boolean | PlanCountOutputTypeCountSubscriptionArgs
  }

  // Custom InputTypes
  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCountOutputType
     */
    select?: PlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type SubscriptionCountOutputType
   */

  export type SubscriptionCountOutputType = {
    Invoice: number
  }

  export type SubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Invoice?: boolean | SubscriptionCountOutputTypeCountInvoiceArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionCountOutputType
     */
    select?: SubscriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeCountInvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Affiliate
   */

  export type AggregateAffiliate = {
    _count: AffiliateCountAggregateOutputType | null
    _avg: AffiliateAvgAggregateOutputType | null
    _sum: AffiliateSumAggregateOutputType | null
    _min: AffiliateMinAggregateOutputType | null
    _max: AffiliateMaxAggregateOutputType | null
  }

  export type AffiliateAvgAggregateOutputType = {
    commissionValue: number | null
  }

  export type AffiliateSumAggregateOutputType = {
    commissionValue: number | null
  }

  export type AffiliateMinAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    name: string | null
    commissionType: $Enums.CommissionType | null
    commissionValue: number | null
    cpf: string | null
    phone: string | null
    email: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AffiliateMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    name: string | null
    commissionType: $Enums.CommissionType | null
    commissionValue: number | null
    cpf: string | null
    phone: string | null
    email: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AffiliateCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    name: number
    commissionType: number
    commissionValue: number
    cpf: number
    phone: number
    email: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AffiliateAvgAggregateInputType = {
    commissionValue?: true
  }

  export type AffiliateSumAggregateInputType = {
    commissionValue?: true
  }

  export type AffiliateMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    name?: true
    commissionType?: true
    commissionValue?: true
    cpf?: true
    phone?: true
    email?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AffiliateMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    name?: true
    commissionType?: true
    commissionValue?: true
    cpf?: true
    phone?: true
    email?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AffiliateCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    name?: true
    commissionType?: true
    commissionValue?: true
    cpf?: true
    phone?: true
    email?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AffiliateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Affiliate to aggregate.
     */
    where?: AffiliateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliates to fetch.
     */
    orderBy?: AffiliateOrderByWithRelationInput | AffiliateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AffiliateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Affiliates
    **/
    _count?: true | AffiliateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AffiliateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AffiliateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AffiliateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AffiliateMaxAggregateInputType
  }

  export type GetAffiliateAggregateType<T extends AffiliateAggregateArgs> = {
        [P in keyof T & keyof AggregateAffiliate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAffiliate[P]>
      : GetScalarType<T[P], AggregateAffiliate[P]>
  }




  export type AffiliateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateWhereInput
    orderBy?: AffiliateOrderByWithAggregationInput | AffiliateOrderByWithAggregationInput[]
    by: AffiliateScalarFieldEnum[] | AffiliateScalarFieldEnum
    having?: AffiliateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AffiliateCountAggregateInputType | true
    _avg?: AffiliateAvgAggregateInputType
    _sum?: AffiliateSumAggregateInputType
    _min?: AffiliateMinAggregateInputType
    _max?: AffiliateMaxAggregateInputType
  }

  export type AffiliateGroupByOutputType = {
    id: string
    userId: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone: string | null
    email: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: AffiliateCountAggregateOutputType | null
    _avg: AffiliateAvgAggregateOutputType | null
    _sum: AffiliateSumAggregateOutputType | null
    _min: AffiliateMinAggregateOutputType | null
    _max: AffiliateMaxAggregateOutputType | null
  }

  type GetAffiliateGroupByPayload<T extends AffiliateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AffiliateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AffiliateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AffiliateGroupByOutputType[P]>
            : GetScalarType<T[P], AffiliateGroupByOutputType[P]>
        }
      >
    >


  export type AffiliateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    name?: boolean
    commissionType?: boolean
    commissionValue?: boolean
    cpf?: boolean
    phone?: boolean
    email?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
    AffiliateCustomer?: boolean | Affiliate$AffiliateCustomerArgs<ExtArgs>
    Customer?: boolean | Affiliate$CustomerArgs<ExtArgs>
    _count?: boolean | AffiliateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliate"]>

  export type AffiliateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    name?: boolean
    commissionType?: boolean
    commissionValue?: boolean
    cpf?: boolean
    phone?: boolean
    email?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliate"]>

  export type AffiliateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    name?: boolean
    commissionType?: boolean
    commissionValue?: boolean
    cpf?: boolean
    phone?: boolean
    email?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliate"]>

  export type AffiliateSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    name?: boolean
    commissionType?: boolean
    commissionValue?: boolean
    cpf?: boolean
    phone?: boolean
    email?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AffiliateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "code" | "name" | "commissionType" | "commissionValue" | "cpf" | "phone" | "email" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["affiliate"]>
  export type AffiliateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
    AffiliateCustomer?: boolean | Affiliate$AffiliateCustomerArgs<ExtArgs>
    Customer?: boolean | Affiliate$CustomerArgs<ExtArgs>
    _count?: boolean | AffiliateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AffiliateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AffiliateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AffiliatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Affiliate"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
      AffiliateCustomer: Prisma.$AffiliateCustomerPayload<ExtArgs>[]
      Customer: Prisma.$CustomerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      code: string
      name: string
      commissionType: $Enums.CommissionType
      commissionValue: number
      cpf: string
      phone: string | null
      email: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["affiliate"]>
    composites: {}
  }

  type AffiliateGetPayload<S extends boolean | null | undefined | AffiliateDefaultArgs> = $Result.GetResult<Prisma.$AffiliatePayload, S>

  type AffiliateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AffiliateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AffiliateCountAggregateInputType | true
    }

  export interface AffiliateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Affiliate'], meta: { name: 'Affiliate' } }
    /**
     * Find zero or one Affiliate that matches the filter.
     * @param {AffiliateFindUniqueArgs} args - Arguments to find a Affiliate
     * @example
     * // Get one Affiliate
     * const affiliate = await prisma.affiliate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AffiliateFindUniqueArgs>(args: SelectSubset<T, AffiliateFindUniqueArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Affiliate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AffiliateFindUniqueOrThrowArgs} args - Arguments to find a Affiliate
     * @example
     * // Get one Affiliate
     * const affiliate = await prisma.affiliate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AffiliateFindUniqueOrThrowArgs>(args: SelectSubset<T, AffiliateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Affiliate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateFindFirstArgs} args - Arguments to find a Affiliate
     * @example
     * // Get one Affiliate
     * const affiliate = await prisma.affiliate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AffiliateFindFirstArgs>(args?: SelectSubset<T, AffiliateFindFirstArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Affiliate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateFindFirstOrThrowArgs} args - Arguments to find a Affiliate
     * @example
     * // Get one Affiliate
     * const affiliate = await prisma.affiliate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AffiliateFindFirstOrThrowArgs>(args?: SelectSubset<T, AffiliateFindFirstOrThrowArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Affiliates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Affiliates
     * const affiliates = await prisma.affiliate.findMany()
     * 
     * // Get first 10 Affiliates
     * const affiliates = await prisma.affiliate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const affiliateWithIdOnly = await prisma.affiliate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AffiliateFindManyArgs>(args?: SelectSubset<T, AffiliateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Affiliate.
     * @param {AffiliateCreateArgs} args - Arguments to create a Affiliate.
     * @example
     * // Create one Affiliate
     * const Affiliate = await prisma.affiliate.create({
     *   data: {
     *     // ... data to create a Affiliate
     *   }
     * })
     * 
     */
    create<T extends AffiliateCreateArgs>(args: SelectSubset<T, AffiliateCreateArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Affiliates.
     * @param {AffiliateCreateManyArgs} args - Arguments to create many Affiliates.
     * @example
     * // Create many Affiliates
     * const affiliate = await prisma.affiliate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AffiliateCreateManyArgs>(args?: SelectSubset<T, AffiliateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Affiliates and returns the data saved in the database.
     * @param {AffiliateCreateManyAndReturnArgs} args - Arguments to create many Affiliates.
     * @example
     * // Create many Affiliates
     * const affiliate = await prisma.affiliate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Affiliates and only return the `id`
     * const affiliateWithIdOnly = await prisma.affiliate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AffiliateCreateManyAndReturnArgs>(args?: SelectSubset<T, AffiliateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Affiliate.
     * @param {AffiliateDeleteArgs} args - Arguments to delete one Affiliate.
     * @example
     * // Delete one Affiliate
     * const Affiliate = await prisma.affiliate.delete({
     *   where: {
     *     // ... filter to delete one Affiliate
     *   }
     * })
     * 
     */
    delete<T extends AffiliateDeleteArgs>(args: SelectSubset<T, AffiliateDeleteArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Affiliate.
     * @param {AffiliateUpdateArgs} args - Arguments to update one Affiliate.
     * @example
     * // Update one Affiliate
     * const affiliate = await prisma.affiliate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AffiliateUpdateArgs>(args: SelectSubset<T, AffiliateUpdateArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Affiliates.
     * @param {AffiliateDeleteManyArgs} args - Arguments to filter Affiliates to delete.
     * @example
     * // Delete a few Affiliates
     * const { count } = await prisma.affiliate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AffiliateDeleteManyArgs>(args?: SelectSubset<T, AffiliateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Affiliates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Affiliates
     * const affiliate = await prisma.affiliate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AffiliateUpdateManyArgs>(args: SelectSubset<T, AffiliateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Affiliates and returns the data updated in the database.
     * @param {AffiliateUpdateManyAndReturnArgs} args - Arguments to update many Affiliates.
     * @example
     * // Update many Affiliates
     * const affiliate = await prisma.affiliate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Affiliates and only return the `id`
     * const affiliateWithIdOnly = await prisma.affiliate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AffiliateUpdateManyAndReturnArgs>(args: SelectSubset<T, AffiliateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Affiliate.
     * @param {AffiliateUpsertArgs} args - Arguments to update or create a Affiliate.
     * @example
     * // Update or create a Affiliate
     * const affiliate = await prisma.affiliate.upsert({
     *   create: {
     *     // ... data to create a Affiliate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Affiliate we want to update
     *   }
     * })
     */
    upsert<T extends AffiliateUpsertArgs>(args: SelectSubset<T, AffiliateUpsertArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Affiliates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCountArgs} args - Arguments to filter Affiliates to count.
     * @example
     * // Count the number of Affiliates
     * const count = await prisma.affiliate.count({
     *   where: {
     *     // ... the filter for the Affiliates we want to count
     *   }
     * })
    **/
    count<T extends AffiliateCountArgs>(
      args?: Subset<T, AffiliateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AffiliateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Affiliate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AffiliateAggregateArgs>(args: Subset<T, AffiliateAggregateArgs>): Prisma.PrismaPromise<GetAffiliateAggregateType<T>>

    /**
     * Group by Affiliate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AffiliateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AffiliateGroupByArgs['orderBy'] }
        : { orderBy?: AffiliateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AffiliateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffiliateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Affiliate model
   */
  readonly fields: AffiliateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Affiliate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AffiliateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    AffiliateCustomer<T extends Affiliate$AffiliateCustomerArgs<ExtArgs> = {}>(args?: Subset<T, Affiliate$AffiliateCustomerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Customer<T extends Affiliate$CustomerArgs<ExtArgs> = {}>(args?: Subset<T, Affiliate$CustomerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Affiliate model
   */
  interface AffiliateFieldRefs {
    readonly id: FieldRef<"Affiliate", 'String'>
    readonly userId: FieldRef<"Affiliate", 'String'>
    readonly code: FieldRef<"Affiliate", 'String'>
    readonly name: FieldRef<"Affiliate", 'String'>
    readonly commissionType: FieldRef<"Affiliate", 'CommissionType'>
    readonly commissionValue: FieldRef<"Affiliate", 'Int'>
    readonly cpf: FieldRef<"Affiliate", 'String'>
    readonly phone: FieldRef<"Affiliate", 'String'>
    readonly email: FieldRef<"Affiliate", 'String'>
    readonly isActive: FieldRef<"Affiliate", 'Boolean'>
    readonly createdAt: FieldRef<"Affiliate", 'DateTime'>
    readonly updatedAt: FieldRef<"Affiliate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Affiliate findUnique
   */
  export type AffiliateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * Filter, which Affiliate to fetch.
     */
    where: AffiliateWhereUniqueInput
  }

  /**
   * Affiliate findUniqueOrThrow
   */
  export type AffiliateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * Filter, which Affiliate to fetch.
     */
    where: AffiliateWhereUniqueInput
  }

  /**
   * Affiliate findFirst
   */
  export type AffiliateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * Filter, which Affiliate to fetch.
     */
    where?: AffiliateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliates to fetch.
     */
    orderBy?: AffiliateOrderByWithRelationInput | AffiliateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Affiliates.
     */
    cursor?: AffiliateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Affiliates.
     */
    distinct?: AffiliateScalarFieldEnum | AffiliateScalarFieldEnum[]
  }

  /**
   * Affiliate findFirstOrThrow
   */
  export type AffiliateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * Filter, which Affiliate to fetch.
     */
    where?: AffiliateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliates to fetch.
     */
    orderBy?: AffiliateOrderByWithRelationInput | AffiliateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Affiliates.
     */
    cursor?: AffiliateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Affiliates.
     */
    distinct?: AffiliateScalarFieldEnum | AffiliateScalarFieldEnum[]
  }

  /**
   * Affiliate findMany
   */
  export type AffiliateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * Filter, which Affiliates to fetch.
     */
    where?: AffiliateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Affiliates to fetch.
     */
    orderBy?: AffiliateOrderByWithRelationInput | AffiliateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Affiliates.
     */
    cursor?: AffiliateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Affiliates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Affiliates.
     */
    skip?: number
    distinct?: AffiliateScalarFieldEnum | AffiliateScalarFieldEnum[]
  }

  /**
   * Affiliate create
   */
  export type AffiliateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * The data needed to create a Affiliate.
     */
    data: XOR<AffiliateCreateInput, AffiliateUncheckedCreateInput>
  }

  /**
   * Affiliate createMany
   */
  export type AffiliateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Affiliates.
     */
    data: AffiliateCreateManyInput | AffiliateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Affiliate createManyAndReturn
   */
  export type AffiliateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * The data used to create many Affiliates.
     */
    data: AffiliateCreateManyInput | AffiliateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Affiliate update
   */
  export type AffiliateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * The data needed to update a Affiliate.
     */
    data: XOR<AffiliateUpdateInput, AffiliateUncheckedUpdateInput>
    /**
     * Choose, which Affiliate to update.
     */
    where: AffiliateWhereUniqueInput
  }

  /**
   * Affiliate updateMany
   */
  export type AffiliateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Affiliates.
     */
    data: XOR<AffiliateUpdateManyMutationInput, AffiliateUncheckedUpdateManyInput>
    /**
     * Filter which Affiliates to update
     */
    where?: AffiliateWhereInput
    /**
     * Limit how many Affiliates to update.
     */
    limit?: number
  }

  /**
   * Affiliate updateManyAndReturn
   */
  export type AffiliateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * The data used to update Affiliates.
     */
    data: XOR<AffiliateUpdateManyMutationInput, AffiliateUncheckedUpdateManyInput>
    /**
     * Filter which Affiliates to update
     */
    where?: AffiliateWhereInput
    /**
     * Limit how many Affiliates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Affiliate upsert
   */
  export type AffiliateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * The filter to search for the Affiliate to update in case it exists.
     */
    where: AffiliateWhereUniqueInput
    /**
     * In case the Affiliate found by the `where` argument doesn't exist, create a new Affiliate with this data.
     */
    create: XOR<AffiliateCreateInput, AffiliateUncheckedCreateInput>
    /**
     * In case the Affiliate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AffiliateUpdateInput, AffiliateUncheckedUpdateInput>
  }

  /**
   * Affiliate delete
   */
  export type AffiliateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    /**
     * Filter which Affiliate to delete.
     */
    where: AffiliateWhereUniqueInput
  }

  /**
   * Affiliate deleteMany
   */
  export type AffiliateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Affiliates to delete
     */
    where?: AffiliateWhereInput
    /**
     * Limit how many Affiliates to delete.
     */
    limit?: number
  }

  /**
   * Affiliate.AffiliateCustomer
   */
  export type Affiliate$AffiliateCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    where?: AffiliateCustomerWhereInput
    orderBy?: AffiliateCustomerOrderByWithRelationInput | AffiliateCustomerOrderByWithRelationInput[]
    cursor?: AffiliateCustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffiliateCustomerScalarFieldEnum | AffiliateCustomerScalarFieldEnum[]
  }

  /**
   * Affiliate.Customer
   */
  export type Affiliate$CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Affiliate without action
   */
  export type AffiliateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
  }


  /**
   * Model AffiliateCustomer
   */

  export type AggregateAffiliateCustomer = {
    _count: AffiliateCustomerCountAggregateOutputType | null
    _min: AffiliateCustomerMinAggregateOutputType | null
    _max: AffiliateCustomerMaxAggregateOutputType | null
  }

  export type AffiliateCustomerMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    affiliateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AffiliateCustomerMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    affiliateId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AffiliateCustomerCountAggregateOutputType = {
    id: number
    customerId: number
    affiliateId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AffiliateCustomerMinAggregateInputType = {
    id?: true
    customerId?: true
    affiliateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AffiliateCustomerMaxAggregateInputType = {
    id?: true
    customerId?: true
    affiliateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AffiliateCustomerCountAggregateInputType = {
    id?: true
    customerId?: true
    affiliateId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AffiliateCustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AffiliateCustomer to aggregate.
     */
    where?: AffiliateCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateCustomers to fetch.
     */
    orderBy?: AffiliateCustomerOrderByWithRelationInput | AffiliateCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AffiliateCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AffiliateCustomers
    **/
    _count?: true | AffiliateCustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AffiliateCustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AffiliateCustomerMaxAggregateInputType
  }

  export type GetAffiliateCustomerAggregateType<T extends AffiliateCustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateAffiliateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAffiliateCustomer[P]>
      : GetScalarType<T[P], AggregateAffiliateCustomer[P]>
  }




  export type AffiliateCustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AffiliateCustomerWhereInput
    orderBy?: AffiliateCustomerOrderByWithAggregationInput | AffiliateCustomerOrderByWithAggregationInput[]
    by: AffiliateCustomerScalarFieldEnum[] | AffiliateCustomerScalarFieldEnum
    having?: AffiliateCustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AffiliateCustomerCountAggregateInputType | true
    _min?: AffiliateCustomerMinAggregateInputType
    _max?: AffiliateCustomerMaxAggregateInputType
  }

  export type AffiliateCustomerGroupByOutputType = {
    id: string
    customerId: string
    affiliateId: string
    createdAt: Date
    updatedAt: Date
    _count: AffiliateCustomerCountAggregateOutputType | null
    _min: AffiliateCustomerMinAggregateOutputType | null
    _max: AffiliateCustomerMaxAggregateOutputType | null
  }

  type GetAffiliateCustomerGroupByPayload<T extends AffiliateCustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AffiliateCustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AffiliateCustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AffiliateCustomerGroupByOutputType[P]>
            : GetScalarType<T[P], AffiliateCustomerGroupByOutputType[P]>
        }
      >
    >


  export type AffiliateCustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    affiliateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Affiliate?: boolean | AffiliateDefaultArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateCustomer"]>

  export type AffiliateCustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    affiliateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Affiliate?: boolean | AffiliateDefaultArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateCustomer"]>

  export type AffiliateCustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    affiliateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Affiliate?: boolean | AffiliateDefaultArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["affiliateCustomer"]>

  export type AffiliateCustomerSelectScalar = {
    id?: boolean
    customerId?: boolean
    affiliateId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AffiliateCustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "affiliateId" | "createdAt" | "updatedAt", ExtArgs["result"]["affiliateCustomer"]>
  export type AffiliateCustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affiliate?: boolean | AffiliateDefaultArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type AffiliateCustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affiliate?: boolean | AffiliateDefaultArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type AffiliateCustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affiliate?: boolean | AffiliateDefaultArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $AffiliateCustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AffiliateCustomer"
    objects: {
      Affiliate: Prisma.$AffiliatePayload<ExtArgs>
      Customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      affiliateId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["affiliateCustomer"]>
    composites: {}
  }

  type AffiliateCustomerGetPayload<S extends boolean | null | undefined | AffiliateCustomerDefaultArgs> = $Result.GetResult<Prisma.$AffiliateCustomerPayload, S>

  type AffiliateCustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AffiliateCustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AffiliateCustomerCountAggregateInputType | true
    }

  export interface AffiliateCustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AffiliateCustomer'], meta: { name: 'AffiliateCustomer' } }
    /**
     * Find zero or one AffiliateCustomer that matches the filter.
     * @param {AffiliateCustomerFindUniqueArgs} args - Arguments to find a AffiliateCustomer
     * @example
     * // Get one AffiliateCustomer
     * const affiliateCustomer = await prisma.affiliateCustomer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AffiliateCustomerFindUniqueArgs>(args: SelectSubset<T, AffiliateCustomerFindUniqueArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AffiliateCustomer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AffiliateCustomerFindUniqueOrThrowArgs} args - Arguments to find a AffiliateCustomer
     * @example
     * // Get one AffiliateCustomer
     * const affiliateCustomer = await prisma.affiliateCustomer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AffiliateCustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, AffiliateCustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AffiliateCustomer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerFindFirstArgs} args - Arguments to find a AffiliateCustomer
     * @example
     * // Get one AffiliateCustomer
     * const affiliateCustomer = await prisma.affiliateCustomer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AffiliateCustomerFindFirstArgs>(args?: SelectSubset<T, AffiliateCustomerFindFirstArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AffiliateCustomer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerFindFirstOrThrowArgs} args - Arguments to find a AffiliateCustomer
     * @example
     * // Get one AffiliateCustomer
     * const affiliateCustomer = await prisma.affiliateCustomer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AffiliateCustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, AffiliateCustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AffiliateCustomers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AffiliateCustomers
     * const affiliateCustomers = await prisma.affiliateCustomer.findMany()
     * 
     * // Get first 10 AffiliateCustomers
     * const affiliateCustomers = await prisma.affiliateCustomer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const affiliateCustomerWithIdOnly = await prisma.affiliateCustomer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AffiliateCustomerFindManyArgs>(args?: SelectSubset<T, AffiliateCustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AffiliateCustomer.
     * @param {AffiliateCustomerCreateArgs} args - Arguments to create a AffiliateCustomer.
     * @example
     * // Create one AffiliateCustomer
     * const AffiliateCustomer = await prisma.affiliateCustomer.create({
     *   data: {
     *     // ... data to create a AffiliateCustomer
     *   }
     * })
     * 
     */
    create<T extends AffiliateCustomerCreateArgs>(args: SelectSubset<T, AffiliateCustomerCreateArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AffiliateCustomers.
     * @param {AffiliateCustomerCreateManyArgs} args - Arguments to create many AffiliateCustomers.
     * @example
     * // Create many AffiliateCustomers
     * const affiliateCustomer = await prisma.affiliateCustomer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AffiliateCustomerCreateManyArgs>(args?: SelectSubset<T, AffiliateCustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AffiliateCustomers and returns the data saved in the database.
     * @param {AffiliateCustomerCreateManyAndReturnArgs} args - Arguments to create many AffiliateCustomers.
     * @example
     * // Create many AffiliateCustomers
     * const affiliateCustomer = await prisma.affiliateCustomer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AffiliateCustomers and only return the `id`
     * const affiliateCustomerWithIdOnly = await prisma.affiliateCustomer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AffiliateCustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, AffiliateCustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AffiliateCustomer.
     * @param {AffiliateCustomerDeleteArgs} args - Arguments to delete one AffiliateCustomer.
     * @example
     * // Delete one AffiliateCustomer
     * const AffiliateCustomer = await prisma.affiliateCustomer.delete({
     *   where: {
     *     // ... filter to delete one AffiliateCustomer
     *   }
     * })
     * 
     */
    delete<T extends AffiliateCustomerDeleteArgs>(args: SelectSubset<T, AffiliateCustomerDeleteArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AffiliateCustomer.
     * @param {AffiliateCustomerUpdateArgs} args - Arguments to update one AffiliateCustomer.
     * @example
     * // Update one AffiliateCustomer
     * const affiliateCustomer = await prisma.affiliateCustomer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AffiliateCustomerUpdateArgs>(args: SelectSubset<T, AffiliateCustomerUpdateArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AffiliateCustomers.
     * @param {AffiliateCustomerDeleteManyArgs} args - Arguments to filter AffiliateCustomers to delete.
     * @example
     * // Delete a few AffiliateCustomers
     * const { count } = await prisma.affiliateCustomer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AffiliateCustomerDeleteManyArgs>(args?: SelectSubset<T, AffiliateCustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AffiliateCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AffiliateCustomers
     * const affiliateCustomer = await prisma.affiliateCustomer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AffiliateCustomerUpdateManyArgs>(args: SelectSubset<T, AffiliateCustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AffiliateCustomers and returns the data updated in the database.
     * @param {AffiliateCustomerUpdateManyAndReturnArgs} args - Arguments to update many AffiliateCustomers.
     * @example
     * // Update many AffiliateCustomers
     * const affiliateCustomer = await prisma.affiliateCustomer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AffiliateCustomers and only return the `id`
     * const affiliateCustomerWithIdOnly = await prisma.affiliateCustomer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AffiliateCustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, AffiliateCustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AffiliateCustomer.
     * @param {AffiliateCustomerUpsertArgs} args - Arguments to update or create a AffiliateCustomer.
     * @example
     * // Update or create a AffiliateCustomer
     * const affiliateCustomer = await prisma.affiliateCustomer.upsert({
     *   create: {
     *     // ... data to create a AffiliateCustomer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AffiliateCustomer we want to update
     *   }
     * })
     */
    upsert<T extends AffiliateCustomerUpsertArgs>(args: SelectSubset<T, AffiliateCustomerUpsertArgs<ExtArgs>>): Prisma__AffiliateCustomerClient<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AffiliateCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerCountArgs} args - Arguments to filter AffiliateCustomers to count.
     * @example
     * // Count the number of AffiliateCustomers
     * const count = await prisma.affiliateCustomer.count({
     *   where: {
     *     // ... the filter for the AffiliateCustomers we want to count
     *   }
     * })
    **/
    count<T extends AffiliateCustomerCountArgs>(
      args?: Subset<T, AffiliateCustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AffiliateCustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AffiliateCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AffiliateCustomerAggregateArgs>(args: Subset<T, AffiliateCustomerAggregateArgs>): Prisma.PrismaPromise<GetAffiliateCustomerAggregateType<T>>

    /**
     * Group by AffiliateCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AffiliateCustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AffiliateCustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AffiliateCustomerGroupByArgs['orderBy'] }
        : { orderBy?: AffiliateCustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AffiliateCustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAffiliateCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AffiliateCustomer model
   */
  readonly fields: AffiliateCustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AffiliateCustomer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AffiliateCustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Affiliate<T extends AffiliateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AffiliateDefaultArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AffiliateCustomer model
   */
  interface AffiliateCustomerFieldRefs {
    readonly id: FieldRef<"AffiliateCustomer", 'String'>
    readonly customerId: FieldRef<"AffiliateCustomer", 'String'>
    readonly affiliateId: FieldRef<"AffiliateCustomer", 'String'>
    readonly createdAt: FieldRef<"AffiliateCustomer", 'DateTime'>
    readonly updatedAt: FieldRef<"AffiliateCustomer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AffiliateCustomer findUnique
   */
  export type AffiliateCustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateCustomer to fetch.
     */
    where: AffiliateCustomerWhereUniqueInput
  }

  /**
   * AffiliateCustomer findUniqueOrThrow
   */
  export type AffiliateCustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateCustomer to fetch.
     */
    where: AffiliateCustomerWhereUniqueInput
  }

  /**
   * AffiliateCustomer findFirst
   */
  export type AffiliateCustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateCustomer to fetch.
     */
    where?: AffiliateCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateCustomers to fetch.
     */
    orderBy?: AffiliateCustomerOrderByWithRelationInput | AffiliateCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AffiliateCustomers.
     */
    cursor?: AffiliateCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AffiliateCustomers.
     */
    distinct?: AffiliateCustomerScalarFieldEnum | AffiliateCustomerScalarFieldEnum[]
  }

  /**
   * AffiliateCustomer findFirstOrThrow
   */
  export type AffiliateCustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateCustomer to fetch.
     */
    where?: AffiliateCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateCustomers to fetch.
     */
    orderBy?: AffiliateCustomerOrderByWithRelationInput | AffiliateCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AffiliateCustomers.
     */
    cursor?: AffiliateCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AffiliateCustomers.
     */
    distinct?: AffiliateCustomerScalarFieldEnum | AffiliateCustomerScalarFieldEnum[]
  }

  /**
   * AffiliateCustomer findMany
   */
  export type AffiliateCustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * Filter, which AffiliateCustomers to fetch.
     */
    where?: AffiliateCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AffiliateCustomers to fetch.
     */
    orderBy?: AffiliateCustomerOrderByWithRelationInput | AffiliateCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AffiliateCustomers.
     */
    cursor?: AffiliateCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AffiliateCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AffiliateCustomers.
     */
    skip?: number
    distinct?: AffiliateCustomerScalarFieldEnum | AffiliateCustomerScalarFieldEnum[]
  }

  /**
   * AffiliateCustomer create
   */
  export type AffiliateCustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a AffiliateCustomer.
     */
    data: XOR<AffiliateCustomerCreateInput, AffiliateCustomerUncheckedCreateInput>
  }

  /**
   * AffiliateCustomer createMany
   */
  export type AffiliateCustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AffiliateCustomers.
     */
    data: AffiliateCustomerCreateManyInput | AffiliateCustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AffiliateCustomer createManyAndReturn
   */
  export type AffiliateCustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * The data used to create many AffiliateCustomers.
     */
    data: AffiliateCustomerCreateManyInput | AffiliateCustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AffiliateCustomer update
   */
  export type AffiliateCustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a AffiliateCustomer.
     */
    data: XOR<AffiliateCustomerUpdateInput, AffiliateCustomerUncheckedUpdateInput>
    /**
     * Choose, which AffiliateCustomer to update.
     */
    where: AffiliateCustomerWhereUniqueInput
  }

  /**
   * AffiliateCustomer updateMany
   */
  export type AffiliateCustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AffiliateCustomers.
     */
    data: XOR<AffiliateCustomerUpdateManyMutationInput, AffiliateCustomerUncheckedUpdateManyInput>
    /**
     * Filter which AffiliateCustomers to update
     */
    where?: AffiliateCustomerWhereInput
    /**
     * Limit how many AffiliateCustomers to update.
     */
    limit?: number
  }

  /**
   * AffiliateCustomer updateManyAndReturn
   */
  export type AffiliateCustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * The data used to update AffiliateCustomers.
     */
    data: XOR<AffiliateCustomerUpdateManyMutationInput, AffiliateCustomerUncheckedUpdateManyInput>
    /**
     * Filter which AffiliateCustomers to update
     */
    where?: AffiliateCustomerWhereInput
    /**
     * Limit how many AffiliateCustomers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AffiliateCustomer upsert
   */
  export type AffiliateCustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the AffiliateCustomer to update in case it exists.
     */
    where: AffiliateCustomerWhereUniqueInput
    /**
     * In case the AffiliateCustomer found by the `where` argument doesn't exist, create a new AffiliateCustomer with this data.
     */
    create: XOR<AffiliateCustomerCreateInput, AffiliateCustomerUncheckedCreateInput>
    /**
     * In case the AffiliateCustomer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AffiliateCustomerUpdateInput, AffiliateCustomerUncheckedUpdateInput>
  }

  /**
   * AffiliateCustomer delete
   */
  export type AffiliateCustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    /**
     * Filter which AffiliateCustomer to delete.
     */
    where: AffiliateCustomerWhereUniqueInput
  }

  /**
   * AffiliateCustomer deleteMany
   */
  export type AffiliateCustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AffiliateCustomers to delete
     */
    where?: AffiliateCustomerWhereInput
    /**
     * Limit how many AffiliateCustomers to delete.
     */
    limit?: number
  }

  /**
   * AffiliateCustomer without action
   */
  export type AffiliateCustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
  }


  /**
   * Model CreditCard
   */

  export type AggregateCreditCard = {
    _count: CreditCardCountAggregateOutputType | null
    _min: CreditCardMinAggregateOutputType | null
    _max: CreditCardMaxAggregateOutputType | null
  }

  export type CreditCardMinAggregateOutputType = {
    id: string | null
    clientId: string | null
    token: string | null
    last4: string | null
    brand: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditCardMaxAggregateOutputType = {
    id: string | null
    clientId: string | null
    token: string | null
    last4: string | null
    brand: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditCardCountAggregateOutputType = {
    id: number
    clientId: number
    token: number
    last4: number
    brand: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CreditCardMinAggregateInputType = {
    id?: true
    clientId?: true
    token?: true
    last4?: true
    brand?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditCardMaxAggregateInputType = {
    id?: true
    clientId?: true
    token?: true
    last4?: true
    brand?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditCardCountAggregateInputType = {
    id?: true
    clientId?: true
    token?: true
    last4?: true
    brand?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CreditCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditCard to aggregate.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CreditCards
    **/
    _count?: true | CreditCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditCardMaxAggregateInputType
  }

  export type GetCreditCardAggregateType<T extends CreditCardAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditCard[P]>
      : GetScalarType<T[P], AggregateCreditCard[P]>
  }




  export type CreditCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditCardWhereInput
    orderBy?: CreditCardOrderByWithAggregationInput | CreditCardOrderByWithAggregationInput[]
    by: CreditCardScalarFieldEnum[] | CreditCardScalarFieldEnum
    having?: CreditCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditCardCountAggregateInputType | true
    _min?: CreditCardMinAggregateInputType
    _max?: CreditCardMaxAggregateInputType
  }

  export type CreditCardGroupByOutputType = {
    id: string
    clientId: string
    token: string
    last4: string
    brand: string
    createdAt: Date
    updatedAt: Date
    _count: CreditCardCountAggregateOutputType | null
    _min: CreditCardMinAggregateOutputType | null
    _max: CreditCardMaxAggregateOutputType | null
  }

  type GetCreditCardGroupByPayload<T extends CreditCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditCardGroupByOutputType[P]>
            : GetScalarType<T[P], CreditCardGroupByOutputType[P]>
        }
      >
    >


  export type CreditCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    token?: boolean
    last4?: boolean
    brand?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditCard"]>

  export type CreditCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    token?: boolean
    last4?: boolean
    brand?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditCard"]>

  export type CreditCardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clientId?: boolean
    token?: boolean
    last4?: boolean
    brand?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditCard"]>

  export type CreditCardSelectScalar = {
    id?: boolean
    clientId?: boolean
    token?: boolean
    last4?: boolean
    brand?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CreditCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clientId" | "token" | "last4" | "brand" | "createdAt" | "updatedAt", ExtArgs["result"]["creditCard"]>
  export type CreditCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CreditCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CreditCardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CreditCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CreditCard"
    objects: {
      Customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clientId: string
      token: string
      last4: string
      brand: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["creditCard"]>
    composites: {}
  }

  type CreditCardGetPayload<S extends boolean | null | undefined | CreditCardDefaultArgs> = $Result.GetResult<Prisma.$CreditCardPayload, S>

  type CreditCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CreditCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CreditCardCountAggregateInputType | true
    }

  export interface CreditCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CreditCard'], meta: { name: 'CreditCard' } }
    /**
     * Find zero or one CreditCard that matches the filter.
     * @param {CreditCardFindUniqueArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CreditCardFindUniqueArgs>(args: SelectSubset<T, CreditCardFindUniqueArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CreditCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CreditCardFindUniqueOrThrowArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CreditCardFindUniqueOrThrowArgs>(args: SelectSubset<T, CreditCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CreditCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardFindFirstArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CreditCardFindFirstArgs>(args?: SelectSubset<T, CreditCardFindFirstArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CreditCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardFindFirstOrThrowArgs} args - Arguments to find a CreditCard
     * @example
     * // Get one CreditCard
     * const creditCard = await prisma.creditCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CreditCardFindFirstOrThrowArgs>(args?: SelectSubset<T, CreditCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CreditCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CreditCards
     * const creditCards = await prisma.creditCard.findMany()
     * 
     * // Get first 10 CreditCards
     * const creditCards = await prisma.creditCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditCardWithIdOnly = await prisma.creditCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CreditCardFindManyArgs>(args?: SelectSubset<T, CreditCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CreditCard.
     * @param {CreditCardCreateArgs} args - Arguments to create a CreditCard.
     * @example
     * // Create one CreditCard
     * const CreditCard = await prisma.creditCard.create({
     *   data: {
     *     // ... data to create a CreditCard
     *   }
     * })
     * 
     */
    create<T extends CreditCardCreateArgs>(args: SelectSubset<T, CreditCardCreateArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CreditCards.
     * @param {CreditCardCreateManyArgs} args - Arguments to create many CreditCards.
     * @example
     * // Create many CreditCards
     * const creditCard = await prisma.creditCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CreditCardCreateManyArgs>(args?: SelectSubset<T, CreditCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CreditCards and returns the data saved in the database.
     * @param {CreditCardCreateManyAndReturnArgs} args - Arguments to create many CreditCards.
     * @example
     * // Create many CreditCards
     * const creditCard = await prisma.creditCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CreditCards and only return the `id`
     * const creditCardWithIdOnly = await prisma.creditCard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CreditCardCreateManyAndReturnArgs>(args?: SelectSubset<T, CreditCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CreditCard.
     * @param {CreditCardDeleteArgs} args - Arguments to delete one CreditCard.
     * @example
     * // Delete one CreditCard
     * const CreditCard = await prisma.creditCard.delete({
     *   where: {
     *     // ... filter to delete one CreditCard
     *   }
     * })
     * 
     */
    delete<T extends CreditCardDeleteArgs>(args: SelectSubset<T, CreditCardDeleteArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CreditCard.
     * @param {CreditCardUpdateArgs} args - Arguments to update one CreditCard.
     * @example
     * // Update one CreditCard
     * const creditCard = await prisma.creditCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CreditCardUpdateArgs>(args: SelectSubset<T, CreditCardUpdateArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CreditCards.
     * @param {CreditCardDeleteManyArgs} args - Arguments to filter CreditCards to delete.
     * @example
     * // Delete a few CreditCards
     * const { count } = await prisma.creditCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CreditCardDeleteManyArgs>(args?: SelectSubset<T, CreditCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CreditCards
     * const creditCard = await prisma.creditCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CreditCardUpdateManyArgs>(args: SelectSubset<T, CreditCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CreditCards and returns the data updated in the database.
     * @param {CreditCardUpdateManyAndReturnArgs} args - Arguments to update many CreditCards.
     * @example
     * // Update many CreditCards
     * const creditCard = await prisma.creditCard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CreditCards and only return the `id`
     * const creditCardWithIdOnly = await prisma.creditCard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CreditCardUpdateManyAndReturnArgs>(args: SelectSubset<T, CreditCardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CreditCard.
     * @param {CreditCardUpsertArgs} args - Arguments to update or create a CreditCard.
     * @example
     * // Update or create a CreditCard
     * const creditCard = await prisma.creditCard.upsert({
     *   create: {
     *     // ... data to create a CreditCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CreditCard we want to update
     *   }
     * })
     */
    upsert<T extends CreditCardUpsertArgs>(args: SelectSubset<T, CreditCardUpsertArgs<ExtArgs>>): Prisma__CreditCardClient<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CreditCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardCountArgs} args - Arguments to filter CreditCards to count.
     * @example
     * // Count the number of CreditCards
     * const count = await prisma.creditCard.count({
     *   where: {
     *     // ... the filter for the CreditCards we want to count
     *   }
     * })
    **/
    count<T extends CreditCardCountArgs>(
      args?: Subset<T, CreditCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CreditCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditCardAggregateArgs>(args: Subset<T, CreditCardAggregateArgs>): Prisma.PrismaPromise<GetCreditCardAggregateType<T>>

    /**
     * Group by CreditCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditCardGroupByArgs['orderBy'] }
        : { orderBy?: CreditCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CreditCard model
   */
  readonly fields: CreditCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CreditCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CreditCard model
   */
  interface CreditCardFieldRefs {
    readonly id: FieldRef<"CreditCard", 'String'>
    readonly clientId: FieldRef<"CreditCard", 'String'>
    readonly token: FieldRef<"CreditCard", 'String'>
    readonly last4: FieldRef<"CreditCard", 'String'>
    readonly brand: FieldRef<"CreditCard", 'String'>
    readonly createdAt: FieldRef<"CreditCard", 'DateTime'>
    readonly updatedAt: FieldRef<"CreditCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CreditCard findUnique
   */
  export type CreditCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard findUniqueOrThrow
   */
  export type CreditCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard findFirst
   */
  export type CreditCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditCards.
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditCards.
     */
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * CreditCard findFirstOrThrow
   */
  export type CreditCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCard to fetch.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CreditCards.
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CreditCards.
     */
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * CreditCard findMany
   */
  export type CreditCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter, which CreditCards to fetch.
     */
    where?: CreditCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CreditCards to fetch.
     */
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CreditCards.
     */
    cursor?: CreditCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CreditCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CreditCards.
     */
    skip?: number
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * CreditCard create
   */
  export type CreditCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * The data needed to create a CreditCard.
     */
    data: XOR<CreditCardCreateInput, CreditCardUncheckedCreateInput>
  }

  /**
   * CreditCard createMany
   */
  export type CreditCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CreditCards.
     */
    data: CreditCardCreateManyInput | CreditCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CreditCard createManyAndReturn
   */
  export type CreditCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * The data used to create many CreditCards.
     */
    data: CreditCardCreateManyInput | CreditCardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CreditCard update
   */
  export type CreditCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * The data needed to update a CreditCard.
     */
    data: XOR<CreditCardUpdateInput, CreditCardUncheckedUpdateInput>
    /**
     * Choose, which CreditCard to update.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard updateMany
   */
  export type CreditCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CreditCards.
     */
    data: XOR<CreditCardUpdateManyMutationInput, CreditCardUncheckedUpdateManyInput>
    /**
     * Filter which CreditCards to update
     */
    where?: CreditCardWhereInput
    /**
     * Limit how many CreditCards to update.
     */
    limit?: number
  }

  /**
   * CreditCard updateManyAndReturn
   */
  export type CreditCardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * The data used to update CreditCards.
     */
    data: XOR<CreditCardUpdateManyMutationInput, CreditCardUncheckedUpdateManyInput>
    /**
     * Filter which CreditCards to update
     */
    where?: CreditCardWhereInput
    /**
     * Limit how many CreditCards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CreditCard upsert
   */
  export type CreditCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * The filter to search for the CreditCard to update in case it exists.
     */
    where: CreditCardWhereUniqueInput
    /**
     * In case the CreditCard found by the `where` argument doesn't exist, create a new CreditCard with this data.
     */
    create: XOR<CreditCardCreateInput, CreditCardUncheckedCreateInput>
    /**
     * In case the CreditCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditCardUpdateInput, CreditCardUncheckedUpdateInput>
  }

  /**
   * CreditCard delete
   */
  export type CreditCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    /**
     * Filter which CreditCard to delete.
     */
    where: CreditCardWhereUniqueInput
  }

  /**
   * CreditCard deleteMany
   */
  export type CreditCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CreditCards to delete
     */
    where?: CreditCardWhereInput
    /**
     * Limit how many CreditCards to delete.
     */
    limit?: number
  }

  /**
   * CreditCard without action
   */
  export type CreditCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    cep: number | null
    number: number | null
  }

  export type CustomerSumAggregateOutputType = {
    cep: number | null
    number: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    userId: string | null
    externalId: string | null
    name: string | null
    document: string | null
    observation: string | null
    mainPaymentMethod: $Enums.PaymentType | null
    status: $Enums.CustomerStatus | null
    email: string | null
    phone: string | null
    adherenceDate: Date | null
    renovationDate: Date | null
    expireDate: Date | null
    clientType: $Enums.CustomerType | null
    affiliateCode: string | null
    planId: string | null
    cep: number | null
    address: string | null
    number: number | null
    complement: string | null
    district: string | null
    city: string | null
    state: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    externalId: string | null
    name: string | null
    document: string | null
    observation: string | null
    mainPaymentMethod: $Enums.PaymentType | null
    status: $Enums.CustomerStatus | null
    email: string | null
    phone: string | null
    adherenceDate: Date | null
    renovationDate: Date | null
    expireDate: Date | null
    clientType: $Enums.CustomerType | null
    affiliateCode: string | null
    planId: string | null
    cep: number | null
    address: string | null
    number: number | null
    complement: string | null
    district: string | null
    city: string | null
    state: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    userId: number
    externalId: number
    name: number
    document: number
    observation: number
    mainPaymentMethod: number
    status: number
    email: number
    phone: number
    adherenceDate: number
    renovationDate: number
    expireDate: number
    clientType: number
    affiliateCode: number
    planId: number
    cep: number
    address: number
    number: number
    complement: number
    district: number
    city: number
    state: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    cep?: true
    number?: true
  }

  export type CustomerSumAggregateInputType = {
    cep?: true
    number?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    userId?: true
    externalId?: true
    name?: true
    document?: true
    observation?: true
    mainPaymentMethod?: true
    status?: true
    email?: true
    phone?: true
    adherenceDate?: true
    renovationDate?: true
    expireDate?: true
    clientType?: true
    affiliateCode?: true
    planId?: true
    cep?: true
    address?: true
    number?: true
    complement?: true
    district?: true
    city?: true
    state?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    userId?: true
    externalId?: true
    name?: true
    document?: true
    observation?: true
    mainPaymentMethod?: true
    status?: true
    email?: true
    phone?: true
    adherenceDate?: true
    renovationDate?: true
    expireDate?: true
    clientType?: true
    affiliateCode?: true
    planId?: true
    cep?: true
    address?: true
    number?: true
    complement?: true
    district?: true
    city?: true
    state?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    userId?: true
    externalId?: true
    name?: true
    document?: true
    observation?: true
    mainPaymentMethod?: true
    status?: true
    email?: true
    phone?: true
    adherenceDate?: true
    renovationDate?: true
    expireDate?: true
    clientType?: true
    affiliateCode?: true
    planId?: true
    cep?: true
    address?: true
    number?: true
    complement?: true
    district?: true
    city?: true
    state?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    userId: string
    externalId: string | null
    name: string
    document: string
    observation: string | null
    mainPaymentMethod: $Enums.PaymentType
    status: $Enums.CustomerStatus
    email: string | null
    phone: string | null
    adherenceDate: Date
    renovationDate: Date | null
    expireDate: Date | null
    clientType: $Enums.CustomerType
    affiliateCode: string | null
    planId: string | null
    cep: number | null
    address: string | null
    number: number | null
    complement: string | null
    district: string | null
    city: string | null
    state: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    externalId?: boolean
    name?: boolean
    document?: boolean
    observation?: boolean
    mainPaymentMethod?: boolean
    status?: boolean
    email?: boolean
    phone?: boolean
    adherenceDate?: boolean
    renovationDate?: boolean
    expireDate?: boolean
    clientType?: boolean
    affiliateCode?: boolean
    planId?: boolean
    cep?: boolean
    address?: boolean
    number?: boolean
    complement?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    AffiliateCustomer?: boolean | Customer$AffiliateCustomerArgs<ExtArgs>
    CreditCard?: boolean | Customer$CreditCardArgs<ExtArgs>
    Affiliate?: boolean | Customer$AffiliateArgs<ExtArgs>
    Plan?: boolean | Customer$PlanArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    CustomerCard?: boolean | Customer$CustomerCardArgs<ExtArgs>
    CustomerPfData?: boolean | Customer$CustomerPfDataArgs<ExtArgs>
    CustomerPjData?: boolean | Customer$CustomerPjDataArgs<ExtArgs>
    Dependent?: boolean | Customer$DependentArgs<ExtArgs>
    Employee?: boolean | Customer$EmployeeArgs<ExtArgs>
    Subscription?: boolean | Customer$SubscriptionArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    externalId?: boolean
    name?: boolean
    document?: boolean
    observation?: boolean
    mainPaymentMethod?: boolean
    status?: boolean
    email?: boolean
    phone?: boolean
    adherenceDate?: boolean
    renovationDate?: boolean
    expireDate?: boolean
    clientType?: boolean
    affiliateCode?: boolean
    planId?: boolean
    cep?: boolean
    address?: boolean
    number?: boolean
    complement?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Affiliate?: boolean | Customer$AffiliateArgs<ExtArgs>
    Plan?: boolean | Customer$PlanArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    externalId?: boolean
    name?: boolean
    document?: boolean
    observation?: boolean
    mainPaymentMethod?: boolean
    status?: boolean
    email?: boolean
    phone?: boolean
    adherenceDate?: boolean
    renovationDate?: boolean
    expireDate?: boolean
    clientType?: boolean
    affiliateCode?: boolean
    planId?: boolean
    cep?: boolean
    address?: boolean
    number?: boolean
    complement?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Affiliate?: boolean | Customer$AffiliateArgs<ExtArgs>
    Plan?: boolean | Customer$PlanArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    userId?: boolean
    externalId?: boolean
    name?: boolean
    document?: boolean
    observation?: boolean
    mainPaymentMethod?: boolean
    status?: boolean
    email?: boolean
    phone?: boolean
    adherenceDate?: boolean
    renovationDate?: boolean
    expireDate?: boolean
    clientType?: boolean
    affiliateCode?: boolean
    planId?: boolean
    cep?: boolean
    address?: boolean
    number?: boolean
    complement?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "externalId" | "name" | "document" | "observation" | "mainPaymentMethod" | "status" | "email" | "phone" | "adherenceDate" | "renovationDate" | "expireDate" | "clientType" | "affiliateCode" | "planId" | "cep" | "address" | "number" | "complement" | "district" | "city" | "state" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    AffiliateCustomer?: boolean | Customer$AffiliateCustomerArgs<ExtArgs>
    CreditCard?: boolean | Customer$CreditCardArgs<ExtArgs>
    Affiliate?: boolean | Customer$AffiliateArgs<ExtArgs>
    Plan?: boolean | Customer$PlanArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    CustomerCard?: boolean | Customer$CustomerCardArgs<ExtArgs>
    CustomerPfData?: boolean | Customer$CustomerPfDataArgs<ExtArgs>
    CustomerPjData?: boolean | Customer$CustomerPjDataArgs<ExtArgs>
    Dependent?: boolean | Customer$DependentArgs<ExtArgs>
    Employee?: boolean | Customer$EmployeeArgs<ExtArgs>
    Subscription?: boolean | Customer$SubscriptionArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affiliate?: boolean | Customer$AffiliateArgs<ExtArgs>
    Plan?: boolean | Customer$PlanArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affiliate?: boolean | Customer$AffiliateArgs<ExtArgs>
    Plan?: boolean | Customer$PlanArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      AffiliateCustomer: Prisma.$AffiliateCustomerPayload<ExtArgs>[]
      CreditCard: Prisma.$CreditCardPayload<ExtArgs>[]
      Affiliate: Prisma.$AffiliatePayload<ExtArgs> | null
      Plan: Prisma.$PlanPayload<ExtArgs> | null
      User: Prisma.$UserPayload<ExtArgs>
      CustomerCard: Prisma.$CustomerCardPayload<ExtArgs> | null
      CustomerPfData: Prisma.$CustomerPfDataPayload<ExtArgs> | null
      CustomerPjData: Prisma.$CustomerPjDataPayload<ExtArgs> | null
      Dependent: Prisma.$DependentPayload<ExtArgs>[]
      Employee: Prisma.$EmployeePayload<ExtArgs>[]
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      externalId: string | null
      name: string
      document: string
      observation: string | null
      mainPaymentMethod: $Enums.PaymentType
      status: $Enums.CustomerStatus
      email: string | null
      phone: string | null
      adherenceDate: Date
      renovationDate: Date | null
      expireDate: Date | null
      clientType: $Enums.CustomerType
      affiliateCode: string | null
      planId: string | null
      cep: number | null
      address: string | null
      number: number | null
      complement: string | null
      district: string | null
      city: string | null
      state: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    AffiliateCustomer<T extends Customer$AffiliateCustomerArgs<ExtArgs> = {}>(args?: Subset<T, Customer$AffiliateCustomerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AffiliateCustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreditCard<T extends Customer$CreditCardArgs<ExtArgs> = {}>(args?: Subset<T, Customer$CreditCardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Affiliate<T extends Customer$AffiliateArgs<ExtArgs> = {}>(args?: Subset<T, Customer$AffiliateArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Plan<T extends Customer$PlanArgs<ExtArgs> = {}>(args?: Subset<T, Customer$PlanArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    CustomerCard<T extends Customer$CustomerCardArgs<ExtArgs> = {}>(args?: Subset<T, Customer$CustomerCardArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    CustomerPfData<T extends Customer$CustomerPfDataArgs<ExtArgs> = {}>(args?: Subset<T, Customer$CustomerPfDataArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    CustomerPjData<T extends Customer$CustomerPjDataArgs<ExtArgs> = {}>(args?: Subset<T, Customer$CustomerPjDataArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Dependent<T extends Customer$DependentArgs<ExtArgs> = {}>(args?: Subset<T, Customer$DependentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Employee<T extends Customer$EmployeeArgs<ExtArgs> = {}>(args?: Subset<T, Customer$EmployeeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Subscription<T extends Customer$SubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, Customer$SubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly userId: FieldRef<"Customer", 'String'>
    readonly externalId: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly document: FieldRef<"Customer", 'String'>
    readonly observation: FieldRef<"Customer", 'String'>
    readonly mainPaymentMethod: FieldRef<"Customer", 'PaymentType'>
    readonly status: FieldRef<"Customer", 'CustomerStatus'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly adherenceDate: FieldRef<"Customer", 'DateTime'>
    readonly renovationDate: FieldRef<"Customer", 'DateTime'>
    readonly expireDate: FieldRef<"Customer", 'DateTime'>
    readonly clientType: FieldRef<"Customer", 'CustomerType'>
    readonly affiliateCode: FieldRef<"Customer", 'String'>
    readonly planId: FieldRef<"Customer", 'String'>
    readonly cep: FieldRef<"Customer", 'Int'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly number: FieldRef<"Customer", 'Int'>
    readonly complement: FieldRef<"Customer", 'String'>
    readonly district: FieldRef<"Customer", 'String'>
    readonly city: FieldRef<"Customer", 'String'>
    readonly state: FieldRef<"Customer", 'String'>
    readonly isActive: FieldRef<"Customer", 'Boolean'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.AffiliateCustomer
   */
  export type Customer$AffiliateCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AffiliateCustomer
     */
    select?: AffiliateCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AffiliateCustomer
     */
    omit?: AffiliateCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateCustomerInclude<ExtArgs> | null
    where?: AffiliateCustomerWhereInput
    orderBy?: AffiliateCustomerOrderByWithRelationInput | AffiliateCustomerOrderByWithRelationInput[]
    cursor?: AffiliateCustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AffiliateCustomerScalarFieldEnum | AffiliateCustomerScalarFieldEnum[]
  }

  /**
   * Customer.CreditCard
   */
  export type Customer$CreditCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditCard
     */
    select?: CreditCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CreditCard
     */
    omit?: CreditCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditCardInclude<ExtArgs> | null
    where?: CreditCardWhereInput
    orderBy?: CreditCardOrderByWithRelationInput | CreditCardOrderByWithRelationInput[]
    cursor?: CreditCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CreditCardScalarFieldEnum | CreditCardScalarFieldEnum[]
  }

  /**
   * Customer.Affiliate
   */
  export type Customer$AffiliateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    where?: AffiliateWhereInput
  }

  /**
   * Customer.Plan
   */
  export type Customer$PlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
  }

  /**
   * Customer.CustomerCard
   */
  export type Customer$CustomerCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    where?: CustomerCardWhereInput
  }

  /**
   * Customer.CustomerPfData
   */
  export type Customer$CustomerPfDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    where?: CustomerPfDataWhereInput
  }

  /**
   * Customer.CustomerPjData
   */
  export type Customer$CustomerPjDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    where?: CustomerPjDataWhereInput
  }

  /**
   * Customer.Dependent
   */
  export type Customer$DependentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    where?: DependentWhereInput
    orderBy?: DependentOrderByWithRelationInput | DependentOrderByWithRelationInput[]
    cursor?: DependentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DependentScalarFieldEnum | DependentScalarFieldEnum[]
  }

  /**
   * Customer.Employee
   */
  export type Customer$EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    cursor?: EmployeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Customer.Subscription
   */
  export type Customer$SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model CustomerCard
   */

  export type AggregateCustomerCard = {
    _count: CustomerCardCountAggregateOutputType | null
    _min: CustomerCardMinAggregateOutputType | null
    _max: CustomerCardMaxAggregateOutputType | null
  }

  export type CustomerCardMinAggregateOutputType = {
    id: string | null
    cardNumber: string | null
    expireDate: Date | null
    customerId: string | null
    dependentId: string | null
    employeeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCardMaxAggregateOutputType = {
    id: string | null
    cardNumber: string | null
    expireDate: Date | null
    customerId: string | null
    dependentId: string | null
    employeeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCardCountAggregateOutputType = {
    id: number
    cardNumber: number
    expireDate: number
    customerId: number
    dependentId: number
    employeeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerCardMinAggregateInputType = {
    id?: true
    cardNumber?: true
    expireDate?: true
    customerId?: true
    dependentId?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCardMaxAggregateInputType = {
    id?: true
    cardNumber?: true
    expireDate?: true
    customerId?: true
    dependentId?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCardCountAggregateInputType = {
    id?: true
    cardNumber?: true
    expireDate?: true
    customerId?: true
    dependentId?: true
    employeeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerCardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerCard to aggregate.
     */
    where?: CustomerCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCards to fetch.
     */
    orderBy?: CustomerCardOrderByWithRelationInput | CustomerCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerCards
    **/
    _count?: true | CustomerCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerCardMaxAggregateInputType
  }

  export type GetCustomerCardAggregateType<T extends CustomerCardAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerCard[P]>
      : GetScalarType<T[P], AggregateCustomerCard[P]>
  }




  export type CustomerCardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerCardWhereInput
    orderBy?: CustomerCardOrderByWithAggregationInput | CustomerCardOrderByWithAggregationInput[]
    by: CustomerCardScalarFieldEnum[] | CustomerCardScalarFieldEnum
    having?: CustomerCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCardCountAggregateInputType | true
    _min?: CustomerCardMinAggregateInputType
    _max?: CustomerCardMaxAggregateInputType
  }

  export type CustomerCardGroupByOutputType = {
    id: string
    cardNumber: string
    expireDate: Date
    customerId: string | null
    dependentId: string | null
    employeeId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerCardCountAggregateOutputType | null
    _min: CustomerCardMinAggregateOutputType | null
    _max: CustomerCardMaxAggregateOutputType | null
  }

  type GetCustomerCardGroupByPayload<T extends CustomerCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerCardGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerCardGroupByOutputType[P]>
        }
      >
    >


  export type CustomerCardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardNumber?: boolean
    expireDate?: boolean
    customerId?: boolean
    dependentId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerCard$CustomerArgs<ExtArgs>
    Dependent?: boolean | CustomerCard$DependentArgs<ExtArgs>
    Employee?: boolean | CustomerCard$EmployeeArgs<ExtArgs>
  }, ExtArgs["result"]["customerCard"]>

  export type CustomerCardSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardNumber?: boolean
    expireDate?: boolean
    customerId?: boolean
    dependentId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerCard$CustomerArgs<ExtArgs>
    Dependent?: boolean | CustomerCard$DependentArgs<ExtArgs>
    Employee?: boolean | CustomerCard$EmployeeArgs<ExtArgs>
  }, ExtArgs["result"]["customerCard"]>

  export type CustomerCardSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cardNumber?: boolean
    expireDate?: boolean
    customerId?: boolean
    dependentId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerCard$CustomerArgs<ExtArgs>
    Dependent?: boolean | CustomerCard$DependentArgs<ExtArgs>
    Employee?: boolean | CustomerCard$EmployeeArgs<ExtArgs>
  }, ExtArgs["result"]["customerCard"]>

  export type CustomerCardSelectScalar = {
    id?: boolean
    cardNumber?: boolean
    expireDate?: boolean
    customerId?: boolean
    dependentId?: boolean
    employeeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerCardOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cardNumber" | "expireDate" | "customerId" | "dependentId" | "employeeId" | "createdAt" | "updatedAt", ExtArgs["result"]["customerCard"]>
  export type CustomerCardInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerCard$CustomerArgs<ExtArgs>
    Dependent?: boolean | CustomerCard$DependentArgs<ExtArgs>
    Employee?: boolean | CustomerCard$EmployeeArgs<ExtArgs>
  }
  export type CustomerCardIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerCard$CustomerArgs<ExtArgs>
    Dependent?: boolean | CustomerCard$DependentArgs<ExtArgs>
    Employee?: boolean | CustomerCard$EmployeeArgs<ExtArgs>
  }
  export type CustomerCardIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerCard$CustomerArgs<ExtArgs>
    Dependent?: boolean | CustomerCard$DependentArgs<ExtArgs>
    Employee?: boolean | CustomerCard$EmployeeArgs<ExtArgs>
  }

  export type $CustomerCardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerCard"
    objects: {
      Customer: Prisma.$CustomerPayload<ExtArgs> | null
      Dependent: Prisma.$DependentPayload<ExtArgs> | null
      Employee: Prisma.$EmployeePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cardNumber: string
      expireDate: Date
      customerId: string | null
      dependentId: string | null
      employeeId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerCard"]>
    composites: {}
  }

  type CustomerCardGetPayload<S extends boolean | null | undefined | CustomerCardDefaultArgs> = $Result.GetResult<Prisma.$CustomerCardPayload, S>

  type CustomerCardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerCardFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCardCountAggregateInputType | true
    }

  export interface CustomerCardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerCard'], meta: { name: 'CustomerCard' } }
    /**
     * Find zero or one CustomerCard that matches the filter.
     * @param {CustomerCardFindUniqueArgs} args - Arguments to find a CustomerCard
     * @example
     * // Get one CustomerCard
     * const customerCard = await prisma.customerCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerCardFindUniqueArgs>(args: SelectSubset<T, CustomerCardFindUniqueArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerCard that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerCardFindUniqueOrThrowArgs} args - Arguments to find a CustomerCard
     * @example
     * // Get one CustomerCard
     * const customerCard = await prisma.customerCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerCardFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerCardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardFindFirstArgs} args - Arguments to find a CustomerCard
     * @example
     * // Get one CustomerCard
     * const customerCard = await prisma.customerCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerCardFindFirstArgs>(args?: SelectSubset<T, CustomerCardFindFirstArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardFindFirstOrThrowArgs} args - Arguments to find a CustomerCard
     * @example
     * // Get one CustomerCard
     * const customerCard = await prisma.customerCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerCardFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerCardFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerCards
     * const customerCards = await prisma.customerCard.findMany()
     * 
     * // Get first 10 CustomerCards
     * const customerCards = await prisma.customerCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerCardWithIdOnly = await prisma.customerCard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerCardFindManyArgs>(args?: SelectSubset<T, CustomerCardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerCard.
     * @param {CustomerCardCreateArgs} args - Arguments to create a CustomerCard.
     * @example
     * // Create one CustomerCard
     * const CustomerCard = await prisma.customerCard.create({
     *   data: {
     *     // ... data to create a CustomerCard
     *   }
     * })
     * 
     */
    create<T extends CustomerCardCreateArgs>(args: SelectSubset<T, CustomerCardCreateArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerCards.
     * @param {CustomerCardCreateManyArgs} args - Arguments to create many CustomerCards.
     * @example
     * // Create many CustomerCards
     * const customerCard = await prisma.customerCard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCardCreateManyArgs>(args?: SelectSubset<T, CustomerCardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerCards and returns the data saved in the database.
     * @param {CustomerCardCreateManyAndReturnArgs} args - Arguments to create many CustomerCards.
     * @example
     * // Create many CustomerCards
     * const customerCard = await prisma.customerCard.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerCards and only return the `id`
     * const customerCardWithIdOnly = await prisma.customerCard.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCardCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCardCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerCard.
     * @param {CustomerCardDeleteArgs} args - Arguments to delete one CustomerCard.
     * @example
     * // Delete one CustomerCard
     * const CustomerCard = await prisma.customerCard.delete({
     *   where: {
     *     // ... filter to delete one CustomerCard
     *   }
     * })
     * 
     */
    delete<T extends CustomerCardDeleteArgs>(args: SelectSubset<T, CustomerCardDeleteArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerCard.
     * @param {CustomerCardUpdateArgs} args - Arguments to update one CustomerCard.
     * @example
     * // Update one CustomerCard
     * const customerCard = await prisma.customerCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerCardUpdateArgs>(args: SelectSubset<T, CustomerCardUpdateArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerCards.
     * @param {CustomerCardDeleteManyArgs} args - Arguments to filter CustomerCards to delete.
     * @example
     * // Delete a few CustomerCards
     * const { count } = await prisma.customerCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerCardDeleteManyArgs>(args?: SelectSubset<T, CustomerCardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerCards
     * const customerCard = await prisma.customerCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerCardUpdateManyArgs>(args: SelectSubset<T, CustomerCardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerCards and returns the data updated in the database.
     * @param {CustomerCardUpdateManyAndReturnArgs} args - Arguments to update many CustomerCards.
     * @example
     * // Update many CustomerCards
     * const customerCard = await prisma.customerCard.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerCards and only return the `id`
     * const customerCardWithIdOnly = await prisma.customerCard.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerCardUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerCardUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerCard.
     * @param {CustomerCardUpsertArgs} args - Arguments to update or create a CustomerCard.
     * @example
     * // Update or create a CustomerCard
     * const customerCard = await prisma.customerCard.upsert({
     *   create: {
     *     // ... data to create a CustomerCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerCard we want to update
     *   }
     * })
     */
    upsert<T extends CustomerCardUpsertArgs>(args: SelectSubset<T, CustomerCardUpsertArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardCountArgs} args - Arguments to filter CustomerCards to count.
     * @example
     * // Count the number of CustomerCards
     * const count = await prisma.customerCard.count({
     *   where: {
     *     // ... the filter for the CustomerCards we want to count
     *   }
     * })
    **/
    count<T extends CustomerCardCountArgs>(
      args?: Subset<T, CustomerCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerCardAggregateArgs>(args: Subset<T, CustomerCardAggregateArgs>): Prisma.PrismaPromise<GetCustomerCardAggregateType<T>>

    /**
     * Group by CustomerCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerCardGroupByArgs['orderBy'] }
        : { orderBy?: CustomerCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerCard model
   */
  readonly fields: CustomerCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerCardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Customer<T extends CustomerCard$CustomerArgs<ExtArgs> = {}>(args?: Subset<T, CustomerCard$CustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Dependent<T extends CustomerCard$DependentArgs<ExtArgs> = {}>(args?: Subset<T, CustomerCard$DependentArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Employee<T extends CustomerCard$EmployeeArgs<ExtArgs> = {}>(args?: Subset<T, CustomerCard$EmployeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerCard model
   */
  interface CustomerCardFieldRefs {
    readonly id: FieldRef<"CustomerCard", 'String'>
    readonly cardNumber: FieldRef<"CustomerCard", 'String'>
    readonly expireDate: FieldRef<"CustomerCard", 'DateTime'>
    readonly customerId: FieldRef<"CustomerCard", 'String'>
    readonly dependentId: FieldRef<"CustomerCard", 'String'>
    readonly employeeId: FieldRef<"CustomerCard", 'String'>
    readonly createdAt: FieldRef<"CustomerCard", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerCard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerCard findUnique
   */
  export type CustomerCardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCard to fetch.
     */
    where: CustomerCardWhereUniqueInput
  }

  /**
   * CustomerCard findUniqueOrThrow
   */
  export type CustomerCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCard to fetch.
     */
    where: CustomerCardWhereUniqueInput
  }

  /**
   * CustomerCard findFirst
   */
  export type CustomerCardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCard to fetch.
     */
    where?: CustomerCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCards to fetch.
     */
    orderBy?: CustomerCardOrderByWithRelationInput | CustomerCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerCards.
     */
    cursor?: CustomerCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerCards.
     */
    distinct?: CustomerCardScalarFieldEnum | CustomerCardScalarFieldEnum[]
  }

  /**
   * CustomerCard findFirstOrThrow
   */
  export type CustomerCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCard to fetch.
     */
    where?: CustomerCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCards to fetch.
     */
    orderBy?: CustomerCardOrderByWithRelationInput | CustomerCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerCards.
     */
    cursor?: CustomerCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerCards.
     */
    distinct?: CustomerCardScalarFieldEnum | CustomerCardScalarFieldEnum[]
  }

  /**
   * CustomerCard findMany
   */
  export type CustomerCardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * Filter, which CustomerCards to fetch.
     */
    where?: CustomerCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerCards to fetch.
     */
    orderBy?: CustomerCardOrderByWithRelationInput | CustomerCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerCards.
     */
    cursor?: CustomerCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerCards.
     */
    skip?: number
    distinct?: CustomerCardScalarFieldEnum | CustomerCardScalarFieldEnum[]
  }

  /**
   * CustomerCard create
   */
  export type CustomerCardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerCard.
     */
    data: XOR<CustomerCardCreateInput, CustomerCardUncheckedCreateInput>
  }

  /**
   * CustomerCard createMany
   */
  export type CustomerCardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerCards.
     */
    data: CustomerCardCreateManyInput | CustomerCardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerCard createManyAndReturn
   */
  export type CustomerCardCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerCards.
     */
    data: CustomerCardCreateManyInput | CustomerCardCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerCard update
   */
  export type CustomerCardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerCard.
     */
    data: XOR<CustomerCardUpdateInput, CustomerCardUncheckedUpdateInput>
    /**
     * Choose, which CustomerCard to update.
     */
    where: CustomerCardWhereUniqueInput
  }

  /**
   * CustomerCard updateMany
   */
  export type CustomerCardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerCards.
     */
    data: XOR<CustomerCardUpdateManyMutationInput, CustomerCardUncheckedUpdateManyInput>
    /**
     * Filter which CustomerCards to update
     */
    where?: CustomerCardWhereInput
    /**
     * Limit how many CustomerCards to update.
     */
    limit?: number
  }

  /**
   * CustomerCard updateManyAndReturn
   */
  export type CustomerCardUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * The data used to update CustomerCards.
     */
    data: XOR<CustomerCardUpdateManyMutationInput, CustomerCardUncheckedUpdateManyInput>
    /**
     * Filter which CustomerCards to update
     */
    where?: CustomerCardWhereInput
    /**
     * Limit how many CustomerCards to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerCard upsert
   */
  export type CustomerCardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerCard to update in case it exists.
     */
    where: CustomerCardWhereUniqueInput
    /**
     * In case the CustomerCard found by the `where` argument doesn't exist, create a new CustomerCard with this data.
     */
    create: XOR<CustomerCardCreateInput, CustomerCardUncheckedCreateInput>
    /**
     * In case the CustomerCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerCardUpdateInput, CustomerCardUncheckedUpdateInput>
  }

  /**
   * CustomerCard delete
   */
  export type CustomerCardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    /**
     * Filter which CustomerCard to delete.
     */
    where: CustomerCardWhereUniqueInput
  }

  /**
   * CustomerCard deleteMany
   */
  export type CustomerCardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerCards to delete
     */
    where?: CustomerCardWhereInput
    /**
     * Limit how many CustomerCards to delete.
     */
    limit?: number
  }

  /**
   * CustomerCard.Customer
   */
  export type CustomerCard$CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * CustomerCard.Dependent
   */
  export type CustomerCard$DependentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    where?: DependentWhereInput
  }

  /**
   * CustomerCard.Employee
   */
  export type CustomerCard$EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * CustomerCard without action
   */
  export type CustomerCardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
  }


  /**
   * Model CustomerPfData
   */

  export type AggregateCustomerPfData = {
    _count: CustomerPfDataCountAggregateOutputType | null
    _min: CustomerPfDataMinAggregateOutputType | null
    _max: CustomerPfDataMaxAggregateOutputType | null
  }

  export type CustomerPfDataMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    birthDate: Date | null
    rg: string | null
    cpf: string | null
    sex: string | null
    civilState: string | null
    job: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerPfDataMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    birthDate: Date | null
    rg: string | null
    cpf: string | null
    sex: string | null
    civilState: string | null
    job: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerPfDataCountAggregateOutputType = {
    id: number
    customerId: number
    birthDate: number
    rg: number
    cpf: number
    sex: number
    civilState: number
    job: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerPfDataMinAggregateInputType = {
    id?: true
    customerId?: true
    birthDate?: true
    rg?: true
    cpf?: true
    sex?: true
    civilState?: true
    job?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerPfDataMaxAggregateInputType = {
    id?: true
    customerId?: true
    birthDate?: true
    rg?: true
    cpf?: true
    sex?: true
    civilState?: true
    job?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerPfDataCountAggregateInputType = {
    id?: true
    customerId?: true
    birthDate?: true
    rg?: true
    cpf?: true
    sex?: true
    civilState?: true
    job?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerPfDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerPfData to aggregate.
     */
    where?: CustomerPfDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPfData to fetch.
     */
    orderBy?: CustomerPfDataOrderByWithRelationInput | CustomerPfDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerPfDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPfData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPfData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerPfData
    **/
    _count?: true | CustomerPfDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerPfDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerPfDataMaxAggregateInputType
  }

  export type GetCustomerPfDataAggregateType<T extends CustomerPfDataAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerPfData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerPfData[P]>
      : GetScalarType<T[P], AggregateCustomerPfData[P]>
  }




  export type CustomerPfDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerPfDataWhereInput
    orderBy?: CustomerPfDataOrderByWithAggregationInput | CustomerPfDataOrderByWithAggregationInput[]
    by: CustomerPfDataScalarFieldEnum[] | CustomerPfDataScalarFieldEnum
    having?: CustomerPfDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerPfDataCountAggregateInputType | true
    _min?: CustomerPfDataMinAggregateInputType
    _max?: CustomerPfDataMaxAggregateInputType
  }

  export type CustomerPfDataGroupByOutputType = {
    id: string
    customerId: string
    birthDate: Date
    rg: string | null
    cpf: string
    sex: string | null
    civilState: string | null
    job: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerPfDataCountAggregateOutputType | null
    _min: CustomerPfDataMinAggregateOutputType | null
    _max: CustomerPfDataMaxAggregateOutputType | null
  }

  type GetCustomerPfDataGroupByPayload<T extends CustomerPfDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerPfDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerPfDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerPfDataGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerPfDataGroupByOutputType[P]>
        }
      >
    >


  export type CustomerPfDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    birthDate?: boolean
    rg?: boolean
    cpf?: boolean
    sex?: boolean
    civilState?: boolean
    job?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPfData"]>

  export type CustomerPfDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    birthDate?: boolean
    rg?: boolean
    cpf?: boolean
    sex?: boolean
    civilState?: boolean
    job?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPfData"]>

  export type CustomerPfDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    birthDate?: boolean
    rg?: boolean
    cpf?: boolean
    sex?: boolean
    civilState?: boolean
    job?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPfData"]>

  export type CustomerPfDataSelectScalar = {
    id?: boolean
    customerId?: boolean
    birthDate?: boolean
    rg?: boolean
    cpf?: boolean
    sex?: boolean
    civilState?: boolean
    job?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerPfDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "birthDate" | "rg" | "cpf" | "sex" | "civilState" | "job" | "createdAt" | "updatedAt", ExtArgs["result"]["customerPfData"]>
  export type CustomerPfDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerPfDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerPfDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CustomerPfDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerPfData"
    objects: {
      Customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      birthDate: Date
      rg: string | null
      cpf: string
      sex: string | null
      civilState: string | null
      job: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerPfData"]>
    composites: {}
  }

  type CustomerPfDataGetPayload<S extends boolean | null | undefined | CustomerPfDataDefaultArgs> = $Result.GetResult<Prisma.$CustomerPfDataPayload, S>

  type CustomerPfDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerPfDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerPfDataCountAggregateInputType | true
    }

  export interface CustomerPfDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerPfData'], meta: { name: 'CustomerPfData' } }
    /**
     * Find zero or one CustomerPfData that matches the filter.
     * @param {CustomerPfDataFindUniqueArgs} args - Arguments to find a CustomerPfData
     * @example
     * // Get one CustomerPfData
     * const customerPfData = await prisma.customerPfData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerPfDataFindUniqueArgs>(args: SelectSubset<T, CustomerPfDataFindUniqueArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerPfData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerPfDataFindUniqueOrThrowArgs} args - Arguments to find a CustomerPfData
     * @example
     * // Get one CustomerPfData
     * const customerPfData = await prisma.customerPfData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerPfDataFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerPfDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerPfData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataFindFirstArgs} args - Arguments to find a CustomerPfData
     * @example
     * // Get one CustomerPfData
     * const customerPfData = await prisma.customerPfData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerPfDataFindFirstArgs>(args?: SelectSubset<T, CustomerPfDataFindFirstArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerPfData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataFindFirstOrThrowArgs} args - Arguments to find a CustomerPfData
     * @example
     * // Get one CustomerPfData
     * const customerPfData = await prisma.customerPfData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerPfDataFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerPfDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerPfData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerPfData
     * const customerPfData = await prisma.customerPfData.findMany()
     * 
     * // Get first 10 CustomerPfData
     * const customerPfData = await prisma.customerPfData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerPfDataWithIdOnly = await prisma.customerPfData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerPfDataFindManyArgs>(args?: SelectSubset<T, CustomerPfDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerPfData.
     * @param {CustomerPfDataCreateArgs} args - Arguments to create a CustomerPfData.
     * @example
     * // Create one CustomerPfData
     * const CustomerPfData = await prisma.customerPfData.create({
     *   data: {
     *     // ... data to create a CustomerPfData
     *   }
     * })
     * 
     */
    create<T extends CustomerPfDataCreateArgs>(args: SelectSubset<T, CustomerPfDataCreateArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerPfData.
     * @param {CustomerPfDataCreateManyArgs} args - Arguments to create many CustomerPfData.
     * @example
     * // Create many CustomerPfData
     * const customerPfData = await prisma.customerPfData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerPfDataCreateManyArgs>(args?: SelectSubset<T, CustomerPfDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerPfData and returns the data saved in the database.
     * @param {CustomerPfDataCreateManyAndReturnArgs} args - Arguments to create many CustomerPfData.
     * @example
     * // Create many CustomerPfData
     * const customerPfData = await prisma.customerPfData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerPfData and only return the `id`
     * const customerPfDataWithIdOnly = await prisma.customerPfData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerPfDataCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerPfDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerPfData.
     * @param {CustomerPfDataDeleteArgs} args - Arguments to delete one CustomerPfData.
     * @example
     * // Delete one CustomerPfData
     * const CustomerPfData = await prisma.customerPfData.delete({
     *   where: {
     *     // ... filter to delete one CustomerPfData
     *   }
     * })
     * 
     */
    delete<T extends CustomerPfDataDeleteArgs>(args: SelectSubset<T, CustomerPfDataDeleteArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerPfData.
     * @param {CustomerPfDataUpdateArgs} args - Arguments to update one CustomerPfData.
     * @example
     * // Update one CustomerPfData
     * const customerPfData = await prisma.customerPfData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerPfDataUpdateArgs>(args: SelectSubset<T, CustomerPfDataUpdateArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerPfData.
     * @param {CustomerPfDataDeleteManyArgs} args - Arguments to filter CustomerPfData to delete.
     * @example
     * // Delete a few CustomerPfData
     * const { count } = await prisma.customerPfData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerPfDataDeleteManyArgs>(args?: SelectSubset<T, CustomerPfDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPfData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerPfData
     * const customerPfData = await prisma.customerPfData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerPfDataUpdateManyArgs>(args: SelectSubset<T, CustomerPfDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPfData and returns the data updated in the database.
     * @param {CustomerPfDataUpdateManyAndReturnArgs} args - Arguments to update many CustomerPfData.
     * @example
     * // Update many CustomerPfData
     * const customerPfData = await prisma.customerPfData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerPfData and only return the `id`
     * const customerPfDataWithIdOnly = await prisma.customerPfData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerPfDataUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerPfDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerPfData.
     * @param {CustomerPfDataUpsertArgs} args - Arguments to update or create a CustomerPfData.
     * @example
     * // Update or create a CustomerPfData
     * const customerPfData = await prisma.customerPfData.upsert({
     *   create: {
     *     // ... data to create a CustomerPfData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerPfData we want to update
     *   }
     * })
     */
    upsert<T extends CustomerPfDataUpsertArgs>(args: SelectSubset<T, CustomerPfDataUpsertArgs<ExtArgs>>): Prisma__CustomerPfDataClient<$Result.GetResult<Prisma.$CustomerPfDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerPfData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataCountArgs} args - Arguments to filter CustomerPfData to count.
     * @example
     * // Count the number of CustomerPfData
     * const count = await prisma.customerPfData.count({
     *   where: {
     *     // ... the filter for the CustomerPfData we want to count
     *   }
     * })
    **/
    count<T extends CustomerPfDataCountArgs>(
      args?: Subset<T, CustomerPfDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerPfDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerPfData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerPfDataAggregateArgs>(args: Subset<T, CustomerPfDataAggregateArgs>): Prisma.PrismaPromise<GetCustomerPfDataAggregateType<T>>

    /**
     * Group by CustomerPfData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPfDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerPfDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerPfDataGroupByArgs['orderBy'] }
        : { orderBy?: CustomerPfDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerPfDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerPfDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerPfData model
   */
  readonly fields: CustomerPfDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerPfData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerPfDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerPfData model
   */
  interface CustomerPfDataFieldRefs {
    readonly id: FieldRef<"CustomerPfData", 'String'>
    readonly customerId: FieldRef<"CustomerPfData", 'String'>
    readonly birthDate: FieldRef<"CustomerPfData", 'DateTime'>
    readonly rg: FieldRef<"CustomerPfData", 'String'>
    readonly cpf: FieldRef<"CustomerPfData", 'String'>
    readonly sex: FieldRef<"CustomerPfData", 'String'>
    readonly civilState: FieldRef<"CustomerPfData", 'String'>
    readonly job: FieldRef<"CustomerPfData", 'String'>
    readonly createdAt: FieldRef<"CustomerPfData", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerPfData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerPfData findUnique
   */
  export type CustomerPfDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPfData to fetch.
     */
    where: CustomerPfDataWhereUniqueInput
  }

  /**
   * CustomerPfData findUniqueOrThrow
   */
  export type CustomerPfDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPfData to fetch.
     */
    where: CustomerPfDataWhereUniqueInput
  }

  /**
   * CustomerPfData findFirst
   */
  export type CustomerPfDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPfData to fetch.
     */
    where?: CustomerPfDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPfData to fetch.
     */
    orderBy?: CustomerPfDataOrderByWithRelationInput | CustomerPfDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerPfData.
     */
    cursor?: CustomerPfDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPfData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPfData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerPfData.
     */
    distinct?: CustomerPfDataScalarFieldEnum | CustomerPfDataScalarFieldEnum[]
  }

  /**
   * CustomerPfData findFirstOrThrow
   */
  export type CustomerPfDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPfData to fetch.
     */
    where?: CustomerPfDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPfData to fetch.
     */
    orderBy?: CustomerPfDataOrderByWithRelationInput | CustomerPfDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerPfData.
     */
    cursor?: CustomerPfDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPfData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPfData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerPfData.
     */
    distinct?: CustomerPfDataScalarFieldEnum | CustomerPfDataScalarFieldEnum[]
  }

  /**
   * CustomerPfData findMany
   */
  export type CustomerPfDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPfData to fetch.
     */
    where?: CustomerPfDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPfData to fetch.
     */
    orderBy?: CustomerPfDataOrderByWithRelationInput | CustomerPfDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerPfData.
     */
    cursor?: CustomerPfDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPfData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPfData.
     */
    skip?: number
    distinct?: CustomerPfDataScalarFieldEnum | CustomerPfDataScalarFieldEnum[]
  }

  /**
   * CustomerPfData create
   */
  export type CustomerPfDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerPfData.
     */
    data: XOR<CustomerPfDataCreateInput, CustomerPfDataUncheckedCreateInput>
  }

  /**
   * CustomerPfData createMany
   */
  export type CustomerPfDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerPfData.
     */
    data: CustomerPfDataCreateManyInput | CustomerPfDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerPfData createManyAndReturn
   */
  export type CustomerPfDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerPfData.
     */
    data: CustomerPfDataCreateManyInput | CustomerPfDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerPfData update
   */
  export type CustomerPfDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerPfData.
     */
    data: XOR<CustomerPfDataUpdateInput, CustomerPfDataUncheckedUpdateInput>
    /**
     * Choose, which CustomerPfData to update.
     */
    where: CustomerPfDataWhereUniqueInput
  }

  /**
   * CustomerPfData updateMany
   */
  export type CustomerPfDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerPfData.
     */
    data: XOR<CustomerPfDataUpdateManyMutationInput, CustomerPfDataUncheckedUpdateManyInput>
    /**
     * Filter which CustomerPfData to update
     */
    where?: CustomerPfDataWhereInput
    /**
     * Limit how many CustomerPfData to update.
     */
    limit?: number
  }

  /**
   * CustomerPfData updateManyAndReturn
   */
  export type CustomerPfDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * The data used to update CustomerPfData.
     */
    data: XOR<CustomerPfDataUpdateManyMutationInput, CustomerPfDataUncheckedUpdateManyInput>
    /**
     * Filter which CustomerPfData to update
     */
    where?: CustomerPfDataWhereInput
    /**
     * Limit how many CustomerPfData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerPfData upsert
   */
  export type CustomerPfDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerPfData to update in case it exists.
     */
    where: CustomerPfDataWhereUniqueInput
    /**
     * In case the CustomerPfData found by the `where` argument doesn't exist, create a new CustomerPfData with this data.
     */
    create: XOR<CustomerPfDataCreateInput, CustomerPfDataUncheckedCreateInput>
    /**
     * In case the CustomerPfData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerPfDataUpdateInput, CustomerPfDataUncheckedUpdateInput>
  }

  /**
   * CustomerPfData delete
   */
  export type CustomerPfDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
    /**
     * Filter which CustomerPfData to delete.
     */
    where: CustomerPfDataWhereUniqueInput
  }

  /**
   * CustomerPfData deleteMany
   */
  export type CustomerPfDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerPfData to delete
     */
    where?: CustomerPfDataWhereInput
    /**
     * Limit how many CustomerPfData to delete.
     */
    limit?: number
  }

  /**
   * CustomerPfData without action
   */
  export type CustomerPfDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPfData
     */
    select?: CustomerPfDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPfData
     */
    omit?: CustomerPfDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPfDataInclude<ExtArgs> | null
  }


  /**
   * Model CustomerPjData
   */

  export type AggregateCustomerPjData = {
    _count: CustomerPjDataCountAggregateOutputType | null
    _min: CustomerPjDataMinAggregateOutputType | null
    _max: CustomerPjDataMaxAggregateOutputType | null
  }

  export type CustomerPjDataMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    representative: string | null
    cnpj: string | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerPjDataMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    representative: string | null
    cnpj: string | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerPjDataCountAggregateOutputType = {
    id: number
    customerId: number
    representative: number
    cnpj: number
    cpf: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerPjDataMinAggregateInputType = {
    id?: true
    customerId?: true
    representative?: true
    cnpj?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerPjDataMaxAggregateInputType = {
    id?: true
    customerId?: true
    representative?: true
    cnpj?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerPjDataCountAggregateInputType = {
    id?: true
    customerId?: true
    representative?: true
    cnpj?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerPjDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerPjData to aggregate.
     */
    where?: CustomerPjDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPjData to fetch.
     */
    orderBy?: CustomerPjDataOrderByWithRelationInput | CustomerPjDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerPjDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPjData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPjData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerPjData
    **/
    _count?: true | CustomerPjDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerPjDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerPjDataMaxAggregateInputType
  }

  export type GetCustomerPjDataAggregateType<T extends CustomerPjDataAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerPjData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerPjData[P]>
      : GetScalarType<T[P], AggregateCustomerPjData[P]>
  }




  export type CustomerPjDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerPjDataWhereInput
    orderBy?: CustomerPjDataOrderByWithAggregationInput | CustomerPjDataOrderByWithAggregationInput[]
    by: CustomerPjDataScalarFieldEnum[] | CustomerPjDataScalarFieldEnum
    having?: CustomerPjDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerPjDataCountAggregateInputType | true
    _min?: CustomerPjDataMinAggregateInputType
    _max?: CustomerPjDataMaxAggregateInputType
  }

  export type CustomerPjDataGroupByOutputType = {
    id: string
    customerId: string
    representative: string | null
    cnpj: string
    cpf: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerPjDataCountAggregateOutputType | null
    _min: CustomerPjDataMinAggregateOutputType | null
    _max: CustomerPjDataMaxAggregateOutputType | null
  }

  type GetCustomerPjDataGroupByPayload<T extends CustomerPjDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerPjDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerPjDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerPjDataGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerPjDataGroupByOutputType[P]>
        }
      >
    >


  export type CustomerPjDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    representative?: boolean
    cnpj?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPjData"]>

  export type CustomerPjDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    representative?: boolean
    cnpj?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPjData"]>

  export type CustomerPjDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    representative?: boolean
    cnpj?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerPjData"]>

  export type CustomerPjDataSelectScalar = {
    id?: boolean
    customerId?: boolean
    representative?: boolean
    cnpj?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerPjDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "representative" | "cnpj" | "cpf" | "createdAt" | "updatedAt", ExtArgs["result"]["customerPjData"]>
  export type CustomerPjDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerPjDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerPjDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CustomerPjDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerPjData"
    objects: {
      Customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      representative: string | null
      cnpj: string
      cpf: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerPjData"]>
    composites: {}
  }

  type CustomerPjDataGetPayload<S extends boolean | null | undefined | CustomerPjDataDefaultArgs> = $Result.GetResult<Prisma.$CustomerPjDataPayload, S>

  type CustomerPjDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerPjDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerPjDataCountAggregateInputType | true
    }

  export interface CustomerPjDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerPjData'], meta: { name: 'CustomerPjData' } }
    /**
     * Find zero or one CustomerPjData that matches the filter.
     * @param {CustomerPjDataFindUniqueArgs} args - Arguments to find a CustomerPjData
     * @example
     * // Get one CustomerPjData
     * const customerPjData = await prisma.customerPjData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerPjDataFindUniqueArgs>(args: SelectSubset<T, CustomerPjDataFindUniqueArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerPjData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerPjDataFindUniqueOrThrowArgs} args - Arguments to find a CustomerPjData
     * @example
     * // Get one CustomerPjData
     * const customerPjData = await prisma.customerPjData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerPjDataFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerPjDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerPjData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataFindFirstArgs} args - Arguments to find a CustomerPjData
     * @example
     * // Get one CustomerPjData
     * const customerPjData = await prisma.customerPjData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerPjDataFindFirstArgs>(args?: SelectSubset<T, CustomerPjDataFindFirstArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerPjData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataFindFirstOrThrowArgs} args - Arguments to find a CustomerPjData
     * @example
     * // Get one CustomerPjData
     * const customerPjData = await prisma.customerPjData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerPjDataFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerPjDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerPjData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerPjData
     * const customerPjData = await prisma.customerPjData.findMany()
     * 
     * // Get first 10 CustomerPjData
     * const customerPjData = await prisma.customerPjData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerPjDataWithIdOnly = await prisma.customerPjData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerPjDataFindManyArgs>(args?: SelectSubset<T, CustomerPjDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerPjData.
     * @param {CustomerPjDataCreateArgs} args - Arguments to create a CustomerPjData.
     * @example
     * // Create one CustomerPjData
     * const CustomerPjData = await prisma.customerPjData.create({
     *   data: {
     *     // ... data to create a CustomerPjData
     *   }
     * })
     * 
     */
    create<T extends CustomerPjDataCreateArgs>(args: SelectSubset<T, CustomerPjDataCreateArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerPjData.
     * @param {CustomerPjDataCreateManyArgs} args - Arguments to create many CustomerPjData.
     * @example
     * // Create many CustomerPjData
     * const customerPjData = await prisma.customerPjData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerPjDataCreateManyArgs>(args?: SelectSubset<T, CustomerPjDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerPjData and returns the data saved in the database.
     * @param {CustomerPjDataCreateManyAndReturnArgs} args - Arguments to create many CustomerPjData.
     * @example
     * // Create many CustomerPjData
     * const customerPjData = await prisma.customerPjData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerPjData and only return the `id`
     * const customerPjDataWithIdOnly = await prisma.customerPjData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerPjDataCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerPjDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerPjData.
     * @param {CustomerPjDataDeleteArgs} args - Arguments to delete one CustomerPjData.
     * @example
     * // Delete one CustomerPjData
     * const CustomerPjData = await prisma.customerPjData.delete({
     *   where: {
     *     // ... filter to delete one CustomerPjData
     *   }
     * })
     * 
     */
    delete<T extends CustomerPjDataDeleteArgs>(args: SelectSubset<T, CustomerPjDataDeleteArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerPjData.
     * @param {CustomerPjDataUpdateArgs} args - Arguments to update one CustomerPjData.
     * @example
     * // Update one CustomerPjData
     * const customerPjData = await prisma.customerPjData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerPjDataUpdateArgs>(args: SelectSubset<T, CustomerPjDataUpdateArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerPjData.
     * @param {CustomerPjDataDeleteManyArgs} args - Arguments to filter CustomerPjData to delete.
     * @example
     * // Delete a few CustomerPjData
     * const { count } = await prisma.customerPjData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerPjDataDeleteManyArgs>(args?: SelectSubset<T, CustomerPjDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPjData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerPjData
     * const customerPjData = await prisma.customerPjData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerPjDataUpdateManyArgs>(args: SelectSubset<T, CustomerPjDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerPjData and returns the data updated in the database.
     * @param {CustomerPjDataUpdateManyAndReturnArgs} args - Arguments to update many CustomerPjData.
     * @example
     * // Update many CustomerPjData
     * const customerPjData = await prisma.customerPjData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerPjData and only return the `id`
     * const customerPjDataWithIdOnly = await prisma.customerPjData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerPjDataUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerPjDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerPjData.
     * @param {CustomerPjDataUpsertArgs} args - Arguments to update or create a CustomerPjData.
     * @example
     * // Update or create a CustomerPjData
     * const customerPjData = await prisma.customerPjData.upsert({
     *   create: {
     *     // ... data to create a CustomerPjData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerPjData we want to update
     *   }
     * })
     */
    upsert<T extends CustomerPjDataUpsertArgs>(args: SelectSubset<T, CustomerPjDataUpsertArgs<ExtArgs>>): Prisma__CustomerPjDataClient<$Result.GetResult<Prisma.$CustomerPjDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerPjData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataCountArgs} args - Arguments to filter CustomerPjData to count.
     * @example
     * // Count the number of CustomerPjData
     * const count = await prisma.customerPjData.count({
     *   where: {
     *     // ... the filter for the CustomerPjData we want to count
     *   }
     * })
    **/
    count<T extends CustomerPjDataCountArgs>(
      args?: Subset<T, CustomerPjDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerPjDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerPjData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerPjDataAggregateArgs>(args: Subset<T, CustomerPjDataAggregateArgs>): Prisma.PrismaPromise<GetCustomerPjDataAggregateType<T>>

    /**
     * Group by CustomerPjData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerPjDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerPjDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerPjDataGroupByArgs['orderBy'] }
        : { orderBy?: CustomerPjDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerPjDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerPjDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerPjData model
   */
  readonly fields: CustomerPjDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerPjData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerPjDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerPjData model
   */
  interface CustomerPjDataFieldRefs {
    readonly id: FieldRef<"CustomerPjData", 'String'>
    readonly customerId: FieldRef<"CustomerPjData", 'String'>
    readonly representative: FieldRef<"CustomerPjData", 'String'>
    readonly cnpj: FieldRef<"CustomerPjData", 'String'>
    readonly cpf: FieldRef<"CustomerPjData", 'String'>
    readonly createdAt: FieldRef<"CustomerPjData", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerPjData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerPjData findUnique
   */
  export type CustomerPjDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPjData to fetch.
     */
    where: CustomerPjDataWhereUniqueInput
  }

  /**
   * CustomerPjData findUniqueOrThrow
   */
  export type CustomerPjDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPjData to fetch.
     */
    where: CustomerPjDataWhereUniqueInput
  }

  /**
   * CustomerPjData findFirst
   */
  export type CustomerPjDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPjData to fetch.
     */
    where?: CustomerPjDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPjData to fetch.
     */
    orderBy?: CustomerPjDataOrderByWithRelationInput | CustomerPjDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerPjData.
     */
    cursor?: CustomerPjDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPjData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPjData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerPjData.
     */
    distinct?: CustomerPjDataScalarFieldEnum | CustomerPjDataScalarFieldEnum[]
  }

  /**
   * CustomerPjData findFirstOrThrow
   */
  export type CustomerPjDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPjData to fetch.
     */
    where?: CustomerPjDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPjData to fetch.
     */
    orderBy?: CustomerPjDataOrderByWithRelationInput | CustomerPjDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerPjData.
     */
    cursor?: CustomerPjDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPjData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPjData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerPjData.
     */
    distinct?: CustomerPjDataScalarFieldEnum | CustomerPjDataScalarFieldEnum[]
  }

  /**
   * CustomerPjData findMany
   */
  export type CustomerPjDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * Filter, which CustomerPjData to fetch.
     */
    where?: CustomerPjDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerPjData to fetch.
     */
    orderBy?: CustomerPjDataOrderByWithRelationInput | CustomerPjDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerPjData.
     */
    cursor?: CustomerPjDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerPjData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerPjData.
     */
    skip?: number
    distinct?: CustomerPjDataScalarFieldEnum | CustomerPjDataScalarFieldEnum[]
  }

  /**
   * CustomerPjData create
   */
  export type CustomerPjDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerPjData.
     */
    data: XOR<CustomerPjDataCreateInput, CustomerPjDataUncheckedCreateInput>
  }

  /**
   * CustomerPjData createMany
   */
  export type CustomerPjDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerPjData.
     */
    data: CustomerPjDataCreateManyInput | CustomerPjDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerPjData createManyAndReturn
   */
  export type CustomerPjDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerPjData.
     */
    data: CustomerPjDataCreateManyInput | CustomerPjDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerPjData update
   */
  export type CustomerPjDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerPjData.
     */
    data: XOR<CustomerPjDataUpdateInput, CustomerPjDataUncheckedUpdateInput>
    /**
     * Choose, which CustomerPjData to update.
     */
    where: CustomerPjDataWhereUniqueInput
  }

  /**
   * CustomerPjData updateMany
   */
  export type CustomerPjDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerPjData.
     */
    data: XOR<CustomerPjDataUpdateManyMutationInput, CustomerPjDataUncheckedUpdateManyInput>
    /**
     * Filter which CustomerPjData to update
     */
    where?: CustomerPjDataWhereInput
    /**
     * Limit how many CustomerPjData to update.
     */
    limit?: number
  }

  /**
   * CustomerPjData updateManyAndReturn
   */
  export type CustomerPjDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * The data used to update CustomerPjData.
     */
    data: XOR<CustomerPjDataUpdateManyMutationInput, CustomerPjDataUncheckedUpdateManyInput>
    /**
     * Filter which CustomerPjData to update
     */
    where?: CustomerPjDataWhereInput
    /**
     * Limit how many CustomerPjData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerPjData upsert
   */
  export type CustomerPjDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerPjData to update in case it exists.
     */
    where: CustomerPjDataWhereUniqueInput
    /**
     * In case the CustomerPjData found by the `where` argument doesn't exist, create a new CustomerPjData with this data.
     */
    create: XOR<CustomerPjDataCreateInput, CustomerPjDataUncheckedCreateInput>
    /**
     * In case the CustomerPjData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerPjDataUpdateInput, CustomerPjDataUncheckedUpdateInput>
  }

  /**
   * CustomerPjData delete
   */
  export type CustomerPjDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
    /**
     * Filter which CustomerPjData to delete.
     */
    where: CustomerPjDataWhereUniqueInput
  }

  /**
   * CustomerPjData deleteMany
   */
  export type CustomerPjDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerPjData to delete
     */
    where?: CustomerPjDataWhereInput
    /**
     * Limit how many CustomerPjData to delete.
     */
    limit?: number
  }

  /**
   * CustomerPjData without action
   */
  export type CustomerPjDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerPjData
     */
    select?: CustomerPjDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerPjData
     */
    omit?: CustomerPjDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerPjDataInclude<ExtArgs> | null
  }


  /**
   * Model Dependent
   */

  export type AggregateDependent = {
    _count: DependentCountAggregateOutputType | null
    _min: DependentMinAggregateOutputType | null
    _max: DependentMaxAggregateOutputType | null
  }

  export type DependentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    holderId: string | null
    name: string | null
    relationship: string | null
    employeeDependentId: string | null
    cpf: string | null
    birthDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DependentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    holderId: string | null
    name: string | null
    relationship: string | null
    employeeDependentId: string | null
    cpf: string | null
    birthDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DependentCountAggregateOutputType = {
    id: number
    userId: number
    holderId: number
    name: number
    relationship: number
    employeeDependentId: number
    cpf: number
    birthDate: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DependentMinAggregateInputType = {
    id?: true
    userId?: true
    holderId?: true
    name?: true
    relationship?: true
    employeeDependentId?: true
    cpf?: true
    birthDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DependentMaxAggregateInputType = {
    id?: true
    userId?: true
    holderId?: true
    name?: true
    relationship?: true
    employeeDependentId?: true
    cpf?: true
    birthDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DependentCountAggregateInputType = {
    id?: true
    userId?: true
    holderId?: true
    name?: true
    relationship?: true
    employeeDependentId?: true
    cpf?: true
    birthDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DependentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dependent to aggregate.
     */
    where?: DependentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dependents to fetch.
     */
    orderBy?: DependentOrderByWithRelationInput | DependentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DependentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dependents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dependents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dependents
    **/
    _count?: true | DependentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DependentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DependentMaxAggregateInputType
  }

  export type GetDependentAggregateType<T extends DependentAggregateArgs> = {
        [P in keyof T & keyof AggregateDependent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDependent[P]>
      : GetScalarType<T[P], AggregateDependent[P]>
  }




  export type DependentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DependentWhereInput
    orderBy?: DependentOrderByWithAggregationInput | DependentOrderByWithAggregationInput[]
    by: DependentScalarFieldEnum[] | DependentScalarFieldEnum
    having?: DependentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DependentCountAggregateInputType | true
    _min?: DependentMinAggregateInputType
    _max?: DependentMaxAggregateInputType
  }

  export type DependentGroupByOutputType = {
    id: string
    userId: string
    holderId: string
    name: string
    relationship: string | null
    employeeDependentId: string | null
    cpf: string | null
    birthDate: Date
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DependentCountAggregateOutputType | null
    _min: DependentMinAggregateOutputType | null
    _max: DependentMaxAggregateOutputType | null
  }

  type GetDependentGroupByPayload<T extends DependentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DependentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DependentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DependentGroupByOutputType[P]>
            : GetScalarType<T[P], DependentGroupByOutputType[P]>
        }
      >
    >


  export type DependentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    relationship?: boolean
    employeeDependentId?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    CustomerCard?: boolean | Dependent$CustomerCardArgs<ExtArgs>
    Employee?: boolean | Dependent$EmployeeArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dependent"]>

  export type DependentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    relationship?: boolean
    employeeDependentId?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Employee?: boolean | Dependent$EmployeeArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dependent"]>

  export type DependentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    relationship?: boolean
    employeeDependentId?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Employee?: boolean | Dependent$EmployeeArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dependent"]>

  export type DependentSelectScalar = {
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    relationship?: boolean
    employeeDependentId?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DependentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "holderId" | "name" | "relationship" | "employeeDependentId" | "cpf" | "birthDate" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["dependent"]>
  export type DependentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CustomerCard?: boolean | Dependent$CustomerCardArgs<ExtArgs>
    Employee?: boolean | Dependent$EmployeeArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DependentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Employee?: boolean | Dependent$EmployeeArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DependentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Employee?: boolean | Dependent$EmployeeArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DependentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dependent"
    objects: {
      CustomerCard: Prisma.$CustomerCardPayload<ExtArgs> | null
      Employee: Prisma.$EmployeePayload<ExtArgs> | null
      Customer: Prisma.$CustomerPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      holderId: string
      name: string
      relationship: string | null
      employeeDependentId: string | null
      cpf: string | null
      birthDate: Date
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dependent"]>
    composites: {}
  }

  type DependentGetPayload<S extends boolean | null | undefined | DependentDefaultArgs> = $Result.GetResult<Prisma.$DependentPayload, S>

  type DependentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DependentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DependentCountAggregateInputType | true
    }

  export interface DependentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dependent'], meta: { name: 'Dependent' } }
    /**
     * Find zero or one Dependent that matches the filter.
     * @param {DependentFindUniqueArgs} args - Arguments to find a Dependent
     * @example
     * // Get one Dependent
     * const dependent = await prisma.dependent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DependentFindUniqueArgs>(args: SelectSubset<T, DependentFindUniqueArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Dependent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DependentFindUniqueOrThrowArgs} args - Arguments to find a Dependent
     * @example
     * // Get one Dependent
     * const dependent = await prisma.dependent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DependentFindUniqueOrThrowArgs>(args: SelectSubset<T, DependentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dependent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentFindFirstArgs} args - Arguments to find a Dependent
     * @example
     * // Get one Dependent
     * const dependent = await prisma.dependent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DependentFindFirstArgs>(args?: SelectSubset<T, DependentFindFirstArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dependent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentFindFirstOrThrowArgs} args - Arguments to find a Dependent
     * @example
     * // Get one Dependent
     * const dependent = await prisma.dependent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DependentFindFirstOrThrowArgs>(args?: SelectSubset<T, DependentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Dependents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dependents
     * const dependents = await prisma.dependent.findMany()
     * 
     * // Get first 10 Dependents
     * const dependents = await prisma.dependent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dependentWithIdOnly = await prisma.dependent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DependentFindManyArgs>(args?: SelectSubset<T, DependentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Dependent.
     * @param {DependentCreateArgs} args - Arguments to create a Dependent.
     * @example
     * // Create one Dependent
     * const Dependent = await prisma.dependent.create({
     *   data: {
     *     // ... data to create a Dependent
     *   }
     * })
     * 
     */
    create<T extends DependentCreateArgs>(args: SelectSubset<T, DependentCreateArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Dependents.
     * @param {DependentCreateManyArgs} args - Arguments to create many Dependents.
     * @example
     * // Create many Dependents
     * const dependent = await prisma.dependent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DependentCreateManyArgs>(args?: SelectSubset<T, DependentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dependents and returns the data saved in the database.
     * @param {DependentCreateManyAndReturnArgs} args - Arguments to create many Dependents.
     * @example
     * // Create many Dependents
     * const dependent = await prisma.dependent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dependents and only return the `id`
     * const dependentWithIdOnly = await prisma.dependent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DependentCreateManyAndReturnArgs>(args?: SelectSubset<T, DependentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Dependent.
     * @param {DependentDeleteArgs} args - Arguments to delete one Dependent.
     * @example
     * // Delete one Dependent
     * const Dependent = await prisma.dependent.delete({
     *   where: {
     *     // ... filter to delete one Dependent
     *   }
     * })
     * 
     */
    delete<T extends DependentDeleteArgs>(args: SelectSubset<T, DependentDeleteArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Dependent.
     * @param {DependentUpdateArgs} args - Arguments to update one Dependent.
     * @example
     * // Update one Dependent
     * const dependent = await prisma.dependent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DependentUpdateArgs>(args: SelectSubset<T, DependentUpdateArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Dependents.
     * @param {DependentDeleteManyArgs} args - Arguments to filter Dependents to delete.
     * @example
     * // Delete a few Dependents
     * const { count } = await prisma.dependent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DependentDeleteManyArgs>(args?: SelectSubset<T, DependentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dependents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dependents
     * const dependent = await prisma.dependent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DependentUpdateManyArgs>(args: SelectSubset<T, DependentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dependents and returns the data updated in the database.
     * @param {DependentUpdateManyAndReturnArgs} args - Arguments to update many Dependents.
     * @example
     * // Update many Dependents
     * const dependent = await prisma.dependent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dependents and only return the `id`
     * const dependentWithIdOnly = await prisma.dependent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DependentUpdateManyAndReturnArgs>(args: SelectSubset<T, DependentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Dependent.
     * @param {DependentUpsertArgs} args - Arguments to update or create a Dependent.
     * @example
     * // Update or create a Dependent
     * const dependent = await prisma.dependent.upsert({
     *   create: {
     *     // ... data to create a Dependent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dependent we want to update
     *   }
     * })
     */
    upsert<T extends DependentUpsertArgs>(args: SelectSubset<T, DependentUpsertArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Dependents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentCountArgs} args - Arguments to filter Dependents to count.
     * @example
     * // Count the number of Dependents
     * const count = await prisma.dependent.count({
     *   where: {
     *     // ... the filter for the Dependents we want to count
     *   }
     * })
    **/
    count<T extends DependentCountArgs>(
      args?: Subset<T, DependentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DependentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dependent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DependentAggregateArgs>(args: Subset<T, DependentAggregateArgs>): Prisma.PrismaPromise<GetDependentAggregateType<T>>

    /**
     * Group by Dependent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DependentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DependentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DependentGroupByArgs['orderBy'] }
        : { orderBy?: DependentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DependentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDependentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dependent model
   */
  readonly fields: DependentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dependent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DependentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CustomerCard<T extends Dependent$CustomerCardArgs<ExtArgs> = {}>(args?: Subset<T, Dependent$CustomerCardArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Employee<T extends Dependent$EmployeeArgs<ExtArgs> = {}>(args?: Subset<T, Dependent$EmployeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dependent model
   */
  interface DependentFieldRefs {
    readonly id: FieldRef<"Dependent", 'String'>
    readonly userId: FieldRef<"Dependent", 'String'>
    readonly holderId: FieldRef<"Dependent", 'String'>
    readonly name: FieldRef<"Dependent", 'String'>
    readonly relationship: FieldRef<"Dependent", 'String'>
    readonly employeeDependentId: FieldRef<"Dependent", 'String'>
    readonly cpf: FieldRef<"Dependent", 'String'>
    readonly birthDate: FieldRef<"Dependent", 'DateTime'>
    readonly isActive: FieldRef<"Dependent", 'Boolean'>
    readonly createdAt: FieldRef<"Dependent", 'DateTime'>
    readonly updatedAt: FieldRef<"Dependent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Dependent findUnique
   */
  export type DependentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * Filter, which Dependent to fetch.
     */
    where: DependentWhereUniqueInput
  }

  /**
   * Dependent findUniqueOrThrow
   */
  export type DependentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * Filter, which Dependent to fetch.
     */
    where: DependentWhereUniqueInput
  }

  /**
   * Dependent findFirst
   */
  export type DependentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * Filter, which Dependent to fetch.
     */
    where?: DependentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dependents to fetch.
     */
    orderBy?: DependentOrderByWithRelationInput | DependentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dependents.
     */
    cursor?: DependentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dependents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dependents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dependents.
     */
    distinct?: DependentScalarFieldEnum | DependentScalarFieldEnum[]
  }

  /**
   * Dependent findFirstOrThrow
   */
  export type DependentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * Filter, which Dependent to fetch.
     */
    where?: DependentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dependents to fetch.
     */
    orderBy?: DependentOrderByWithRelationInput | DependentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dependents.
     */
    cursor?: DependentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dependents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dependents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dependents.
     */
    distinct?: DependentScalarFieldEnum | DependentScalarFieldEnum[]
  }

  /**
   * Dependent findMany
   */
  export type DependentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * Filter, which Dependents to fetch.
     */
    where?: DependentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dependents to fetch.
     */
    orderBy?: DependentOrderByWithRelationInput | DependentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dependents.
     */
    cursor?: DependentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dependents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dependents.
     */
    skip?: number
    distinct?: DependentScalarFieldEnum | DependentScalarFieldEnum[]
  }

  /**
   * Dependent create
   */
  export type DependentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * The data needed to create a Dependent.
     */
    data: XOR<DependentCreateInput, DependentUncheckedCreateInput>
  }

  /**
   * Dependent createMany
   */
  export type DependentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dependents.
     */
    data: DependentCreateManyInput | DependentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dependent createManyAndReturn
   */
  export type DependentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * The data used to create many Dependents.
     */
    data: DependentCreateManyInput | DependentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dependent update
   */
  export type DependentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * The data needed to update a Dependent.
     */
    data: XOR<DependentUpdateInput, DependentUncheckedUpdateInput>
    /**
     * Choose, which Dependent to update.
     */
    where: DependentWhereUniqueInput
  }

  /**
   * Dependent updateMany
   */
  export type DependentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dependents.
     */
    data: XOR<DependentUpdateManyMutationInput, DependentUncheckedUpdateManyInput>
    /**
     * Filter which Dependents to update
     */
    where?: DependentWhereInput
    /**
     * Limit how many Dependents to update.
     */
    limit?: number
  }

  /**
   * Dependent updateManyAndReturn
   */
  export type DependentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * The data used to update Dependents.
     */
    data: XOR<DependentUpdateManyMutationInput, DependentUncheckedUpdateManyInput>
    /**
     * Filter which Dependents to update
     */
    where?: DependentWhereInput
    /**
     * Limit how many Dependents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Dependent upsert
   */
  export type DependentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * The filter to search for the Dependent to update in case it exists.
     */
    where: DependentWhereUniqueInput
    /**
     * In case the Dependent found by the `where` argument doesn't exist, create a new Dependent with this data.
     */
    create: XOR<DependentCreateInput, DependentUncheckedCreateInput>
    /**
     * In case the Dependent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DependentUpdateInput, DependentUncheckedUpdateInput>
  }

  /**
   * Dependent delete
   */
  export type DependentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    /**
     * Filter which Dependent to delete.
     */
    where: DependentWhereUniqueInput
  }

  /**
   * Dependent deleteMany
   */
  export type DependentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dependents to delete
     */
    where?: DependentWhereInput
    /**
     * Limit how many Dependents to delete.
     */
    limit?: number
  }

  /**
   * Dependent.CustomerCard
   */
  export type Dependent$CustomerCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    where?: CustomerCardWhereInput
  }

  /**
   * Dependent.Employee
   */
  export type Dependent$EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * Dependent without action
   */
  export type DependentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
  }


  /**
   * Model Employee
   */

  export type AggregateEmployee = {
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  export type EmployeeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    holderId: string | null
    name: string | null
    position: string | null
    cpf: string | null
    birthDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    holderId: string | null
    name: string | null
    position: string | null
    cpf: string | null
    birthDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployeeCountAggregateOutputType = {
    id: number
    userId: number
    holderId: number
    name: number
    position: number
    cpf: number
    birthDate: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployeeMinAggregateInputType = {
    id?: true
    userId?: true
    holderId?: true
    name?: true
    position?: true
    cpf?: true
    birthDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeMaxAggregateInputType = {
    id?: true
    userId?: true
    holderId?: true
    name?: true
    position?: true
    cpf?: true
    birthDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployeeCountAggregateInputType = {
    id?: true
    userId?: true
    holderId?: true
    name?: true
    position?: true
    cpf?: true
    birthDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employee to aggregate.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employees
    **/
    _count?: true | EmployeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeMaxAggregateInputType
  }

  export type GetEmployeeAggregateType<T extends EmployeeAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployee[P]>
      : GetScalarType<T[P], AggregateEmployee[P]>
  }




  export type EmployeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployeeWhereInput
    orderBy?: EmployeeOrderByWithAggregationInput | EmployeeOrderByWithAggregationInput[]
    by: EmployeeScalarFieldEnum[] | EmployeeScalarFieldEnum
    having?: EmployeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeCountAggregateInputType | true
    _min?: EmployeeMinAggregateInputType
    _max?: EmployeeMaxAggregateInputType
  }

  export type EmployeeGroupByOutputType = {
    id: string
    userId: string
    holderId: string
    name: string
    position: string | null
    cpf: string | null
    birthDate: Date
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: EmployeeCountAggregateOutputType | null
    _min: EmployeeMinAggregateOutputType | null
    _max: EmployeeMaxAggregateOutputType | null
  }

  type GetEmployeeGroupByPayload<T extends EmployeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeGroupByOutputType[P]>
        }
      >
    >


  export type EmployeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    position?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    CustomerCard?: boolean | Employee$CustomerCardArgs<ExtArgs>
    Dependent?: boolean | Employee$DependentArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    position?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    position?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employee"]>

  export type EmployeeSelectScalar = {
    id?: boolean
    userId?: boolean
    holderId?: boolean
    name?: boolean
    position?: boolean
    cpf?: boolean
    birthDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "holderId" | "name" | "position" | "cpf" | "birthDate" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["employee"]>
  export type EmployeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    CustomerCard?: boolean | Employee$CustomerCardArgs<ExtArgs>
    Dependent?: boolean | Employee$DependentArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | EmployeeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmployeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    User?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmployeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employee"
    objects: {
      CustomerCard: Prisma.$CustomerCardPayload<ExtArgs> | null
      Dependent: Prisma.$DependentPayload<ExtArgs>[]
      Customer: Prisma.$CustomerPayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      holderId: string
      name: string
      position: string | null
      cpf: string | null
      birthDate: Date
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employee"]>
    composites: {}
  }

  type EmployeeGetPayload<S extends boolean | null | undefined | EmployeeDefaultArgs> = $Result.GetResult<Prisma.$EmployeePayload, S>

  type EmployeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployeeCountAggregateInputType | true
    }

  export interface EmployeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employee'], meta: { name: 'Employee' } }
    /**
     * Find zero or one Employee that matches the filter.
     * @param {EmployeeFindUniqueArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployeeFindUniqueArgs>(args: SelectSubset<T, EmployeeFindUniqueArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployeeFindUniqueOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployeeFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployeeFindFirstArgs>(args?: SelectSubset<T, EmployeeFindFirstArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindFirstOrThrowArgs} args - Arguments to find a Employee
     * @example
     * // Get one Employee
     * const employee = await prisma.employee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployeeFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employee.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeWithIdOnly = await prisma.employee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployeeFindManyArgs>(args?: SelectSubset<T, EmployeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employee.
     * @param {EmployeeCreateArgs} args - Arguments to create a Employee.
     * @example
     * // Create one Employee
     * const Employee = await prisma.employee.create({
     *   data: {
     *     // ... data to create a Employee
     *   }
     * })
     * 
     */
    create<T extends EmployeeCreateArgs>(args: SelectSubset<T, EmployeeCreateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employees.
     * @param {EmployeeCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployeeCreateManyArgs>(args?: SelectSubset<T, EmployeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Employees and returns the data saved in the database.
     * @param {EmployeeCreateManyAndReturnArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employee = await prisma.employee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployeeCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Employee.
     * @param {EmployeeDeleteArgs} args - Arguments to delete one Employee.
     * @example
     * // Delete one Employee
     * const Employee = await prisma.employee.delete({
     *   where: {
     *     // ... filter to delete one Employee
     *   }
     * })
     * 
     */
    delete<T extends EmployeeDeleteArgs>(args: SelectSubset<T, EmployeeDeleteArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employee.
     * @param {EmployeeUpdateArgs} args - Arguments to update one Employee.
     * @example
     * // Update one Employee
     * const employee = await prisma.employee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployeeUpdateArgs>(args: SelectSubset<T, EmployeeUpdateArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employees.
     * @param {EmployeeDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployeeDeleteManyArgs>(args?: SelectSubset<T, EmployeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployeeUpdateManyArgs>(args: SelectSubset<T, EmployeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees and returns the data updated in the database.
     * @param {EmployeeUpdateManyAndReturnArgs} args - Arguments to update many Employees.
     * @example
     * // Update many Employees
     * const employee = await prisma.employee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Employees and only return the `id`
     * const employeeWithIdOnly = await prisma.employee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmployeeUpdateManyAndReturnArgs>(args: SelectSubset<T, EmployeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Employee.
     * @param {EmployeeUpsertArgs} args - Arguments to update or create a Employee.
     * @example
     * // Update or create a Employee
     * const employee = await prisma.employee.upsert({
     *   create: {
     *     // ... data to create a Employee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employee we want to update
     *   }
     * })
     */
    upsert<T extends EmployeeUpsertArgs>(args: SelectSubset<T, EmployeeUpsertArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employee.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends EmployeeCountArgs>(
      args?: Subset<T, EmployeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeAggregateArgs>(args: Subset<T, EmployeeAggregateArgs>): Prisma.PrismaPromise<GetEmployeeAggregateType<T>>

    /**
     * Group by Employee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployeeGroupByArgs['orderBy'] }
        : { orderBy?: EmployeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employee model
   */
  readonly fields: EmployeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    CustomerCard<T extends Employee$CustomerCardArgs<ExtArgs> = {}>(args?: Subset<T, Employee$CustomerCardArgs<ExtArgs>>): Prisma__CustomerCardClient<$Result.GetResult<Prisma.$CustomerCardPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Dependent<T extends Employee$DependentArgs<ExtArgs> = {}>(args?: Subset<T, Employee$DependentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employee model
   */
  interface EmployeeFieldRefs {
    readonly id: FieldRef<"Employee", 'String'>
    readonly userId: FieldRef<"Employee", 'String'>
    readonly holderId: FieldRef<"Employee", 'String'>
    readonly name: FieldRef<"Employee", 'String'>
    readonly position: FieldRef<"Employee", 'String'>
    readonly cpf: FieldRef<"Employee", 'String'>
    readonly birthDate: FieldRef<"Employee", 'DateTime'>
    readonly isActive: FieldRef<"Employee", 'Boolean'>
    readonly createdAt: FieldRef<"Employee", 'DateTime'>
    readonly updatedAt: FieldRef<"Employee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employee findUnique
   */
  export type EmployeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findUniqueOrThrow
   */
  export type EmployeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee findFirst
   */
  export type EmployeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findFirstOrThrow
   */
  export type EmployeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employee to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employees.
     */
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee findMany
   */
  export type EmployeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter, which Employees to fetch.
     */
    where?: EmployeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employees to fetch.
     */
    orderBy?: EmployeeOrderByWithRelationInput | EmployeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employees.
     */
    cursor?: EmployeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employees.
     */
    skip?: number
    distinct?: EmployeeScalarFieldEnum | EmployeeScalarFieldEnum[]
  }

  /**
   * Employee create
   */
  export type EmployeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to create a Employee.
     */
    data: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
  }

  /**
   * Employee createMany
   */
  export type EmployeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employee createManyAndReturn
   */
  export type EmployeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to create many Employees.
     */
    data: EmployeeCreateManyInput | EmployeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee update
   */
  export type EmployeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The data needed to update a Employee.
     */
    data: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
    /**
     * Choose, which Employee to update.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee updateMany
   */
  export type EmployeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
  }

  /**
   * Employee updateManyAndReturn
   */
  export type EmployeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * The data used to update Employees.
     */
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyInput>
    /**
     * Filter which Employees to update
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Employee upsert
   */
  export type EmployeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * The filter to search for the Employee to update in case it exists.
     */
    where: EmployeeWhereUniqueInput
    /**
     * In case the Employee found by the `where` argument doesn't exist, create a new Employee with this data.
     */
    create: XOR<EmployeeCreateInput, EmployeeUncheckedCreateInput>
    /**
     * In case the Employee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployeeUpdateInput, EmployeeUncheckedUpdateInput>
  }

  /**
   * Employee delete
   */
  export type EmployeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    /**
     * Filter which Employee to delete.
     */
    where: EmployeeWhereUniqueInput
  }

  /**
   * Employee deleteMany
   */
  export type EmployeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employees to delete
     */
    where?: EmployeeWhereInput
    /**
     * Limit how many Employees to delete.
     */
    limit?: number
  }

  /**
   * Employee.CustomerCard
   */
  export type Employee$CustomerCardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCard
     */
    select?: CustomerCardSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerCard
     */
    omit?: CustomerCardOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerCardInclude<ExtArgs> | null
    where?: CustomerCardWhereInput
  }

  /**
   * Employee.Dependent
   */
  export type Employee$DependentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    where?: DependentWhereInput
    orderBy?: DependentOrderByWithRelationInput | DependentOrderByWithRelationInput[]
    cursor?: DependentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DependentScalarFieldEnum | DependentScalarFieldEnum[]
  }

  /**
   * Employee without action
   */
  export type EmployeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
  }


  /**
   * Model Invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    amount: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    amount: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    dueDate: Date | null
    amount: number | null
    status: $Enums.InvoiceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    dueDate: Date | null
    amount: number | null
    status: $Enums.InvoiceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    subscriptionId: number
    dueDate: number
    amount: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    amount?: true
  }

  export type InvoiceSumAggregateInputType = {
    amount?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    dueDate?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    dueDate?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    dueDate?: true
    amount?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoice to aggregate.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type InvoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithAggregationInput | InvoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: InvoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: string
    subscriptionId: string
    dueDate: Date
    amount: number
    status: $Enums.InvoiceStatus
    createdAt: Date
    updatedAt: Date
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends InvoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type InvoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>

  export type InvoiceSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InvoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subscriptionId" | "dueDate" | "amount" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["invoice"]>
  export type InvoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }
  export type InvoiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
  }

  export type $InvoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invoice"
    objects: {
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriptionId: string
      dueDate: Date
      amount: number
      status: $Enums.InvoiceStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type InvoiceGetPayload<S extends boolean | null | undefined | InvoiceDefaultArgs> = $Result.GetResult<Prisma.$InvoicePayload, S>

  type InvoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface InvoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invoice'], meta: { name: 'Invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {InvoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvoiceFindUniqueArgs>(args: SelectSubset<T, InvoiceFindUniqueArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, InvoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvoiceFindFirstArgs>(args?: SelectSubset<T, InvoiceFindFirstArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, InvoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvoiceFindManyArgs>(args?: SelectSubset<T, InvoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {InvoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends InvoiceCreateArgs>(args: SelectSubset<T, InvoiceCreateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {InvoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvoiceCreateManyArgs>(args?: SelectSubset<T, InvoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Invoices and returns the data saved in the database.
     * @param {InvoiceCreateManyAndReturnArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvoiceCreateManyAndReturnArgs>(args?: SelectSubset<T, InvoiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Invoice.
     * @param {InvoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends InvoiceDeleteArgs>(args: SelectSubset<T, InvoiceDeleteArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {InvoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvoiceUpdateArgs>(args: SelectSubset<T, InvoiceUpdateArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {InvoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvoiceDeleteManyArgs>(args?: SelectSubset<T, InvoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvoiceUpdateManyArgs>(args: SelectSubset<T, InvoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices and returns the data updated in the database.
     * @param {InvoiceUpdateManyAndReturnArgs} args - Arguments to update many Invoices.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Invoices and only return the `id`
     * const invoiceWithIdOnly = await prisma.invoice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvoiceUpdateManyAndReturnArgs>(args: SelectSubset<T, InvoiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Invoice.
     * @param {InvoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends InvoiceUpsertArgs>(args: SelectSubset<T, InvoiceUpsertArgs<ExtArgs>>): Prisma__InvoiceClient<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends InvoiceCountArgs>(
      args?: Subset<T, InvoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvoiceGroupByArgs['orderBy'] }
        : { orderBy?: InvoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invoice model
   */
  readonly fields: InvoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Subscription<T extends SubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionDefaultArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invoice model
   */
  interface InvoiceFieldRefs {
    readonly id: FieldRef<"Invoice", 'String'>
    readonly subscriptionId: FieldRef<"Invoice", 'String'>
    readonly dueDate: FieldRef<"Invoice", 'DateTime'>
    readonly amount: FieldRef<"Invoice", 'Int'>
    readonly status: FieldRef<"Invoice", 'InvoiceStatus'>
    readonly createdAt: FieldRef<"Invoice", 'DateTime'>
    readonly updatedAt: FieldRef<"Invoice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invoice findUnique
   */
  export type InvoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findUniqueOrThrow
   */
  export type InvoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice findFirst
   */
  export type InvoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findFirstOrThrow
   */
  export type InvoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoice to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice findMany
   */
  export type InvoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter, which Invoices to fetch.
     */
    where?: InvoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invoices to fetch.
     */
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invoices.
     */
    cursor?: InvoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Invoice create
   */
  export type InvoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Invoice.
     */
    data: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
  }

  /**
   * Invoice createMany
   */
  export type InvoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invoice createManyAndReturn
   */
  export type InvoiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to create many Invoices.
     */
    data: InvoiceCreateManyInput | InvoiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice update
   */
  export type InvoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Invoice.
     */
    data: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
    /**
     * Choose, which Invoice to update.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice updateMany
   */
  export type InvoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
  }

  /**
   * Invoice updateManyAndReturn
   */
  export type InvoiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * The data used to update Invoices.
     */
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyInput>
    /**
     * Filter which Invoices to update
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Invoice upsert
   */
  export type InvoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Invoice to update in case it exists.
     */
    where: InvoiceWhereUniqueInput
    /**
     * In case the Invoice found by the `where` argument doesn't exist, create a new Invoice with this data.
     */
    create: XOR<InvoiceCreateInput, InvoiceUncheckedCreateInput>
    /**
     * In case the Invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvoiceUpdateInput, InvoiceUncheckedUpdateInput>
  }

  /**
   * Invoice delete
   */
  export type InvoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    /**
     * Filter which Invoice to delete.
     */
    where: InvoiceWhereUniqueInput
  }

  /**
   * Invoice deleteMany
   */
  export type InvoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invoices to delete
     */
    where?: InvoiceWhereInput
    /**
     * Limit how many Invoices to delete.
     */
    limit?: number
  }

  /**
   * Invoice without action
   */
  export type InvoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
  }


  /**
   * Model Plan
   */

  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    signupFee: number | null
    maxInstallments: number | null
    maxDependents: number | null
    pricePerEmployee: number | null
    pricePerDependent: number | null
  }

  export type PlanSumAggregateOutputType = {
    signupFee: number | null
    maxInstallments: number | null
    maxDependents: number | null
    pricePerEmployee: number | null
    pricePerDependent: number | null
  }

  export type PlanMinAggregateOutputType = {
    id: string | null
    externalId: string | null
    name: string | null
    contractText: string | null
    signupFee: number | null
    maxInstallments: number | null
    additionalInfo: string | null
    isShowingInApp: boolean | null
    hasTelemedicine: boolean | null
    maxDependents: number | null
    pricePerEmployee: number | null
    pricePerDependent: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanMaxAggregateOutputType = {
    id: string | null
    externalId: string | null
    name: string | null
    contractText: string | null
    signupFee: number | null
    maxInstallments: number | null
    additionalInfo: string | null
    isShowingInApp: boolean | null
    hasTelemedicine: boolean | null
    maxDependents: number | null
    pricePerEmployee: number | null
    pricePerDependent: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanCountAggregateOutputType = {
    id: number
    externalId: number
    name: number
    contractText: number
    signupFee: number
    allowedPaymentTypes: number
    maxInstallments: number
    prices: number
    additionalInfo: number
    isShowingInApp: number
    hasTelemedicine: number
    maxDependents: number
    pricePerEmployee: number
    pricePerDependent: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    signupFee?: true
    maxInstallments?: true
    maxDependents?: true
    pricePerEmployee?: true
    pricePerDependent?: true
  }

  export type PlanSumAggregateInputType = {
    signupFee?: true
    maxInstallments?: true
    maxDependents?: true
    pricePerEmployee?: true
    pricePerDependent?: true
  }

  export type PlanMinAggregateInputType = {
    id?: true
    externalId?: true
    name?: true
    contractText?: true
    signupFee?: true
    maxInstallments?: true
    additionalInfo?: true
    isShowingInApp?: true
    hasTelemedicine?: true
    maxDependents?: true
    pricePerEmployee?: true
    pricePerDependent?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    externalId?: true
    name?: true
    contractText?: true
    signupFee?: true
    maxInstallments?: true
    additionalInfo?: true
    isShowingInApp?: true
    hasTelemedicine?: true
    maxDependents?: true
    pricePerEmployee?: true
    pricePerDependent?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    externalId?: true
    name?: true
    contractText?: true
    signupFee?: true
    allowedPaymentTypes?: true
    maxInstallments?: true
    prices?: true
    additionalInfo?: true
    isShowingInApp?: true
    hasTelemedicine?: true
    maxDependents?: true
    pricePerEmployee?: true
    pricePerDependent?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _avg?: PlanAvgAggregateInputType
    _sum?: PlanSumAggregateInputType
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }

  export type PlanGroupByOutputType = {
    id: string
    externalId: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes: $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonValue
    additionalInfo: string | null
    isShowingInApp: boolean
    hasTelemedicine: boolean
    maxDependents: number | null
    pricePerEmployee: number | null
    pricePerDependent: number | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    externalId?: boolean
    name?: boolean
    contractText?: boolean
    signupFee?: boolean
    allowedPaymentTypes?: boolean
    maxInstallments?: boolean
    prices?: boolean
    additionalInfo?: boolean
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: boolean
    pricePerEmployee?: boolean
    pricePerDependent?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | Plan$CustomerArgs<ExtArgs>
    Subscription?: boolean | Plan$SubscriptionArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    externalId?: boolean
    name?: boolean
    contractText?: boolean
    signupFee?: boolean
    allowedPaymentTypes?: boolean
    maxInstallments?: boolean
    prices?: boolean
    additionalInfo?: boolean
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: boolean
    pricePerEmployee?: boolean
    pricePerDependent?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    externalId?: boolean
    name?: boolean
    contractText?: boolean
    signupFee?: boolean
    allowedPaymentTypes?: boolean
    maxInstallments?: boolean
    prices?: boolean
    additionalInfo?: boolean
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: boolean
    pricePerEmployee?: boolean
    pricePerDependent?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    id?: boolean
    externalId?: boolean
    name?: boolean
    contractText?: boolean
    signupFee?: boolean
    allowedPaymentTypes?: boolean
    maxInstallments?: boolean
    prices?: boolean
    additionalInfo?: boolean
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: boolean
    pricePerEmployee?: boolean
    pricePerDependent?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "externalId" | "name" | "contractText" | "signupFee" | "allowedPaymentTypes" | "maxInstallments" | "prices" | "additionalInfo" | "isShowingInApp" | "hasTelemedicine" | "maxDependents" | "pricePerEmployee" | "pricePerDependent" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["plan"]>
  export type PlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | Plan$CustomerArgs<ExtArgs>
    Subscription?: boolean | Plan$SubscriptionArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plan"
    objects: {
      Customer: Prisma.$CustomerPayload<ExtArgs>[]
      Subscription: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      externalId: string | null
      name: string
      contractText: string
      signupFee: number
      allowedPaymentTypes: $Enums.PaymentType[]
      maxInstallments: number
      prices: Prisma.JsonValue
      additionalInfo: string | null
      isShowingInApp: boolean
      hasTelemedicine: boolean
      maxDependents: number | null
      pricePerEmployee: number | null
      pricePerDependent: number | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["plan"]>
    composites: {}
  }

  type PlanGetPayload<S extends boolean | null | undefined | PlanDefaultArgs> = $Result.GetResult<Prisma.$PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanFindUniqueArgs>(args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Plan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanFindFirstArgs>(args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanFindManyArgs>(args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
     */
    create<T extends PlanCreateArgs>(args: SelectSubset<T, PlanCreateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Plans.
     * @param {PlanCreateManyArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanCreateManyArgs>(args?: SelectSubset<T, PlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plans and returns the data saved in the database.
     * @param {PlanCreateManyAndReturnArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
     */
    delete<T extends PlanDeleteArgs>(args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanUpdateArgs>(args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanDeleteManyArgs>(args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanUpdateManyArgs>(args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans and returns the data updated in the database.
     * @param {PlanUpdateManyAndReturnArgs} args - Arguments to update many Plans.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
     */
    upsert<T extends PlanUpsertArgs>(args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Customer<T extends Plan$CustomerArgs<ExtArgs> = {}>(args?: Subset<T, Plan$CustomerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Subscription<T extends Plan$SubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, Plan$SubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plan model
   */
  interface PlanFieldRefs {
    readonly id: FieldRef<"Plan", 'String'>
    readonly externalId: FieldRef<"Plan", 'String'>
    readonly name: FieldRef<"Plan", 'String'>
    readonly contractText: FieldRef<"Plan", 'String'>
    readonly signupFee: FieldRef<"Plan", 'Int'>
    readonly allowedPaymentTypes: FieldRef<"Plan", 'PaymentType[]'>
    readonly maxInstallments: FieldRef<"Plan", 'Int'>
    readonly prices: FieldRef<"Plan", 'Json'>
    readonly additionalInfo: FieldRef<"Plan", 'String'>
    readonly isShowingInApp: FieldRef<"Plan", 'Boolean'>
    readonly hasTelemedicine: FieldRef<"Plan", 'Boolean'>
    readonly maxDependents: FieldRef<"Plan", 'Int'>
    readonly pricePerEmployee: FieldRef<"Plan", 'Int'>
    readonly pricePerDependent: FieldRef<"Plan", 'Int'>
    readonly isActive: FieldRef<"Plan", 'Boolean'>
    readonly createdAt: FieldRef<"Plan", 'DateTime'>
    readonly updatedAt: FieldRef<"Plan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }

  /**
   * Plan createMany
   */
  export type PlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan createManyAndReturn
   */
  export type PlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to update.
     */
    limit?: number
  }

  /**
   * Plan updateManyAndReturn
   */
  export type PlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to update.
     */
    limit?: number
  }

  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }

  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to delete.
     */
    limit?: number
  }

  /**
   * Plan.Customer
   */
  export type Plan$CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    cursor?: CustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Plan.Subscription
   */
  export type Plan$SubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Plan without action
   */
  export type PlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionAvgAggregateOutputType = {
    installments: number | null
  }

  export type SubscriptionSumAggregateOutputType = {
    installments: number | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    planId: string | null
    status: $Enums.SubscriptionStatus | null
    startDate: Date | null
    endDate: Date | null
    firstPayDayDate: Date | null
    paymentType: $Enums.PaymentType | null
    installments: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    planId: string | null
    status: $Enums.SubscriptionStatus | null
    startDate: Date | null
    endDate: Date | null
    firstPayDayDate: Date | null
    paymentType: $Enums.PaymentType | null
    installments: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    customerId: number
    planId: number
    status: number
    startDate: number
    endDate: number
    firstPayDayDate: number
    paymentType: number
    installments: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionAvgAggregateInputType = {
    installments?: true
  }

  export type SubscriptionSumAggregateInputType = {
    installments?: true
  }

  export type SubscriptionMinAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
    status?: true
    startDate?: true
    endDate?: true
    firstPayDayDate?: true
    paymentType?: true
    installments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
    status?: true
    startDate?: true
    endDate?: true
    firstPayDayDate?: true
    paymentType?: true
    installments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    customerId?: true
    planId?: true
    status?: true
    startDate?: true
    endDate?: true
    firstPayDayDate?: true
    paymentType?: true
    installments?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _avg?: SubscriptionAvgAggregateInputType
    _sum?: SubscriptionSumAggregateInputType
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    customerId: string
    planId: string
    status: $Enums.SubscriptionStatus
    startDate: Date
    endDate: Date
    firstPayDayDate: Date
    paymentType: $Enums.PaymentType
    installments: number
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _avg: SubscriptionAvgAggregateOutputType | null
    _sum: SubscriptionSumAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    firstPayDayDate?: boolean
    paymentType?: boolean
    installments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Invoice?: boolean | Subscription$InvoiceArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Plan?: boolean | PlanDefaultArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    firstPayDayDate?: boolean
    paymentType?: boolean
    installments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    firstPayDayDate?: boolean
    paymentType?: boolean
    installments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>

  export type SubscriptionSelectScalar = {
    id?: boolean
    customerId?: boolean
    planId?: boolean
    status?: boolean
    startDate?: boolean
    endDate?: boolean
    firstPayDayDate?: boolean
    paymentType?: boolean
    installments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "planId" | "status" | "startDate" | "endDate" | "firstPayDayDate" | "paymentType" | "installments" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Invoice?: boolean | Subscription$InvoiceArgs<ExtArgs>
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Plan?: boolean | PlanDefaultArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Plan?: boolean | PlanDefaultArgs<ExtArgs>
  }
  export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Customer?: boolean | CustomerDefaultArgs<ExtArgs>
    Plan?: boolean | PlanDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      Invoice: Prisma.$InvoicePayload<ExtArgs>[]
      Customer: Prisma.$CustomerPayload<ExtArgs>
      Plan: Prisma.$PlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      planId: string
      status: $Enums.SubscriptionStatus
      startDate: Date
      endDate: Date
      firstPayDayDate: Date
      paymentType: $Enums.PaymentType
      installments: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subscriptions and returns the data saved in the database.
     * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions and returns the data updated in the database.
     * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subscriptions and only return the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Invoice<T extends Subscription$InvoiceArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$InvoiceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    Plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly customerId: FieldRef<"Subscription", 'String'>
    readonly planId: FieldRef<"Subscription", 'String'>
    readonly status: FieldRef<"Subscription", 'SubscriptionStatus'>
    readonly startDate: FieldRef<"Subscription", 'DateTime'>
    readonly endDate: FieldRef<"Subscription", 'DateTime'>
    readonly firstPayDayDate: FieldRef<"Subscription", 'DateTime'>
    readonly paymentType: FieldRef<"Subscription", 'PaymentType'>
    readonly installments: FieldRef<"Subscription", 'Int'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription createManyAndReturn
   */
  export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription updateManyAndReturn
   */
  export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription.Invoice
   */
  export type Subscription$InvoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invoice
     */
    select?: InvoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invoice
     */
    omit?: InvoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvoiceInclude<ExtArgs> | null
    where?: InvoiceWhereInput
    orderBy?: InvoiceOrderByWithRelationInput | InvoiceOrderByWithRelationInput[]
    cursor?: InvoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    type: $Enums.UserType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    type: $Enums.UserType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Affiliate?: boolean | User$AffiliateArgs<ExtArgs>
    Customer?: boolean | User$CustomerArgs<ExtArgs>
    Dependent?: boolean | User$DependentArgs<ExtArgs>
    Employee?: boolean | User$EmployeeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Affiliate?: boolean | User$AffiliateArgs<ExtArgs>
    Customer?: boolean | User$CustomerArgs<ExtArgs>
    Dependent?: boolean | User$DependentArgs<ExtArgs>
    Employee?: boolean | User$EmployeeArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Affiliate: Prisma.$AffiliatePayload<ExtArgs> | null
      Customer: Prisma.$CustomerPayload<ExtArgs> | null
      Dependent: Prisma.$DependentPayload<ExtArgs> | null
      Employee: Prisma.$EmployeePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      type: $Enums.UserType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Affiliate<T extends User$AffiliateArgs<ExtArgs> = {}>(args?: Subset<T, User$AffiliateArgs<ExtArgs>>): Prisma__AffiliateClient<$Result.GetResult<Prisma.$AffiliatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Customer<T extends User$CustomerArgs<ExtArgs> = {}>(args?: Subset<T, User$CustomerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Dependent<T extends User$DependentArgs<ExtArgs> = {}>(args?: Subset<T, User$DependentArgs<ExtArgs>>): Prisma__DependentClient<$Result.GetResult<Prisma.$DependentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Employee<T extends User$EmployeeArgs<ExtArgs> = {}>(args?: Subset<T, User$EmployeeArgs<ExtArgs>>): Prisma__EmployeeClient<$Result.GetResult<Prisma.$EmployeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly type: FieldRef<"User", 'UserType'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Affiliate
   */
  export type User$AffiliateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Affiliate
     */
    select?: AffiliateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Affiliate
     */
    omit?: AffiliateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AffiliateInclude<ExtArgs> | null
    where?: AffiliateWhereInput
  }

  /**
   * User.Customer
   */
  export type User$CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * User.Dependent
   */
  export type User$DependentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dependent
     */
    select?: DependentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dependent
     */
    omit?: DependentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DependentInclude<ExtArgs> | null
    where?: DependentWhereInput
  }

  /**
   * User.Employee
   */
  export type User$EmployeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employee
     */
    select?: EmployeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employee
     */
    omit?: EmployeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployeeInclude<ExtArgs> | null
    where?: EmployeeWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AffiliateScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    name: 'name',
    commissionType: 'commissionType',
    commissionValue: 'commissionValue',
    cpf: 'cpf',
    phone: 'phone',
    email: 'email',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AffiliateScalarFieldEnum = (typeof AffiliateScalarFieldEnum)[keyof typeof AffiliateScalarFieldEnum]


  export const AffiliateCustomerScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    affiliateId: 'affiliateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AffiliateCustomerScalarFieldEnum = (typeof AffiliateCustomerScalarFieldEnum)[keyof typeof AffiliateCustomerScalarFieldEnum]


  export const CreditCardScalarFieldEnum: {
    id: 'id',
    clientId: 'clientId',
    token: 'token',
    last4: 'last4',
    brand: 'brand',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CreditCardScalarFieldEnum = (typeof CreditCardScalarFieldEnum)[keyof typeof CreditCardScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    externalId: 'externalId',
    name: 'name',
    document: 'document',
    observation: 'observation',
    mainPaymentMethod: 'mainPaymentMethod',
    status: 'status',
    email: 'email',
    phone: 'phone',
    adherenceDate: 'adherenceDate',
    renovationDate: 'renovationDate',
    expireDate: 'expireDate',
    clientType: 'clientType',
    affiliateCode: 'affiliateCode',
    planId: 'planId',
    cep: 'cep',
    address: 'address',
    number: 'number',
    complement: 'complement',
    district: 'district',
    city: 'city',
    state: 'state',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const CustomerCardScalarFieldEnum: {
    id: 'id',
    cardNumber: 'cardNumber',
    expireDate: 'expireDate',
    customerId: 'customerId',
    dependentId: 'dependentId',
    employeeId: 'employeeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerCardScalarFieldEnum = (typeof CustomerCardScalarFieldEnum)[keyof typeof CustomerCardScalarFieldEnum]


  export const CustomerPfDataScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    birthDate: 'birthDate',
    rg: 'rg',
    cpf: 'cpf',
    sex: 'sex',
    civilState: 'civilState',
    job: 'job',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerPfDataScalarFieldEnum = (typeof CustomerPfDataScalarFieldEnum)[keyof typeof CustomerPfDataScalarFieldEnum]


  export const CustomerPjDataScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    representative: 'representative',
    cnpj: 'cnpj',
    cpf: 'cpf',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerPjDataScalarFieldEnum = (typeof CustomerPjDataScalarFieldEnum)[keyof typeof CustomerPjDataScalarFieldEnum]


  export const DependentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    holderId: 'holderId',
    name: 'name',
    relationship: 'relationship',
    employeeDependentId: 'employeeDependentId',
    cpf: 'cpf',
    birthDate: 'birthDate',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DependentScalarFieldEnum = (typeof DependentScalarFieldEnum)[keyof typeof DependentScalarFieldEnum]


  export const EmployeeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    holderId: 'holderId',
    name: 'name',
    position: 'position',
    cpf: 'cpf',
    birthDate: 'birthDate',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    dueDate: 'dueDate',
    amount: 'amount',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    externalId: 'externalId',
    name: 'name',
    contractText: 'contractText',
    signupFee: 'signupFee',
    allowedPaymentTypes: 'allowedPaymentTypes',
    maxInstallments: 'maxInstallments',
    prices: 'prices',
    additionalInfo: 'additionalInfo',
    isShowingInApp: 'isShowingInApp',
    hasTelemedicine: 'hasTelemedicine',
    maxDependents: 'maxDependents',
    pricePerEmployee: 'pricePerEmployee',
    pricePerDependent: 'pricePerDependent',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    planId: 'planId',
    status: 'status',
    startDate: 'startDate',
    endDate: 'endDate',
    firstPayDayDate: 'firstPayDayDate',
    paymentType: 'paymentType',
    installments: 'installments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'CommissionType'
   */
  export type EnumCommissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionType'>
    


  /**
   * Reference to a field of type 'CommissionType[]'
   */
  export type ListEnumCommissionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommissionType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'CustomerStatus'
   */
  export type EnumCustomerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CustomerStatus'>
    


  /**
   * Reference to a field of type 'CustomerStatus[]'
   */
  export type ListEnumCustomerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CustomerStatus[]'>
    


  /**
   * Reference to a field of type 'CustomerType'
   */
  export type EnumCustomerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CustomerType'>
    


  /**
   * Reference to a field of type 'CustomerType[]'
   */
  export type ListEnumCustomerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CustomerType[]'>
    


  /**
   * Reference to a field of type 'InvoiceStatus'
   */
  export type EnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus'>
    


  /**
   * Reference to a field of type 'InvoiceStatus[]'
   */
  export type ListEnumInvoiceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvoiceStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'UserType[]'
   */
  export type ListEnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AffiliateWhereInput = {
    AND?: AffiliateWhereInput | AffiliateWhereInput[]
    OR?: AffiliateWhereInput[]
    NOT?: AffiliateWhereInput | AffiliateWhereInput[]
    id?: StringFilter<"Affiliate"> | string
    userId?: StringFilter<"Affiliate"> | string
    code?: StringFilter<"Affiliate"> | string
    name?: StringFilter<"Affiliate"> | string
    commissionType?: EnumCommissionTypeFilter<"Affiliate"> | $Enums.CommissionType
    commissionValue?: IntFilter<"Affiliate"> | number
    cpf?: StringFilter<"Affiliate"> | string
    phone?: StringNullableFilter<"Affiliate"> | string | null
    email?: StringNullableFilter<"Affiliate"> | string | null
    isActive?: BoolFilter<"Affiliate"> | boolean
    createdAt?: DateTimeFilter<"Affiliate"> | Date | string
    updatedAt?: DateTimeFilter<"Affiliate"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    AffiliateCustomer?: AffiliateCustomerListRelationFilter
    Customer?: CustomerListRelationFilter
  }

  export type AffiliateOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    commissionType?: SortOrder
    commissionValue?: SortOrder
    cpf?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
    AffiliateCustomer?: AffiliateCustomerOrderByRelationAggregateInput
    Customer?: CustomerOrderByRelationAggregateInput
  }

  export type AffiliateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    code?: string
    AND?: AffiliateWhereInput | AffiliateWhereInput[]
    OR?: AffiliateWhereInput[]
    NOT?: AffiliateWhereInput | AffiliateWhereInput[]
    name?: StringFilter<"Affiliate"> | string
    commissionType?: EnumCommissionTypeFilter<"Affiliate"> | $Enums.CommissionType
    commissionValue?: IntFilter<"Affiliate"> | number
    cpf?: StringFilter<"Affiliate"> | string
    phone?: StringNullableFilter<"Affiliate"> | string | null
    email?: StringNullableFilter<"Affiliate"> | string | null
    isActive?: BoolFilter<"Affiliate"> | boolean
    createdAt?: DateTimeFilter<"Affiliate"> | Date | string
    updatedAt?: DateTimeFilter<"Affiliate"> | Date | string
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    AffiliateCustomer?: AffiliateCustomerListRelationFilter
    Customer?: CustomerListRelationFilter
  }, "id" | "userId" | "code">

  export type AffiliateOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    commissionType?: SortOrder
    commissionValue?: SortOrder
    cpf?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AffiliateCountOrderByAggregateInput
    _avg?: AffiliateAvgOrderByAggregateInput
    _max?: AffiliateMaxOrderByAggregateInput
    _min?: AffiliateMinOrderByAggregateInput
    _sum?: AffiliateSumOrderByAggregateInput
  }

  export type AffiliateScalarWhereWithAggregatesInput = {
    AND?: AffiliateScalarWhereWithAggregatesInput | AffiliateScalarWhereWithAggregatesInput[]
    OR?: AffiliateScalarWhereWithAggregatesInput[]
    NOT?: AffiliateScalarWhereWithAggregatesInput | AffiliateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Affiliate"> | string
    userId?: StringWithAggregatesFilter<"Affiliate"> | string
    code?: StringWithAggregatesFilter<"Affiliate"> | string
    name?: StringWithAggregatesFilter<"Affiliate"> | string
    commissionType?: EnumCommissionTypeWithAggregatesFilter<"Affiliate"> | $Enums.CommissionType
    commissionValue?: IntWithAggregatesFilter<"Affiliate"> | number
    cpf?: StringWithAggregatesFilter<"Affiliate"> | string
    phone?: StringNullableWithAggregatesFilter<"Affiliate"> | string | null
    email?: StringNullableWithAggregatesFilter<"Affiliate"> | string | null
    isActive?: BoolWithAggregatesFilter<"Affiliate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Affiliate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Affiliate"> | Date | string
  }

  export type AffiliateCustomerWhereInput = {
    AND?: AffiliateCustomerWhereInput | AffiliateCustomerWhereInput[]
    OR?: AffiliateCustomerWhereInput[]
    NOT?: AffiliateCustomerWhereInput | AffiliateCustomerWhereInput[]
    id?: StringFilter<"AffiliateCustomer"> | string
    customerId?: StringFilter<"AffiliateCustomer"> | string
    affiliateId?: StringFilter<"AffiliateCustomer"> | string
    createdAt?: DateTimeFilter<"AffiliateCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"AffiliateCustomer"> | Date | string
    Affiliate?: XOR<AffiliateScalarRelationFilter, AffiliateWhereInput>
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type AffiliateCustomerOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    affiliateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Affiliate?: AffiliateOrderByWithRelationInput
    Customer?: CustomerOrderByWithRelationInput
  }

  export type AffiliateCustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AffiliateCustomerWhereInput | AffiliateCustomerWhereInput[]
    OR?: AffiliateCustomerWhereInput[]
    NOT?: AffiliateCustomerWhereInput | AffiliateCustomerWhereInput[]
    customerId?: StringFilter<"AffiliateCustomer"> | string
    affiliateId?: StringFilter<"AffiliateCustomer"> | string
    createdAt?: DateTimeFilter<"AffiliateCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"AffiliateCustomer"> | Date | string
    Affiliate?: XOR<AffiliateScalarRelationFilter, AffiliateWhereInput>
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id">

  export type AffiliateCustomerOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    affiliateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AffiliateCustomerCountOrderByAggregateInput
    _max?: AffiliateCustomerMaxOrderByAggregateInput
    _min?: AffiliateCustomerMinOrderByAggregateInput
  }

  export type AffiliateCustomerScalarWhereWithAggregatesInput = {
    AND?: AffiliateCustomerScalarWhereWithAggregatesInput | AffiliateCustomerScalarWhereWithAggregatesInput[]
    OR?: AffiliateCustomerScalarWhereWithAggregatesInput[]
    NOT?: AffiliateCustomerScalarWhereWithAggregatesInput | AffiliateCustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AffiliateCustomer"> | string
    customerId?: StringWithAggregatesFilter<"AffiliateCustomer"> | string
    affiliateId?: StringWithAggregatesFilter<"AffiliateCustomer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AffiliateCustomer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AffiliateCustomer"> | Date | string
  }

  export type CreditCardWhereInput = {
    AND?: CreditCardWhereInput | CreditCardWhereInput[]
    OR?: CreditCardWhereInput[]
    NOT?: CreditCardWhereInput | CreditCardWhereInput[]
    id?: StringFilter<"CreditCard"> | string
    clientId?: StringFilter<"CreditCard"> | string
    token?: StringFilter<"CreditCard"> | string
    last4?: StringFilter<"CreditCard"> | string
    brand?: StringFilter<"CreditCard"> | string
    createdAt?: DateTimeFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeFilter<"CreditCard"> | Date | string
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type CreditCardOrderByWithRelationInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Customer?: CustomerOrderByWithRelationInput
  }

  export type CreditCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CreditCardWhereInput | CreditCardWhereInput[]
    OR?: CreditCardWhereInput[]
    NOT?: CreditCardWhereInput | CreditCardWhereInput[]
    clientId?: StringFilter<"CreditCard"> | string
    token?: StringFilter<"CreditCard"> | string
    last4?: StringFilter<"CreditCard"> | string
    brand?: StringFilter<"CreditCard"> | string
    createdAt?: DateTimeFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeFilter<"CreditCard"> | Date | string
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id">

  export type CreditCardOrderByWithAggregationInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CreditCardCountOrderByAggregateInput
    _max?: CreditCardMaxOrderByAggregateInput
    _min?: CreditCardMinOrderByAggregateInput
  }

  export type CreditCardScalarWhereWithAggregatesInput = {
    AND?: CreditCardScalarWhereWithAggregatesInput | CreditCardScalarWhereWithAggregatesInput[]
    OR?: CreditCardScalarWhereWithAggregatesInput[]
    NOT?: CreditCardScalarWhereWithAggregatesInput | CreditCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CreditCard"> | string
    clientId?: StringWithAggregatesFilter<"CreditCard"> | string
    token?: StringWithAggregatesFilter<"CreditCard"> | string
    last4?: StringWithAggregatesFilter<"CreditCard"> | string
    brand?: StringWithAggregatesFilter<"CreditCard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CreditCard"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    userId?: StringFilter<"Customer"> | string
    externalId?: StringNullableFilter<"Customer"> | string | null
    name?: StringFilter<"Customer"> | string
    document?: StringFilter<"Customer"> | string
    observation?: StringNullableFilter<"Customer"> | string | null
    mainPaymentMethod?: EnumPaymentTypeFilter<"Customer"> | $Enums.PaymentType
    status?: EnumCustomerStatusFilter<"Customer"> | $Enums.CustomerStatus
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    adherenceDate?: DateTimeFilter<"Customer"> | Date | string
    renovationDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    expireDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    clientType?: EnumCustomerTypeFilter<"Customer"> | $Enums.CustomerType
    affiliateCode?: StringNullableFilter<"Customer"> | string | null
    planId?: StringNullableFilter<"Customer"> | string | null
    cep?: IntNullableFilter<"Customer"> | number | null
    address?: StringNullableFilter<"Customer"> | string | null
    number?: IntNullableFilter<"Customer"> | number | null
    complement?: StringNullableFilter<"Customer"> | string | null
    district?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    state?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    AffiliateCustomer?: AffiliateCustomerListRelationFilter
    CreditCard?: CreditCardListRelationFilter
    Affiliate?: XOR<AffiliateNullableScalarRelationFilter, AffiliateWhereInput> | null
    Plan?: XOR<PlanNullableScalarRelationFilter, PlanWhereInput> | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    CustomerCard?: XOR<CustomerCardNullableScalarRelationFilter, CustomerCardWhereInput> | null
    CustomerPfData?: XOR<CustomerPfDataNullableScalarRelationFilter, CustomerPfDataWhereInput> | null
    CustomerPjData?: XOR<CustomerPjDataNullableScalarRelationFilter, CustomerPjDataWhereInput> | null
    Dependent?: DependentListRelationFilter
    Employee?: EmployeeListRelationFilter
    Subscription?: SubscriptionListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    externalId?: SortOrderInput | SortOrder
    name?: SortOrder
    document?: SortOrder
    observation?: SortOrderInput | SortOrder
    mainPaymentMethod?: SortOrder
    status?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    adherenceDate?: SortOrder
    renovationDate?: SortOrderInput | SortOrder
    expireDate?: SortOrderInput | SortOrder
    clientType?: SortOrder
    affiliateCode?: SortOrderInput | SortOrder
    planId?: SortOrderInput | SortOrder
    cep?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    complement?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    AffiliateCustomer?: AffiliateCustomerOrderByRelationAggregateInput
    CreditCard?: CreditCardOrderByRelationAggregateInput
    Affiliate?: AffiliateOrderByWithRelationInput
    Plan?: PlanOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
    CustomerCard?: CustomerCardOrderByWithRelationInput
    CustomerPfData?: CustomerPfDataOrderByWithRelationInput
    CustomerPjData?: CustomerPjDataOrderByWithRelationInput
    Dependent?: DependentOrderByRelationAggregateInput
    Employee?: EmployeeOrderByRelationAggregateInput
    Subscription?: SubscriptionOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    externalId?: StringNullableFilter<"Customer"> | string | null
    name?: StringFilter<"Customer"> | string
    document?: StringFilter<"Customer"> | string
    observation?: StringNullableFilter<"Customer"> | string | null
    mainPaymentMethod?: EnumPaymentTypeFilter<"Customer"> | $Enums.PaymentType
    status?: EnumCustomerStatusFilter<"Customer"> | $Enums.CustomerStatus
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    adherenceDate?: DateTimeFilter<"Customer"> | Date | string
    renovationDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    expireDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    clientType?: EnumCustomerTypeFilter<"Customer"> | $Enums.CustomerType
    affiliateCode?: StringNullableFilter<"Customer"> | string | null
    planId?: StringNullableFilter<"Customer"> | string | null
    cep?: IntNullableFilter<"Customer"> | number | null
    address?: StringNullableFilter<"Customer"> | string | null
    number?: IntNullableFilter<"Customer"> | number | null
    complement?: StringNullableFilter<"Customer"> | string | null
    district?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    state?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    AffiliateCustomer?: AffiliateCustomerListRelationFilter
    CreditCard?: CreditCardListRelationFilter
    Affiliate?: XOR<AffiliateNullableScalarRelationFilter, AffiliateWhereInput> | null
    Plan?: XOR<PlanNullableScalarRelationFilter, PlanWhereInput> | null
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
    CustomerCard?: XOR<CustomerCardNullableScalarRelationFilter, CustomerCardWhereInput> | null
    CustomerPfData?: XOR<CustomerPfDataNullableScalarRelationFilter, CustomerPfDataWhereInput> | null
    CustomerPjData?: XOR<CustomerPjDataNullableScalarRelationFilter, CustomerPjDataWhereInput> | null
    Dependent?: DependentListRelationFilter
    Employee?: EmployeeListRelationFilter
    Subscription?: SubscriptionListRelationFilter
  }, "id" | "userId">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    externalId?: SortOrderInput | SortOrder
    name?: SortOrder
    document?: SortOrder
    observation?: SortOrderInput | SortOrder
    mainPaymentMethod?: SortOrder
    status?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    adherenceDate?: SortOrder
    renovationDate?: SortOrderInput | SortOrder
    expireDate?: SortOrderInput | SortOrder
    clientType?: SortOrder
    affiliateCode?: SortOrderInput | SortOrder
    planId?: SortOrderInput | SortOrder
    cep?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    complement?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    userId?: StringWithAggregatesFilter<"Customer"> | string
    externalId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    name?: StringWithAggregatesFilter<"Customer"> | string
    document?: StringWithAggregatesFilter<"Customer"> | string
    observation?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    mainPaymentMethod?: EnumPaymentTypeWithAggregatesFilter<"Customer"> | $Enums.PaymentType
    status?: EnumCustomerStatusWithAggregatesFilter<"Customer"> | $Enums.CustomerStatus
    email?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    adherenceDate?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    renovationDate?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    expireDate?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    clientType?: EnumCustomerTypeWithAggregatesFilter<"Customer"> | $Enums.CustomerType
    affiliateCode?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    planId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    cep?: IntNullableWithAggregatesFilter<"Customer"> | number | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    number?: IntNullableWithAggregatesFilter<"Customer"> | number | null
    complement?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    district?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    city?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    state?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    isActive?: BoolWithAggregatesFilter<"Customer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type CustomerCardWhereInput = {
    AND?: CustomerCardWhereInput | CustomerCardWhereInput[]
    OR?: CustomerCardWhereInput[]
    NOT?: CustomerCardWhereInput | CustomerCardWhereInput[]
    id?: StringFilter<"CustomerCard"> | string
    cardNumber?: StringFilter<"CustomerCard"> | string
    expireDate?: DateTimeFilter<"CustomerCard"> | Date | string
    customerId?: StringNullableFilter<"CustomerCard"> | string | null
    dependentId?: StringNullableFilter<"CustomerCard"> | string | null
    employeeId?: StringNullableFilter<"CustomerCard"> | string | null
    createdAt?: DateTimeFilter<"CustomerCard"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerCard"> | Date | string
    Customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    Dependent?: XOR<DependentNullableScalarRelationFilter, DependentWhereInput> | null
    Employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }

  export type CustomerCardOrderByWithRelationInput = {
    id?: SortOrder
    cardNumber?: SortOrder
    expireDate?: SortOrder
    customerId?: SortOrderInput | SortOrder
    dependentId?: SortOrderInput | SortOrder
    employeeId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Customer?: CustomerOrderByWithRelationInput
    Dependent?: DependentOrderByWithRelationInput
    Employee?: EmployeeOrderByWithRelationInput
  }

  export type CustomerCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cardNumber?: string
    customerId?: string
    dependentId?: string
    employeeId?: string
    AND?: CustomerCardWhereInput | CustomerCardWhereInput[]
    OR?: CustomerCardWhereInput[]
    NOT?: CustomerCardWhereInput | CustomerCardWhereInput[]
    expireDate?: DateTimeFilter<"CustomerCard"> | Date | string
    createdAt?: DateTimeFilter<"CustomerCard"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerCard"> | Date | string
    Customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    Dependent?: XOR<DependentNullableScalarRelationFilter, DependentWhereInput> | null
    Employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }, "id" | "cardNumber" | "customerId" | "dependentId" | "employeeId">

  export type CustomerCardOrderByWithAggregationInput = {
    id?: SortOrder
    cardNumber?: SortOrder
    expireDate?: SortOrder
    customerId?: SortOrderInput | SortOrder
    dependentId?: SortOrderInput | SortOrder
    employeeId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCardCountOrderByAggregateInput
    _max?: CustomerCardMaxOrderByAggregateInput
    _min?: CustomerCardMinOrderByAggregateInput
  }

  export type CustomerCardScalarWhereWithAggregatesInput = {
    AND?: CustomerCardScalarWhereWithAggregatesInput | CustomerCardScalarWhereWithAggregatesInput[]
    OR?: CustomerCardScalarWhereWithAggregatesInput[]
    NOT?: CustomerCardScalarWhereWithAggregatesInput | CustomerCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerCard"> | string
    cardNumber?: StringWithAggregatesFilter<"CustomerCard"> | string
    expireDate?: DateTimeWithAggregatesFilter<"CustomerCard"> | Date | string
    customerId?: StringNullableWithAggregatesFilter<"CustomerCard"> | string | null
    dependentId?: StringNullableWithAggregatesFilter<"CustomerCard"> | string | null
    employeeId?: StringNullableWithAggregatesFilter<"CustomerCard"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerCard"> | Date | string
  }

  export type CustomerPfDataWhereInput = {
    AND?: CustomerPfDataWhereInput | CustomerPfDataWhereInput[]
    OR?: CustomerPfDataWhereInput[]
    NOT?: CustomerPfDataWhereInput | CustomerPfDataWhereInput[]
    id?: StringFilter<"CustomerPfData"> | string
    customerId?: StringFilter<"CustomerPfData"> | string
    birthDate?: DateTimeFilter<"CustomerPfData"> | Date | string
    rg?: StringNullableFilter<"CustomerPfData"> | string | null
    cpf?: StringFilter<"CustomerPfData"> | string
    sex?: StringNullableFilter<"CustomerPfData"> | string | null
    civilState?: StringNullableFilter<"CustomerPfData"> | string | null
    job?: StringNullableFilter<"CustomerPfData"> | string | null
    createdAt?: DateTimeFilter<"CustomerPfData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPfData"> | Date | string
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type CustomerPfDataOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    birthDate?: SortOrder
    rg?: SortOrderInput | SortOrder
    cpf?: SortOrder
    sex?: SortOrderInput | SortOrder
    civilState?: SortOrderInput | SortOrder
    job?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Customer?: CustomerOrderByWithRelationInput
  }

  export type CustomerPfDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    customerId?: string
    AND?: CustomerPfDataWhereInput | CustomerPfDataWhereInput[]
    OR?: CustomerPfDataWhereInput[]
    NOT?: CustomerPfDataWhereInput | CustomerPfDataWhereInput[]
    birthDate?: DateTimeFilter<"CustomerPfData"> | Date | string
    rg?: StringNullableFilter<"CustomerPfData"> | string | null
    cpf?: StringFilter<"CustomerPfData"> | string
    sex?: StringNullableFilter<"CustomerPfData"> | string | null
    civilState?: StringNullableFilter<"CustomerPfData"> | string | null
    job?: StringNullableFilter<"CustomerPfData"> | string | null
    createdAt?: DateTimeFilter<"CustomerPfData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPfData"> | Date | string
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id" | "customerId">

  export type CustomerPfDataOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    birthDate?: SortOrder
    rg?: SortOrderInput | SortOrder
    cpf?: SortOrder
    sex?: SortOrderInput | SortOrder
    civilState?: SortOrderInput | SortOrder
    job?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerPfDataCountOrderByAggregateInput
    _max?: CustomerPfDataMaxOrderByAggregateInput
    _min?: CustomerPfDataMinOrderByAggregateInput
  }

  export type CustomerPfDataScalarWhereWithAggregatesInput = {
    AND?: CustomerPfDataScalarWhereWithAggregatesInput | CustomerPfDataScalarWhereWithAggregatesInput[]
    OR?: CustomerPfDataScalarWhereWithAggregatesInput[]
    NOT?: CustomerPfDataScalarWhereWithAggregatesInput | CustomerPfDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerPfData"> | string
    customerId?: StringWithAggregatesFilter<"CustomerPfData"> | string
    birthDate?: DateTimeWithAggregatesFilter<"CustomerPfData"> | Date | string
    rg?: StringNullableWithAggregatesFilter<"CustomerPfData"> | string | null
    cpf?: StringWithAggregatesFilter<"CustomerPfData"> | string
    sex?: StringNullableWithAggregatesFilter<"CustomerPfData"> | string | null
    civilState?: StringNullableWithAggregatesFilter<"CustomerPfData"> | string | null
    job?: StringNullableWithAggregatesFilter<"CustomerPfData"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerPfData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerPfData"> | Date | string
  }

  export type CustomerPjDataWhereInput = {
    AND?: CustomerPjDataWhereInput | CustomerPjDataWhereInput[]
    OR?: CustomerPjDataWhereInput[]
    NOT?: CustomerPjDataWhereInput | CustomerPjDataWhereInput[]
    id?: StringFilter<"CustomerPjData"> | string
    customerId?: StringFilter<"CustomerPjData"> | string
    representative?: StringNullableFilter<"CustomerPjData"> | string | null
    cnpj?: StringFilter<"CustomerPjData"> | string
    cpf?: StringNullableFilter<"CustomerPjData"> | string | null
    createdAt?: DateTimeFilter<"CustomerPjData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPjData"> | Date | string
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type CustomerPjDataOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    representative?: SortOrderInput | SortOrder
    cnpj?: SortOrder
    cpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Customer?: CustomerOrderByWithRelationInput
  }

  export type CustomerPjDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    customerId?: string
    AND?: CustomerPjDataWhereInput | CustomerPjDataWhereInput[]
    OR?: CustomerPjDataWhereInput[]
    NOT?: CustomerPjDataWhereInput | CustomerPjDataWhereInput[]
    representative?: StringNullableFilter<"CustomerPjData"> | string | null
    cnpj?: StringFilter<"CustomerPjData"> | string
    cpf?: StringNullableFilter<"CustomerPjData"> | string | null
    createdAt?: DateTimeFilter<"CustomerPjData"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerPjData"> | Date | string
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id" | "customerId">

  export type CustomerPjDataOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    representative?: SortOrderInput | SortOrder
    cnpj?: SortOrder
    cpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerPjDataCountOrderByAggregateInput
    _max?: CustomerPjDataMaxOrderByAggregateInput
    _min?: CustomerPjDataMinOrderByAggregateInput
  }

  export type CustomerPjDataScalarWhereWithAggregatesInput = {
    AND?: CustomerPjDataScalarWhereWithAggregatesInput | CustomerPjDataScalarWhereWithAggregatesInput[]
    OR?: CustomerPjDataScalarWhereWithAggregatesInput[]
    NOT?: CustomerPjDataScalarWhereWithAggregatesInput | CustomerPjDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerPjData"> | string
    customerId?: StringWithAggregatesFilter<"CustomerPjData"> | string
    representative?: StringNullableWithAggregatesFilter<"CustomerPjData"> | string | null
    cnpj?: StringWithAggregatesFilter<"CustomerPjData"> | string
    cpf?: StringNullableWithAggregatesFilter<"CustomerPjData"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerPjData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerPjData"> | Date | string
  }

  export type DependentWhereInput = {
    AND?: DependentWhereInput | DependentWhereInput[]
    OR?: DependentWhereInput[]
    NOT?: DependentWhereInput | DependentWhereInput[]
    id?: StringFilter<"Dependent"> | string
    userId?: StringFilter<"Dependent"> | string
    holderId?: StringFilter<"Dependent"> | string
    name?: StringFilter<"Dependent"> | string
    relationship?: StringNullableFilter<"Dependent"> | string | null
    employeeDependentId?: StringNullableFilter<"Dependent"> | string | null
    cpf?: StringNullableFilter<"Dependent"> | string | null
    birthDate?: DateTimeFilter<"Dependent"> | Date | string
    isActive?: BoolFilter<"Dependent"> | boolean
    createdAt?: DateTimeFilter<"Dependent"> | Date | string
    updatedAt?: DateTimeFilter<"Dependent"> | Date | string
    CustomerCard?: XOR<CustomerCardNullableScalarRelationFilter, CustomerCardWhereInput> | null
    Employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DependentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    relationship?: SortOrderInput | SortOrder
    employeeDependentId?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    CustomerCard?: CustomerCardOrderByWithRelationInput
    Employee?: EmployeeOrderByWithRelationInput
    Customer?: CustomerOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type DependentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: DependentWhereInput | DependentWhereInput[]
    OR?: DependentWhereInput[]
    NOT?: DependentWhereInput | DependentWhereInput[]
    holderId?: StringFilter<"Dependent"> | string
    name?: StringFilter<"Dependent"> | string
    relationship?: StringNullableFilter<"Dependent"> | string | null
    employeeDependentId?: StringNullableFilter<"Dependent"> | string | null
    cpf?: StringNullableFilter<"Dependent"> | string | null
    birthDate?: DateTimeFilter<"Dependent"> | Date | string
    isActive?: BoolFilter<"Dependent"> | boolean
    createdAt?: DateTimeFilter<"Dependent"> | Date | string
    updatedAt?: DateTimeFilter<"Dependent"> | Date | string
    CustomerCard?: XOR<CustomerCardNullableScalarRelationFilter, CustomerCardWhereInput> | null
    Employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type DependentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    relationship?: SortOrderInput | SortOrder
    employeeDependentId?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DependentCountOrderByAggregateInput
    _max?: DependentMaxOrderByAggregateInput
    _min?: DependentMinOrderByAggregateInput
  }

  export type DependentScalarWhereWithAggregatesInput = {
    AND?: DependentScalarWhereWithAggregatesInput | DependentScalarWhereWithAggregatesInput[]
    OR?: DependentScalarWhereWithAggregatesInput[]
    NOT?: DependentScalarWhereWithAggregatesInput | DependentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Dependent"> | string
    userId?: StringWithAggregatesFilter<"Dependent"> | string
    holderId?: StringWithAggregatesFilter<"Dependent"> | string
    name?: StringWithAggregatesFilter<"Dependent"> | string
    relationship?: StringNullableWithAggregatesFilter<"Dependent"> | string | null
    employeeDependentId?: StringNullableWithAggregatesFilter<"Dependent"> | string | null
    cpf?: StringNullableWithAggregatesFilter<"Dependent"> | string | null
    birthDate?: DateTimeWithAggregatesFilter<"Dependent"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Dependent"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Dependent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Dependent"> | Date | string
  }

  export type EmployeeWhereInput = {
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    id?: StringFilter<"Employee"> | string
    userId?: StringFilter<"Employee"> | string
    holderId?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    position?: StringNullableFilter<"Employee"> | string | null
    cpf?: StringNullableFilter<"Employee"> | string | null
    birthDate?: DateTimeFilter<"Employee"> | Date | string
    isActive?: BoolFilter<"Employee"> | boolean
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    CustomerCard?: XOR<CustomerCardNullableScalarRelationFilter, CustomerCardWhereInput> | null
    Dependent?: DependentListRelationFilter
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmployeeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    position?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    CustomerCard?: CustomerCardOrderByWithRelationInput
    Dependent?: DependentOrderByRelationAggregateInput
    Customer?: CustomerOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type EmployeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: EmployeeWhereInput | EmployeeWhereInput[]
    OR?: EmployeeWhereInput[]
    NOT?: EmployeeWhereInput | EmployeeWhereInput[]
    holderId?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    position?: StringNullableFilter<"Employee"> | string | null
    cpf?: StringNullableFilter<"Employee"> | string | null
    birthDate?: DateTimeFilter<"Employee"> | Date | string
    isActive?: BoolFilter<"Employee"> | boolean
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
    CustomerCard?: XOR<CustomerCardNullableScalarRelationFilter, CustomerCardWhereInput> | null
    Dependent?: DependentListRelationFilter
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    User?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type EmployeeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    position?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployeeCountOrderByAggregateInput
    _max?: EmployeeMaxOrderByAggregateInput
    _min?: EmployeeMinOrderByAggregateInput
  }

  export type EmployeeScalarWhereWithAggregatesInput = {
    AND?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    OR?: EmployeeScalarWhereWithAggregatesInput[]
    NOT?: EmployeeScalarWhereWithAggregatesInput | EmployeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Employee"> | string
    userId?: StringWithAggregatesFilter<"Employee"> | string
    holderId?: StringWithAggregatesFilter<"Employee"> | string
    name?: StringWithAggregatesFilter<"Employee"> | string
    position?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    cpf?: StringNullableWithAggregatesFilter<"Employee"> | string | null
    birthDate?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Employee"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employee"> | Date | string
  }

  export type InvoiceWhereInput = {
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    id?: StringFilter<"Invoice"> | string
    subscriptionId?: StringFilter<"Invoice"> | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    amount?: IntFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    Subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
  }

  export type InvoiceOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Subscription?: SubscriptionOrderByWithRelationInput
  }

  export type InvoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvoiceWhereInput | InvoiceWhereInput[]
    OR?: InvoiceWhereInput[]
    NOT?: InvoiceWhereInput | InvoiceWhereInput[]
    subscriptionId?: StringFilter<"Invoice"> | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    amount?: IntFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
    Subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
  }, "id">

  export type InvoiceOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InvoiceCountOrderByAggregateInput
    _avg?: InvoiceAvgOrderByAggregateInput
    _max?: InvoiceMaxOrderByAggregateInput
    _min?: InvoiceMinOrderByAggregateInput
    _sum?: InvoiceSumOrderByAggregateInput
  }

  export type InvoiceScalarWhereWithAggregatesInput = {
    AND?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    OR?: InvoiceScalarWhereWithAggregatesInput[]
    NOT?: InvoiceScalarWhereWithAggregatesInput | InvoiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invoice"> | string
    subscriptionId?: StringWithAggregatesFilter<"Invoice"> | string
    dueDate?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    amount?: IntWithAggregatesFilter<"Invoice"> | number
    status?: EnumInvoiceStatusWithAggregatesFilter<"Invoice"> | $Enums.InvoiceStatus
    createdAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invoice"> | Date | string
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    id?: StringFilter<"Plan"> | string
    externalId?: StringNullableFilter<"Plan"> | string | null
    name?: StringFilter<"Plan"> | string
    contractText?: StringFilter<"Plan"> | string
    signupFee?: IntFilter<"Plan"> | number
    allowedPaymentTypes?: EnumPaymentTypeNullableListFilter<"Plan">
    maxInstallments?: IntFilter<"Plan"> | number
    prices?: JsonFilter<"Plan">
    additionalInfo?: StringNullableFilter<"Plan"> | string | null
    isShowingInApp?: BoolFilter<"Plan"> | boolean
    hasTelemedicine?: BoolFilter<"Plan"> | boolean
    maxDependents?: IntNullableFilter<"Plan"> | number | null
    pricePerEmployee?: IntNullableFilter<"Plan"> | number | null
    pricePerDependent?: IntNullableFilter<"Plan"> | number | null
    isActive?: BoolFilter<"Plan"> | boolean
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    Customer?: CustomerListRelationFilter
    Subscription?: SubscriptionListRelationFilter
  }

  export type PlanOrderByWithRelationInput = {
    id?: SortOrder
    externalId?: SortOrderInput | SortOrder
    name?: SortOrder
    contractText?: SortOrder
    signupFee?: SortOrder
    allowedPaymentTypes?: SortOrder
    maxInstallments?: SortOrder
    prices?: SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    isShowingInApp?: SortOrder
    hasTelemedicine?: SortOrder
    maxDependents?: SortOrderInput | SortOrder
    pricePerEmployee?: SortOrderInput | SortOrder
    pricePerDependent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Customer?: CustomerOrderByRelationAggregateInput
    Subscription?: SubscriptionOrderByRelationAggregateInput
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    externalId?: StringNullableFilter<"Plan"> | string | null
    name?: StringFilter<"Plan"> | string
    contractText?: StringFilter<"Plan"> | string
    signupFee?: IntFilter<"Plan"> | number
    allowedPaymentTypes?: EnumPaymentTypeNullableListFilter<"Plan">
    maxInstallments?: IntFilter<"Plan"> | number
    prices?: JsonFilter<"Plan">
    additionalInfo?: StringNullableFilter<"Plan"> | string | null
    isShowingInApp?: BoolFilter<"Plan"> | boolean
    hasTelemedicine?: BoolFilter<"Plan"> | boolean
    maxDependents?: IntNullableFilter<"Plan"> | number | null
    pricePerEmployee?: IntNullableFilter<"Plan"> | number | null
    pricePerDependent?: IntNullableFilter<"Plan"> | number | null
    isActive?: BoolFilter<"Plan"> | boolean
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    Customer?: CustomerListRelationFilter
    Subscription?: SubscriptionListRelationFilter
  }, "id">

  export type PlanOrderByWithAggregationInput = {
    id?: SortOrder
    externalId?: SortOrderInput | SortOrder
    name?: SortOrder
    contractText?: SortOrder
    signupFee?: SortOrder
    allowedPaymentTypes?: SortOrder
    maxInstallments?: SortOrder
    prices?: SortOrder
    additionalInfo?: SortOrderInput | SortOrder
    isShowingInApp?: SortOrder
    hasTelemedicine?: SortOrder
    maxDependents?: SortOrderInput | SortOrder
    pricePerEmployee?: SortOrderInput | SortOrder
    pricePerDependent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlanCountOrderByAggregateInput
    _avg?: PlanAvgOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
    _sum?: PlanSumOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plan"> | string
    externalId?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    name?: StringWithAggregatesFilter<"Plan"> | string
    contractText?: StringWithAggregatesFilter<"Plan"> | string
    signupFee?: IntWithAggregatesFilter<"Plan"> | number
    allowedPaymentTypes?: EnumPaymentTypeNullableListFilter<"Plan">
    maxInstallments?: IntWithAggregatesFilter<"Plan"> | number
    prices?: JsonWithAggregatesFilter<"Plan">
    additionalInfo?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    isShowingInApp?: BoolWithAggregatesFilter<"Plan"> | boolean
    hasTelemedicine?: BoolWithAggregatesFilter<"Plan"> | boolean
    maxDependents?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    pricePerEmployee?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    pricePerDependent?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    isActive?: BoolWithAggregatesFilter<"Plan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    customerId?: StringFilter<"Subscription"> | string
    planId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    firstPayDayDate?: DateTimeFilter<"Subscription"> | Date | string
    paymentType?: EnumPaymentTypeFilter<"Subscription"> | $Enums.PaymentType
    installments?: IntFilter<"Subscription"> | number
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    Invoice?: InvoiceListRelationFilter
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    Plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    firstPayDayDate?: SortOrder
    paymentType?: SortOrder
    installments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Invoice?: InvoiceOrderByRelationAggregateInput
    Customer?: CustomerOrderByWithRelationInput
    Plan?: PlanOrderByWithRelationInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    customerId?: StringFilter<"Subscription"> | string
    planId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    firstPayDayDate?: DateTimeFilter<"Subscription"> | Date | string
    paymentType?: EnumPaymentTypeFilter<"Subscription"> | $Enums.PaymentType
    installments?: IntFilter<"Subscription"> | number
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    Invoice?: InvoiceListRelationFilter
    Customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    Plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
  }, "id">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    firstPayDayDate?: SortOrder
    paymentType?: SortOrder
    installments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _avg?: SubscriptionAvgOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
    _sum?: SubscriptionSumOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    customerId?: StringWithAggregatesFilter<"Subscription"> | string
    planId?: StringWithAggregatesFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusWithAggregatesFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    firstPayDayDate?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    paymentType?: EnumPaymentTypeWithAggregatesFilter<"Subscription"> | $Enums.PaymentType
    installments?: IntWithAggregatesFilter<"Subscription"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    type?: EnumUserTypeFilter<"User"> | $Enums.UserType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Affiliate?: XOR<AffiliateNullableScalarRelationFilter, AffiliateWhereInput> | null
    Customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    Dependent?: XOR<DependentNullableScalarRelationFilter, DependentWhereInput> | null
    Employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Affiliate?: AffiliateOrderByWithRelationInput
    Customer?: CustomerOrderByWithRelationInput
    Dependent?: DependentOrderByWithRelationInput
    Employee?: EmployeeOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    type?: EnumUserTypeFilter<"User"> | $Enums.UserType
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    Affiliate?: XOR<AffiliateNullableScalarRelationFilter, AffiliateWhereInput> | null
    Customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
    Dependent?: XOR<DependentNullableScalarRelationFilter, DependentWhereInput> | null
    Employee?: XOR<EmployeeNullableScalarRelationFilter, EmployeeWhereInput> | null
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    type?: EnumUserTypeWithAggregatesFilter<"User"> | $Enums.UserType
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AffiliateCreateInput = {
    id: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutAffiliateInput
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutAffiliateInput
    Customer?: CustomerCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateUncheckedCreateInput = {
    id: string
    userId: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutAffiliateInput
    Customer?: CustomerUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAffiliateNestedInput
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutAffiliateNestedInput
    Customer?: CustomerUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutAffiliateNestedInput
    Customer?: CustomerUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateCreateManyInput = {
    id: string
    userId: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateCustomerCreateInput = {
    id: string
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate: AffiliateCreateNestedOneWithoutAffiliateCustomerInput
    Customer: CustomerCreateNestedOneWithoutAffiliateCustomerInput
  }

  export type AffiliateCustomerUncheckedCreateInput = {
    id: string
    customerId: string
    affiliateId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateCustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUpdateOneRequiredWithoutAffiliateCustomerNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutAffiliateCustomerNestedInput
  }

  export type AffiliateCustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    affiliateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateCustomerCreateManyInput = {
    id: string
    customerId: string
    affiliateId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateCustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateCustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    affiliateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardCreateInput = {
    id: string
    token: string
    last4: string
    brand: string
    createdAt?: Date | string
    updatedAt: Date | string
    Customer: CustomerCreateNestedOneWithoutCreditCardInput
  }

  export type CreditCardUncheckedCreateInput = {
    id: string
    clientId: string
    token: string
    last4: string
    brand: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneRequiredWithoutCreditCardNestedInput
  }

  export type CreditCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardCreateManyInput = {
    id: string
    clientId: string
    token: string
    last4: string
    brand: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clientId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCardCreateInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerCreateNestedOneWithoutCustomerCardInput
    Dependent?: DependentCreateNestedOneWithoutCustomerCardInput
    Employee?: EmployeeCreateNestedOneWithoutCustomerCardInput
  }

  export type CustomerCardUncheckedCreateInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    customerId?: string | null
    dependentId?: string | null
    employeeId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneWithoutCustomerCardNestedInput
    Dependent?: DependentUpdateOneWithoutCustomerCardNestedInput
    Employee?: EmployeeUpdateOneWithoutCustomerCardNestedInput
  }

  export type CustomerCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    dependentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCardCreateManyInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    customerId?: string | null
    dependentId?: string | null
    employeeId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    dependentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPfDataCreateInput = {
    id: string
    birthDate: Date | string
    rg?: string | null
    cpf: string
    sex?: string | null
    civilState?: string | null
    job?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Customer: CustomerCreateNestedOneWithoutCustomerPfDataInput
  }

  export type CustomerPfDataUncheckedCreateInput = {
    id: string
    customerId: string
    birthDate: Date | string
    rg?: string | null
    cpf: string
    sex?: string | null
    civilState?: string | null
    job?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPfDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    civilState?: NullableStringFieldUpdateOperationsInput | string | null
    job?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneRequiredWithoutCustomerPfDataNestedInput
  }

  export type CustomerPfDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    civilState?: NullableStringFieldUpdateOperationsInput | string | null
    job?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPfDataCreateManyInput = {
    id: string
    customerId: string
    birthDate: Date | string
    rg?: string | null
    cpf: string
    sex?: string | null
    civilState?: string | null
    job?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPfDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    civilState?: NullableStringFieldUpdateOperationsInput | string | null
    job?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPfDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    civilState?: NullableStringFieldUpdateOperationsInput | string | null
    job?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPjDataCreateInput = {
    id: string
    representative?: string | null
    cnpj: string
    cpf?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
    Customer: CustomerCreateNestedOneWithoutCustomerPjDataInput
  }

  export type CustomerPjDataUncheckedCreateInput = {
    id: string
    customerId: string
    representative?: string | null
    cnpj: string
    cpf?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPjDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    representative?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneRequiredWithoutCustomerPjDataNestedInput
  }

  export type CustomerPjDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    representative?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPjDataCreateManyInput = {
    id: string
    customerId: string
    representative?: string | null
    cnpj: string
    cpf?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPjDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    representative?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPjDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    representative?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DependentCreateInput = {
    id: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutDependentInput
    Employee?: EmployeeCreateNestedOneWithoutDependentInput
    Customer: CustomerCreateNestedOneWithoutDependentInput
    User: UserCreateNestedOneWithoutDependentInput
  }

  export type DependentUncheckedCreateInput = {
    id: string
    userId: string
    holderId: string
    name: string
    relationship?: string | null
    employeeDependentId?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutDependentInput
  }

  export type DependentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutDependentNestedInput
    Employee?: EmployeeUpdateOneWithoutDependentNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutDependentNestedInput
    User?: UserUpdateOneRequiredWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    employeeDependentId?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutDependentNestedInput
  }

  export type DependentCreateManyInput = {
    id: string
    userId: string
    holderId: string
    name: string
    relationship?: string | null
    employeeDependentId?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DependentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DependentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    employeeDependentId?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeCreateInput = {
    id: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutEmployeeInput
    Dependent?: DependentCreateNestedManyWithoutEmployeeInput
    Customer: CustomerCreateNestedOneWithoutEmployeeInput
    User: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateInput = {
    id: string
    userId: string
    holderId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutEmployeeInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutEmployeeNestedInput
    Dependent?: DependentUpdateManyWithoutEmployeeNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutEmployeeNestedInput
    User?: UserUpdateOneRequiredWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutEmployeeNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeCreateManyInput = {
    id: string
    userId: string
    holderId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type EmployeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateInput = {
    id: string
    dueDate: Date | string
    amount: number
    status: $Enums.InvoiceStatus
    createdAt?: Date | string
    updatedAt: Date | string
    Subscription: SubscriptionCreateNestedOneWithoutInvoiceInput
  }

  export type InvoiceUncheckedCreateInput = {
    id: string
    subscriptionId: string
    dueDate: Date | string
    amount: number
    status: $Enums.InvoiceStatus
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InvoiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Subscription?: SubscriptionUpdateOneRequiredWithoutInvoiceNestedInput
  }

  export type InvoiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateManyInput = {
    id: string
    subscriptionId: string
    dueDate: Date | string
    amount: number
    status: $Enums.InvoiceStatus
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InvoiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanCreateInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerCreateNestedManyWithoutPlanInput
    Subscription?: SubscriptionCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerUncheckedCreateNestedManyWithoutPlanInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateManyWithoutPlanNestedInput
    Subscription?: SubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUncheckedUpdateManyWithoutPlanNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanCreateManyInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type PlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutSubscriptionInput
    Customer: CustomerCreateNestedOneWithoutSubscriptionInput
    Plan: PlanCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id: string
    customerId: string
    planId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutSubscriptionNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutSubscriptionNestedInput
    Plan?: PlanUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionCreateManyInput = {
    id: string
    customerId: string
    planId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateCreateNestedOneWithoutUserInput
    Customer?: CustomerCreateNestedOneWithoutUserInput
    Dependent?: DependentCreateNestedOneWithoutUserInput
    Employee?: EmployeeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateUncheckedCreateNestedOneWithoutUserInput
    Customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    Dependent?: DependentUncheckedCreateNestedOneWithoutUserInput
    Employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUpdateOneWithoutUserNestedInput
    Customer?: CustomerUpdateOneWithoutUserNestedInput
    Dependent?: DependentUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUncheckedUpdateOneWithoutUserNestedInput
    Customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    Dependent?: DependentUncheckedUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumCommissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeFilter<$PrismaModel> | $Enums.CommissionType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AffiliateCustomerListRelationFilter = {
    every?: AffiliateCustomerWhereInput
    some?: AffiliateCustomerWhereInput
    none?: AffiliateCustomerWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: CustomerWhereInput
    some?: CustomerWhereInput
    none?: CustomerWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AffiliateCustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AffiliateCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    commissionType?: SortOrder
    commissionValue?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AffiliateAvgOrderByAggregateInput = {
    commissionValue?: SortOrder
  }

  export type AffiliateMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    commissionType?: SortOrder
    commissionValue?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AffiliateMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    name?: SortOrder
    commissionType?: SortOrder
    commissionValue?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AffiliateSumOrderByAggregateInput = {
    commissionValue?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumCommissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionTypeFilter<$PrismaModel>
    _max?: NestedEnumCommissionTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AffiliateScalarRelationFilter = {
    is?: AffiliateWhereInput
    isNot?: AffiliateWhereInput
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type AffiliateCustomerCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    affiliateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AffiliateCustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    affiliateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AffiliateCustomerMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    affiliateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditCardCountOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditCardMaxOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditCardMinOrderByAggregateInput = {
    id?: SortOrder
    clientId?: SortOrder
    token?: SortOrder
    last4?: SortOrder
    brand?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type EnumCustomerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusFilter<$PrismaModel> | $Enums.CustomerStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumCustomerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerType | EnumCustomerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerTypeFilter<$PrismaModel> | $Enums.CustomerType
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CreditCardListRelationFilter = {
    every?: CreditCardWhereInput
    some?: CreditCardWhereInput
    none?: CreditCardWhereInput
  }

  export type AffiliateNullableScalarRelationFilter = {
    is?: AffiliateWhereInput | null
    isNot?: AffiliateWhereInput | null
  }

  export type PlanNullableScalarRelationFilter = {
    is?: PlanWhereInput | null
    isNot?: PlanWhereInput | null
  }

  export type CustomerCardNullableScalarRelationFilter = {
    is?: CustomerCardWhereInput | null
    isNot?: CustomerCardWhereInput | null
  }

  export type CustomerPfDataNullableScalarRelationFilter = {
    is?: CustomerPfDataWhereInput | null
    isNot?: CustomerPfDataWhereInput | null
  }

  export type CustomerPjDataNullableScalarRelationFilter = {
    is?: CustomerPjDataWhereInput | null
    isNot?: CustomerPjDataWhereInput | null
  }

  export type DependentListRelationFilter = {
    every?: DependentWhereInput
    some?: DependentWhereInput
    none?: DependentWhereInput
  }

  export type EmployeeListRelationFilter = {
    every?: EmployeeWhereInput
    some?: EmployeeWhereInput
    none?: EmployeeWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type CreditCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DependentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    document?: SortOrder
    observation?: SortOrder
    mainPaymentMethod?: SortOrder
    status?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    adherenceDate?: SortOrder
    renovationDate?: SortOrder
    expireDate?: SortOrder
    clientType?: SortOrder
    affiliateCode?: SortOrder
    planId?: SortOrder
    cep?: SortOrder
    address?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    cep?: SortOrder
    number?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    document?: SortOrder
    observation?: SortOrder
    mainPaymentMethod?: SortOrder
    status?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    adherenceDate?: SortOrder
    renovationDate?: SortOrder
    expireDate?: SortOrder
    clientType?: SortOrder
    affiliateCode?: SortOrder
    planId?: SortOrder
    cep?: SortOrder
    address?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    document?: SortOrder
    observation?: SortOrder
    mainPaymentMethod?: SortOrder
    status?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    adherenceDate?: SortOrder
    renovationDate?: SortOrder
    expireDate?: SortOrder
    clientType?: SortOrder
    affiliateCode?: SortOrder
    planId?: SortOrder
    cep?: SortOrder
    address?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    cep?: SortOrder
    number?: SortOrder
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type EnumCustomerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusWithAggregatesFilter<$PrismaModel> | $Enums.CustomerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCustomerStatusFilter<$PrismaModel>
    _max?: NestedEnumCustomerStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCustomerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerType | EnumCustomerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerTypeWithAggregatesFilter<$PrismaModel> | $Enums.CustomerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCustomerTypeFilter<$PrismaModel>
    _max?: NestedEnumCustomerTypeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type DependentNullableScalarRelationFilter = {
    is?: DependentWhereInput | null
    isNot?: DependentWhereInput | null
  }

  export type EmployeeNullableScalarRelationFilter = {
    is?: EmployeeWhereInput | null
    isNot?: EmployeeWhereInput | null
  }

  export type CustomerCardCountOrderByAggregateInput = {
    id?: SortOrder
    cardNumber?: SortOrder
    expireDate?: SortOrder
    customerId?: SortOrder
    dependentId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerCardMaxOrderByAggregateInput = {
    id?: SortOrder
    cardNumber?: SortOrder
    expireDate?: SortOrder
    customerId?: SortOrder
    dependentId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerCardMinOrderByAggregateInput = {
    id?: SortOrder
    cardNumber?: SortOrder
    expireDate?: SortOrder
    customerId?: SortOrder
    dependentId?: SortOrder
    employeeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPfDataCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    birthDate?: SortOrder
    rg?: SortOrder
    cpf?: SortOrder
    sex?: SortOrder
    civilState?: SortOrder
    job?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPfDataMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    birthDate?: SortOrder
    rg?: SortOrder
    cpf?: SortOrder
    sex?: SortOrder
    civilState?: SortOrder
    job?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPfDataMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    birthDate?: SortOrder
    rg?: SortOrder
    cpf?: SortOrder
    sex?: SortOrder
    civilState?: SortOrder
    job?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPjDataCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    representative?: SortOrder
    cnpj?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPjDataMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    representative?: SortOrder
    cnpj?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerPjDataMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    representative?: SortOrder
    cnpj?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DependentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    relationship?: SortOrder
    employeeDependentId?: SortOrder
    cpf?: SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DependentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    relationship?: SortOrder
    employeeDependentId?: SortOrder
    cpf?: SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DependentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    relationship?: SortOrder
    employeeDependentId?: SortOrder
    cpf?: SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    cpf?: SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    cpf?: SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployeeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    holderId?: SortOrder
    name?: SortOrder
    position?: SortOrder
    cpf?: SortOrder
    birthDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type SubscriptionScalarRelationFilter = {
    is?: SubscriptionWhereInput
    isNot?: SubscriptionWhereInput
  }

  export type InvoiceCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InvoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InvoiceSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }

  export type EnumPaymentTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PlanCountOrderByAggregateInput = {
    id?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    contractText?: SortOrder
    signupFee?: SortOrder
    allowedPaymentTypes?: SortOrder
    maxInstallments?: SortOrder
    prices?: SortOrder
    additionalInfo?: SortOrder
    isShowingInApp?: SortOrder
    hasTelemedicine?: SortOrder
    maxDependents?: SortOrder
    pricePerEmployee?: SortOrder
    pricePerDependent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanAvgOrderByAggregateInput = {
    signupFee?: SortOrder
    maxInstallments?: SortOrder
    maxDependents?: SortOrder
    pricePerEmployee?: SortOrder
    pricePerDependent?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    id?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    contractText?: SortOrder
    signupFee?: SortOrder
    maxInstallments?: SortOrder
    additionalInfo?: SortOrder
    isShowingInApp?: SortOrder
    hasTelemedicine?: SortOrder
    maxDependents?: SortOrder
    pricePerEmployee?: SortOrder
    pricePerDependent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    id?: SortOrder
    externalId?: SortOrder
    name?: SortOrder
    contractText?: SortOrder
    signupFee?: SortOrder
    maxInstallments?: SortOrder
    additionalInfo?: SortOrder
    isShowingInApp?: SortOrder
    hasTelemedicine?: SortOrder
    maxDependents?: SortOrder
    pricePerEmployee?: SortOrder
    pricePerDependent?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanSumOrderByAggregateInput = {
    signupFee?: SortOrder
    maxInstallments?: SortOrder
    maxDependents?: SortOrder
    pricePerEmployee?: SortOrder
    pricePerDependent?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type InvoiceListRelationFilter = {
    every?: InvoiceWhereInput
    some?: InvoiceWhereInput
    none?: InvoiceWhereInput
  }

  export type PlanScalarRelationFilter = {
    is?: PlanWhereInput
    isNot?: PlanWhereInput
  }

  export type InvoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    firstPayDayDate?: SortOrder
    paymentType?: SortOrder
    installments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionAvgOrderByAggregateInput = {
    installments?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    firstPayDayDate?: SortOrder
    paymentType?: SortOrder
    installments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    firstPayDayDate?: SortOrder
    paymentType?: SortOrder
    installments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionSumOrderByAggregateInput = {
    installments?: SortOrder
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type EnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type UserCreateNestedOneWithoutAffiliateInput = {
    create?: XOR<UserCreateWithoutAffiliateInput, UserUncheckedCreateWithoutAffiliateInput>
    connectOrCreate?: UserCreateOrConnectWithoutAffiliateInput
    connect?: UserWhereUniqueInput
  }

  export type AffiliateCustomerCreateNestedManyWithoutAffiliateInput = {
    create?: XOR<AffiliateCustomerCreateWithoutAffiliateInput, AffiliateCustomerUncheckedCreateWithoutAffiliateInput> | AffiliateCustomerCreateWithoutAffiliateInput[] | AffiliateCustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutAffiliateInput | AffiliateCustomerCreateOrConnectWithoutAffiliateInput[]
    createMany?: AffiliateCustomerCreateManyAffiliateInputEnvelope
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
  }

  export type CustomerCreateNestedManyWithoutAffiliateInput = {
    create?: XOR<CustomerCreateWithoutAffiliateInput, CustomerUncheckedCreateWithoutAffiliateInput> | CustomerCreateWithoutAffiliateInput[] | CustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAffiliateInput | CustomerCreateOrConnectWithoutAffiliateInput[]
    createMany?: CustomerCreateManyAffiliateInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type AffiliateCustomerUncheckedCreateNestedManyWithoutAffiliateInput = {
    create?: XOR<AffiliateCustomerCreateWithoutAffiliateInput, AffiliateCustomerUncheckedCreateWithoutAffiliateInput> | AffiliateCustomerCreateWithoutAffiliateInput[] | AffiliateCustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutAffiliateInput | AffiliateCustomerCreateOrConnectWithoutAffiliateInput[]
    createMany?: AffiliateCustomerCreateManyAffiliateInputEnvelope
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutAffiliateInput = {
    create?: XOR<CustomerCreateWithoutAffiliateInput, CustomerUncheckedCreateWithoutAffiliateInput> | CustomerCreateWithoutAffiliateInput[] | CustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAffiliateInput | CustomerCreateOrConnectWithoutAffiliateInput[]
    createMany?: CustomerCreateManyAffiliateInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumCommissionTypeFieldUpdateOperationsInput = {
    set?: $Enums.CommissionType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutAffiliateNestedInput = {
    create?: XOR<UserCreateWithoutAffiliateInput, UserUncheckedCreateWithoutAffiliateInput>
    connectOrCreate?: UserCreateOrConnectWithoutAffiliateInput
    upsert?: UserUpsertWithoutAffiliateInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAffiliateInput, UserUpdateWithoutAffiliateInput>, UserUncheckedUpdateWithoutAffiliateInput>
  }

  export type AffiliateCustomerUpdateManyWithoutAffiliateNestedInput = {
    create?: XOR<AffiliateCustomerCreateWithoutAffiliateInput, AffiliateCustomerUncheckedCreateWithoutAffiliateInput> | AffiliateCustomerCreateWithoutAffiliateInput[] | AffiliateCustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutAffiliateInput | AffiliateCustomerCreateOrConnectWithoutAffiliateInput[]
    upsert?: AffiliateCustomerUpsertWithWhereUniqueWithoutAffiliateInput | AffiliateCustomerUpsertWithWhereUniqueWithoutAffiliateInput[]
    createMany?: AffiliateCustomerCreateManyAffiliateInputEnvelope
    set?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    disconnect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    delete?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    update?: AffiliateCustomerUpdateWithWhereUniqueWithoutAffiliateInput | AffiliateCustomerUpdateWithWhereUniqueWithoutAffiliateInput[]
    updateMany?: AffiliateCustomerUpdateManyWithWhereWithoutAffiliateInput | AffiliateCustomerUpdateManyWithWhereWithoutAffiliateInput[]
    deleteMany?: AffiliateCustomerScalarWhereInput | AffiliateCustomerScalarWhereInput[]
  }

  export type CustomerUpdateManyWithoutAffiliateNestedInput = {
    create?: XOR<CustomerCreateWithoutAffiliateInput, CustomerUncheckedCreateWithoutAffiliateInput> | CustomerCreateWithoutAffiliateInput[] | CustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAffiliateInput | CustomerCreateOrConnectWithoutAffiliateInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutAffiliateInput | CustomerUpsertWithWhereUniqueWithoutAffiliateInput[]
    createMany?: CustomerCreateManyAffiliateInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutAffiliateInput | CustomerUpdateWithWhereUniqueWithoutAffiliateInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutAffiliateInput | CustomerUpdateManyWithWhereWithoutAffiliateInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type AffiliateCustomerUncheckedUpdateManyWithoutAffiliateNestedInput = {
    create?: XOR<AffiliateCustomerCreateWithoutAffiliateInput, AffiliateCustomerUncheckedCreateWithoutAffiliateInput> | AffiliateCustomerCreateWithoutAffiliateInput[] | AffiliateCustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutAffiliateInput | AffiliateCustomerCreateOrConnectWithoutAffiliateInput[]
    upsert?: AffiliateCustomerUpsertWithWhereUniqueWithoutAffiliateInput | AffiliateCustomerUpsertWithWhereUniqueWithoutAffiliateInput[]
    createMany?: AffiliateCustomerCreateManyAffiliateInputEnvelope
    set?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    disconnect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    delete?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    update?: AffiliateCustomerUpdateWithWhereUniqueWithoutAffiliateInput | AffiliateCustomerUpdateWithWhereUniqueWithoutAffiliateInput[]
    updateMany?: AffiliateCustomerUpdateManyWithWhereWithoutAffiliateInput | AffiliateCustomerUpdateManyWithWhereWithoutAffiliateInput[]
    deleteMany?: AffiliateCustomerScalarWhereInput | AffiliateCustomerScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutAffiliateNestedInput = {
    create?: XOR<CustomerCreateWithoutAffiliateInput, CustomerUncheckedCreateWithoutAffiliateInput> | CustomerCreateWithoutAffiliateInput[] | CustomerUncheckedCreateWithoutAffiliateInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutAffiliateInput | CustomerCreateOrConnectWithoutAffiliateInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutAffiliateInput | CustomerUpsertWithWhereUniqueWithoutAffiliateInput[]
    createMany?: CustomerCreateManyAffiliateInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutAffiliateInput | CustomerUpdateWithWhereUniqueWithoutAffiliateInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutAffiliateInput | CustomerUpdateManyWithWhereWithoutAffiliateInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type AffiliateCreateNestedOneWithoutAffiliateCustomerInput = {
    create?: XOR<AffiliateCreateWithoutAffiliateCustomerInput, AffiliateUncheckedCreateWithoutAffiliateCustomerInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutAffiliateCustomerInput
    connect?: AffiliateWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutAffiliateCustomerInput = {
    create?: XOR<CustomerCreateWithoutAffiliateCustomerInput, CustomerUncheckedCreateWithoutAffiliateCustomerInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAffiliateCustomerInput
    connect?: CustomerWhereUniqueInput
  }

  export type AffiliateUpdateOneRequiredWithoutAffiliateCustomerNestedInput = {
    create?: XOR<AffiliateCreateWithoutAffiliateCustomerInput, AffiliateUncheckedCreateWithoutAffiliateCustomerInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutAffiliateCustomerInput
    upsert?: AffiliateUpsertWithoutAffiliateCustomerInput
    connect?: AffiliateWhereUniqueInput
    update?: XOR<XOR<AffiliateUpdateToOneWithWhereWithoutAffiliateCustomerInput, AffiliateUpdateWithoutAffiliateCustomerInput>, AffiliateUncheckedUpdateWithoutAffiliateCustomerInput>
  }

  export type CustomerUpdateOneRequiredWithoutAffiliateCustomerNestedInput = {
    create?: XOR<CustomerCreateWithoutAffiliateCustomerInput, CustomerUncheckedCreateWithoutAffiliateCustomerInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutAffiliateCustomerInput
    upsert?: CustomerUpsertWithoutAffiliateCustomerInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutAffiliateCustomerInput, CustomerUpdateWithoutAffiliateCustomerInput>, CustomerUncheckedUpdateWithoutAffiliateCustomerInput>
  }

  export type CustomerCreateNestedOneWithoutCreditCardInput = {
    create?: XOR<CustomerCreateWithoutCreditCardInput, CustomerUncheckedCreateWithoutCreditCardInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCreditCardInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutCreditCardNestedInput = {
    create?: XOR<CustomerCreateWithoutCreditCardInput, CustomerUncheckedCreateWithoutCreditCardInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCreditCardInput
    upsert?: CustomerUpsertWithoutCreditCardInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCreditCardInput, CustomerUpdateWithoutCreditCardInput>, CustomerUncheckedUpdateWithoutCreditCardInput>
  }

  export type AffiliateCustomerCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AffiliateCustomerCreateWithoutCustomerInput, AffiliateCustomerUncheckedCreateWithoutCustomerInput> | AffiliateCustomerCreateWithoutCustomerInput[] | AffiliateCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutCustomerInput | AffiliateCustomerCreateOrConnectWithoutCustomerInput[]
    createMany?: AffiliateCustomerCreateManyCustomerInputEnvelope
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
  }

  export type CreditCardCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CreditCardCreateWithoutCustomerInput, CreditCardUncheckedCreateWithoutCustomerInput> | CreditCardCreateWithoutCustomerInput[] | CreditCardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutCustomerInput | CreditCardCreateOrConnectWithoutCustomerInput[]
    createMany?: CreditCardCreateManyCustomerInputEnvelope
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
  }

  export type AffiliateCreateNestedOneWithoutCustomerInput = {
    create?: XOR<AffiliateCreateWithoutCustomerInput, AffiliateUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutCustomerInput
    connect?: AffiliateWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutCustomerInput = {
    create?: XOR<PlanCreateWithoutCustomerInput, PlanUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: PlanCreateOrConnectWithoutCustomerInput
    connect?: PlanWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCustomerInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCardCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerCardCreateWithoutCustomerInput, CustomerCardUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutCustomerInput
    connect?: CustomerCardWhereUniqueInput
  }

  export type CustomerPfDataCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerPfDataCreateWithoutCustomerInput, CustomerPfDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPfDataCreateOrConnectWithoutCustomerInput
    connect?: CustomerPfDataWhereUniqueInput
  }

  export type CustomerPjDataCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerPjDataCreateWithoutCustomerInput, CustomerPjDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPjDataCreateOrConnectWithoutCustomerInput
    connect?: CustomerPjDataWhereUniqueInput
  }

  export type DependentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<DependentCreateWithoutCustomerInput, DependentUncheckedCreateWithoutCustomerInput> | DependentCreateWithoutCustomerInput[] | DependentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutCustomerInput | DependentCreateOrConnectWithoutCustomerInput[]
    createMany?: DependentCreateManyCustomerInputEnvelope
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
  }

  export type EmployeeCreateNestedManyWithoutCustomerInput = {
    create?: XOR<EmployeeCreateWithoutCustomerInput, EmployeeUncheckedCreateWithoutCustomerInput> | EmployeeCreateWithoutCustomerInput[] | EmployeeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCustomerInput | EmployeeCreateOrConnectWithoutCustomerInput[]
    createMany?: EmployeeCreateManyCustomerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SubscriptionCreateWithoutCustomerInput, SubscriptionUncheckedCreateWithoutCustomerInput> | SubscriptionCreateWithoutCustomerInput[] | SubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCustomerInput | SubscriptionCreateOrConnectWithoutCustomerInput[]
    createMany?: SubscriptionCreateManyCustomerInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<AffiliateCustomerCreateWithoutCustomerInput, AffiliateCustomerUncheckedCreateWithoutCustomerInput> | AffiliateCustomerCreateWithoutCustomerInput[] | AffiliateCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutCustomerInput | AffiliateCustomerCreateOrConnectWithoutCustomerInput[]
    createMany?: AffiliateCustomerCreateManyCustomerInputEnvelope
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
  }

  export type CreditCardUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CreditCardCreateWithoutCustomerInput, CreditCardUncheckedCreateWithoutCustomerInput> | CreditCardCreateWithoutCustomerInput[] | CreditCardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutCustomerInput | CreditCardCreateOrConnectWithoutCustomerInput[]
    createMany?: CreditCardCreateManyCustomerInputEnvelope
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
  }

  export type CustomerCardUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerCardCreateWithoutCustomerInput, CustomerCardUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutCustomerInput
    connect?: CustomerCardWhereUniqueInput
  }

  export type CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerPfDataCreateWithoutCustomerInput, CustomerPfDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPfDataCreateOrConnectWithoutCustomerInput
    connect?: CustomerPfDataWhereUniqueInput
  }

  export type CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput = {
    create?: XOR<CustomerPjDataCreateWithoutCustomerInput, CustomerPjDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPjDataCreateOrConnectWithoutCustomerInput
    connect?: CustomerPjDataWhereUniqueInput
  }

  export type DependentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<DependentCreateWithoutCustomerInput, DependentUncheckedCreateWithoutCustomerInput> | DependentCreateWithoutCustomerInput[] | DependentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutCustomerInput | DependentCreateOrConnectWithoutCustomerInput[]
    createMany?: DependentCreateManyCustomerInputEnvelope
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
  }

  export type EmployeeUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<EmployeeCreateWithoutCustomerInput, EmployeeUncheckedCreateWithoutCustomerInput> | EmployeeCreateWithoutCustomerInput[] | EmployeeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCustomerInput | EmployeeCreateOrConnectWithoutCustomerInput[]
    createMany?: EmployeeCreateManyCustomerInputEnvelope
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<SubscriptionCreateWithoutCustomerInput, SubscriptionUncheckedCreateWithoutCustomerInput> | SubscriptionCreateWithoutCustomerInput[] | SubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCustomerInput | SubscriptionCreateOrConnectWithoutCustomerInput[]
    createMany?: SubscriptionCreateManyCustomerInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type EnumCustomerStatusFieldUpdateOperationsInput = {
    set?: $Enums.CustomerStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumCustomerTypeFieldUpdateOperationsInput = {
    set?: $Enums.CustomerType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AffiliateCustomerUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AffiliateCustomerCreateWithoutCustomerInput, AffiliateCustomerUncheckedCreateWithoutCustomerInput> | AffiliateCustomerCreateWithoutCustomerInput[] | AffiliateCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutCustomerInput | AffiliateCustomerCreateOrConnectWithoutCustomerInput[]
    upsert?: AffiliateCustomerUpsertWithWhereUniqueWithoutCustomerInput | AffiliateCustomerUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AffiliateCustomerCreateManyCustomerInputEnvelope
    set?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    disconnect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    delete?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    update?: AffiliateCustomerUpdateWithWhereUniqueWithoutCustomerInput | AffiliateCustomerUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AffiliateCustomerUpdateManyWithWhereWithoutCustomerInput | AffiliateCustomerUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AffiliateCustomerScalarWhereInput | AffiliateCustomerScalarWhereInput[]
  }

  export type CreditCardUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CreditCardCreateWithoutCustomerInput, CreditCardUncheckedCreateWithoutCustomerInput> | CreditCardCreateWithoutCustomerInput[] | CreditCardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutCustomerInput | CreditCardCreateOrConnectWithoutCustomerInput[]
    upsert?: CreditCardUpsertWithWhereUniqueWithoutCustomerInput | CreditCardUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CreditCardCreateManyCustomerInputEnvelope
    set?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    disconnect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    delete?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    update?: CreditCardUpdateWithWhereUniqueWithoutCustomerInput | CreditCardUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CreditCardUpdateManyWithWhereWithoutCustomerInput | CreditCardUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
  }

  export type AffiliateUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<AffiliateCreateWithoutCustomerInput, AffiliateUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutCustomerInput
    upsert?: AffiliateUpsertWithoutCustomerInput
    disconnect?: AffiliateWhereInput | boolean
    delete?: AffiliateWhereInput | boolean
    connect?: AffiliateWhereUniqueInput
    update?: XOR<XOR<AffiliateUpdateToOneWithWhereWithoutCustomerInput, AffiliateUpdateWithoutCustomerInput>, AffiliateUncheckedUpdateWithoutCustomerInput>
  }

  export type PlanUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<PlanCreateWithoutCustomerInput, PlanUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: PlanCreateOrConnectWithoutCustomerInput
    upsert?: PlanUpsertWithoutCustomerInput
    disconnect?: PlanWhereInput | boolean
    delete?: PlanWhereInput | boolean
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutCustomerInput, PlanUpdateWithoutCustomerInput>, PlanUncheckedUpdateWithoutCustomerInput>
  }

  export type UserUpdateOneRequiredWithoutCustomerNestedInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    upsert?: UserUpsertWithoutCustomerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomerInput, UserUpdateWithoutCustomerInput>, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerCardUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerCardCreateWithoutCustomerInput, CustomerCardUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutCustomerInput
    upsert?: CustomerCardUpsertWithoutCustomerInput
    disconnect?: CustomerCardWhereInput | boolean
    delete?: CustomerCardWhereInput | boolean
    connect?: CustomerCardWhereUniqueInput
    update?: XOR<XOR<CustomerCardUpdateToOneWithWhereWithoutCustomerInput, CustomerCardUpdateWithoutCustomerInput>, CustomerCardUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPfDataUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerPfDataCreateWithoutCustomerInput, CustomerPfDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPfDataCreateOrConnectWithoutCustomerInput
    upsert?: CustomerPfDataUpsertWithoutCustomerInput
    disconnect?: CustomerPfDataWhereInput | boolean
    delete?: CustomerPfDataWhereInput | boolean
    connect?: CustomerPfDataWhereUniqueInput
    update?: XOR<XOR<CustomerPfDataUpdateToOneWithWhereWithoutCustomerInput, CustomerPfDataUpdateWithoutCustomerInput>, CustomerPfDataUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPjDataUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerPjDataCreateWithoutCustomerInput, CustomerPjDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPjDataCreateOrConnectWithoutCustomerInput
    upsert?: CustomerPjDataUpsertWithoutCustomerInput
    disconnect?: CustomerPjDataWhereInput | boolean
    delete?: CustomerPjDataWhereInput | boolean
    connect?: CustomerPjDataWhereUniqueInput
    update?: XOR<XOR<CustomerPjDataUpdateToOneWithWhereWithoutCustomerInput, CustomerPjDataUpdateWithoutCustomerInput>, CustomerPjDataUncheckedUpdateWithoutCustomerInput>
  }

  export type DependentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<DependentCreateWithoutCustomerInput, DependentUncheckedCreateWithoutCustomerInput> | DependentCreateWithoutCustomerInput[] | DependentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutCustomerInput | DependentCreateOrConnectWithoutCustomerInput[]
    upsert?: DependentUpsertWithWhereUniqueWithoutCustomerInput | DependentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: DependentCreateManyCustomerInputEnvelope
    set?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    disconnect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    delete?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    update?: DependentUpdateWithWhereUniqueWithoutCustomerInput | DependentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: DependentUpdateManyWithWhereWithoutCustomerInput | DependentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: DependentScalarWhereInput | DependentScalarWhereInput[]
  }

  export type EmployeeUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<EmployeeCreateWithoutCustomerInput, EmployeeUncheckedCreateWithoutCustomerInput> | EmployeeCreateWithoutCustomerInput[] | EmployeeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCustomerInput | EmployeeCreateOrConnectWithoutCustomerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCustomerInput | EmployeeUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: EmployeeCreateManyCustomerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCustomerInput | EmployeeUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCustomerInput | EmployeeUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCustomerInput, SubscriptionUncheckedCreateWithoutCustomerInput> | SubscriptionCreateWithoutCustomerInput[] | SubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCustomerInput | SubscriptionCreateOrConnectWithoutCustomerInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutCustomerInput | SubscriptionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SubscriptionCreateManyCustomerInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutCustomerInput | SubscriptionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutCustomerInput | SubscriptionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<AffiliateCustomerCreateWithoutCustomerInput, AffiliateCustomerUncheckedCreateWithoutCustomerInput> | AffiliateCustomerCreateWithoutCustomerInput[] | AffiliateCustomerUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: AffiliateCustomerCreateOrConnectWithoutCustomerInput | AffiliateCustomerCreateOrConnectWithoutCustomerInput[]
    upsert?: AffiliateCustomerUpsertWithWhereUniqueWithoutCustomerInput | AffiliateCustomerUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: AffiliateCustomerCreateManyCustomerInputEnvelope
    set?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    disconnect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    delete?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    connect?: AffiliateCustomerWhereUniqueInput | AffiliateCustomerWhereUniqueInput[]
    update?: AffiliateCustomerUpdateWithWhereUniqueWithoutCustomerInput | AffiliateCustomerUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: AffiliateCustomerUpdateManyWithWhereWithoutCustomerInput | AffiliateCustomerUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: AffiliateCustomerScalarWhereInput | AffiliateCustomerScalarWhereInput[]
  }

  export type CreditCardUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CreditCardCreateWithoutCustomerInput, CreditCardUncheckedCreateWithoutCustomerInput> | CreditCardCreateWithoutCustomerInput[] | CreditCardUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CreditCardCreateOrConnectWithoutCustomerInput | CreditCardCreateOrConnectWithoutCustomerInput[]
    upsert?: CreditCardUpsertWithWhereUniqueWithoutCustomerInput | CreditCardUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CreditCardCreateManyCustomerInputEnvelope
    set?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    disconnect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    delete?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    connect?: CreditCardWhereUniqueInput | CreditCardWhereUniqueInput[]
    update?: CreditCardUpdateWithWhereUniqueWithoutCustomerInput | CreditCardUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CreditCardUpdateManyWithWhereWithoutCustomerInput | CreditCardUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
  }

  export type CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerCardCreateWithoutCustomerInput, CustomerCardUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutCustomerInput
    upsert?: CustomerCardUpsertWithoutCustomerInput
    disconnect?: CustomerCardWhereInput | boolean
    delete?: CustomerCardWhereInput | boolean
    connect?: CustomerCardWhereUniqueInput
    update?: XOR<XOR<CustomerCardUpdateToOneWithWhereWithoutCustomerInput, CustomerCardUpdateWithoutCustomerInput>, CustomerCardUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerPfDataCreateWithoutCustomerInput, CustomerPfDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPfDataCreateOrConnectWithoutCustomerInput
    upsert?: CustomerPfDataUpsertWithoutCustomerInput
    disconnect?: CustomerPfDataWhereInput | boolean
    delete?: CustomerPfDataWhereInput | boolean
    connect?: CustomerPfDataWhereUniqueInput
    update?: XOR<XOR<CustomerPfDataUpdateToOneWithWhereWithoutCustomerInput, CustomerPfDataUpdateWithoutCustomerInput>, CustomerPfDataUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<CustomerPjDataCreateWithoutCustomerInput, CustomerPjDataUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: CustomerPjDataCreateOrConnectWithoutCustomerInput
    upsert?: CustomerPjDataUpsertWithoutCustomerInput
    disconnect?: CustomerPjDataWhereInput | boolean
    delete?: CustomerPjDataWhereInput | boolean
    connect?: CustomerPjDataWhereUniqueInput
    update?: XOR<XOR<CustomerPjDataUpdateToOneWithWhereWithoutCustomerInput, CustomerPjDataUpdateWithoutCustomerInput>, CustomerPjDataUncheckedUpdateWithoutCustomerInput>
  }

  export type DependentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<DependentCreateWithoutCustomerInput, DependentUncheckedCreateWithoutCustomerInput> | DependentCreateWithoutCustomerInput[] | DependentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutCustomerInput | DependentCreateOrConnectWithoutCustomerInput[]
    upsert?: DependentUpsertWithWhereUniqueWithoutCustomerInput | DependentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: DependentCreateManyCustomerInputEnvelope
    set?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    disconnect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    delete?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    update?: DependentUpdateWithWhereUniqueWithoutCustomerInput | DependentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: DependentUpdateManyWithWhereWithoutCustomerInput | DependentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: DependentScalarWhereInput | DependentScalarWhereInput[]
  }

  export type EmployeeUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<EmployeeCreateWithoutCustomerInput, EmployeeUncheckedCreateWithoutCustomerInput> | EmployeeCreateWithoutCustomerInput[] | EmployeeUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: EmployeeCreateOrConnectWithoutCustomerInput | EmployeeCreateOrConnectWithoutCustomerInput[]
    upsert?: EmployeeUpsertWithWhereUniqueWithoutCustomerInput | EmployeeUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: EmployeeCreateManyCustomerInputEnvelope
    set?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    disconnect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    delete?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    connect?: EmployeeWhereUniqueInput | EmployeeWhereUniqueInput[]
    update?: EmployeeUpdateWithWhereUniqueWithoutCustomerInput | EmployeeUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: EmployeeUpdateManyWithWhereWithoutCustomerInput | EmployeeUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<SubscriptionCreateWithoutCustomerInput, SubscriptionUncheckedCreateWithoutCustomerInput> | SubscriptionCreateWithoutCustomerInput[] | SubscriptionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutCustomerInput | SubscriptionCreateOrConnectWithoutCustomerInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutCustomerInput | SubscriptionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: SubscriptionCreateManyCustomerInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutCustomerInput | SubscriptionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutCustomerInput | SubscriptionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutCustomerCardInput = {
    create?: XOR<CustomerCreateWithoutCustomerCardInput, CustomerUncheckedCreateWithoutCustomerCardInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerCardInput
    connect?: CustomerWhereUniqueInput
  }

  export type DependentCreateNestedOneWithoutCustomerCardInput = {
    create?: XOR<DependentCreateWithoutCustomerCardInput, DependentUncheckedCreateWithoutCustomerCardInput>
    connectOrCreate?: DependentCreateOrConnectWithoutCustomerCardInput
    connect?: DependentWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutCustomerCardInput = {
    create?: XOR<EmployeeCreateWithoutCustomerCardInput, EmployeeUncheckedCreateWithoutCustomerCardInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCustomerCardInput
    connect?: EmployeeWhereUniqueInput
  }

  export type CustomerUpdateOneWithoutCustomerCardNestedInput = {
    create?: XOR<CustomerCreateWithoutCustomerCardInput, CustomerUncheckedCreateWithoutCustomerCardInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerCardInput
    upsert?: CustomerUpsertWithoutCustomerCardInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCustomerCardInput, CustomerUpdateWithoutCustomerCardInput>, CustomerUncheckedUpdateWithoutCustomerCardInput>
  }

  export type DependentUpdateOneWithoutCustomerCardNestedInput = {
    create?: XOR<DependentCreateWithoutCustomerCardInput, DependentUncheckedCreateWithoutCustomerCardInput>
    connectOrCreate?: DependentCreateOrConnectWithoutCustomerCardInput
    upsert?: DependentUpsertWithoutCustomerCardInput
    disconnect?: DependentWhereInput | boolean
    delete?: DependentWhereInput | boolean
    connect?: DependentWhereUniqueInput
    update?: XOR<XOR<DependentUpdateToOneWithWhereWithoutCustomerCardInput, DependentUpdateWithoutCustomerCardInput>, DependentUncheckedUpdateWithoutCustomerCardInput>
  }

  export type EmployeeUpdateOneWithoutCustomerCardNestedInput = {
    create?: XOR<EmployeeCreateWithoutCustomerCardInput, EmployeeUncheckedCreateWithoutCustomerCardInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutCustomerCardInput
    upsert?: EmployeeUpsertWithoutCustomerCardInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutCustomerCardInput, EmployeeUpdateWithoutCustomerCardInput>, EmployeeUncheckedUpdateWithoutCustomerCardInput>
  }

  export type CustomerCreateNestedOneWithoutCustomerPfDataInput = {
    create?: XOR<CustomerCreateWithoutCustomerPfDataInput, CustomerUncheckedCreateWithoutCustomerPfDataInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerPfDataInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutCustomerPfDataNestedInput = {
    create?: XOR<CustomerCreateWithoutCustomerPfDataInput, CustomerUncheckedCreateWithoutCustomerPfDataInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerPfDataInput
    upsert?: CustomerUpsertWithoutCustomerPfDataInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCustomerPfDataInput, CustomerUpdateWithoutCustomerPfDataInput>, CustomerUncheckedUpdateWithoutCustomerPfDataInput>
  }

  export type CustomerCreateNestedOneWithoutCustomerPjDataInput = {
    create?: XOR<CustomerCreateWithoutCustomerPjDataInput, CustomerUncheckedCreateWithoutCustomerPjDataInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerPjDataInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutCustomerPjDataNestedInput = {
    create?: XOR<CustomerCreateWithoutCustomerPjDataInput, CustomerUncheckedCreateWithoutCustomerPjDataInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerPjDataInput
    upsert?: CustomerUpsertWithoutCustomerPjDataInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCustomerPjDataInput, CustomerUpdateWithoutCustomerPjDataInput>, CustomerUncheckedUpdateWithoutCustomerPjDataInput>
  }

  export type CustomerCardCreateNestedOneWithoutDependentInput = {
    create?: XOR<CustomerCardCreateWithoutDependentInput, CustomerCardUncheckedCreateWithoutDependentInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutDependentInput
    connect?: CustomerCardWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutDependentInput = {
    create?: XOR<EmployeeCreateWithoutDependentInput, EmployeeUncheckedCreateWithoutDependentInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDependentInput
    connect?: EmployeeWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutDependentInput = {
    create?: XOR<CustomerCreateWithoutDependentInput, CustomerUncheckedCreateWithoutDependentInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDependentInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDependentInput = {
    create?: XOR<UserCreateWithoutDependentInput, UserUncheckedCreateWithoutDependentInput>
    connectOrCreate?: UserCreateOrConnectWithoutDependentInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCardUncheckedCreateNestedOneWithoutDependentInput = {
    create?: XOR<CustomerCardCreateWithoutDependentInput, CustomerCardUncheckedCreateWithoutDependentInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutDependentInput
    connect?: CustomerCardWhereUniqueInput
  }

  export type CustomerCardUpdateOneWithoutDependentNestedInput = {
    create?: XOR<CustomerCardCreateWithoutDependentInput, CustomerCardUncheckedCreateWithoutDependentInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutDependentInput
    upsert?: CustomerCardUpsertWithoutDependentInput
    disconnect?: CustomerCardWhereInput | boolean
    delete?: CustomerCardWhereInput | boolean
    connect?: CustomerCardWhereUniqueInput
    update?: XOR<XOR<CustomerCardUpdateToOneWithWhereWithoutDependentInput, CustomerCardUpdateWithoutDependentInput>, CustomerCardUncheckedUpdateWithoutDependentInput>
  }

  export type EmployeeUpdateOneWithoutDependentNestedInput = {
    create?: XOR<EmployeeCreateWithoutDependentInput, EmployeeUncheckedCreateWithoutDependentInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutDependentInput
    upsert?: EmployeeUpsertWithoutDependentInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutDependentInput, EmployeeUpdateWithoutDependentInput>, EmployeeUncheckedUpdateWithoutDependentInput>
  }

  export type CustomerUpdateOneRequiredWithoutDependentNestedInput = {
    create?: XOR<CustomerCreateWithoutDependentInput, CustomerUncheckedCreateWithoutDependentInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutDependentInput
    upsert?: CustomerUpsertWithoutDependentInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutDependentInput, CustomerUpdateWithoutDependentInput>, CustomerUncheckedUpdateWithoutDependentInput>
  }

  export type UserUpdateOneRequiredWithoutDependentNestedInput = {
    create?: XOR<UserCreateWithoutDependentInput, UserUncheckedCreateWithoutDependentInput>
    connectOrCreate?: UserCreateOrConnectWithoutDependentInput
    upsert?: UserUpsertWithoutDependentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDependentInput, UserUpdateWithoutDependentInput>, UserUncheckedUpdateWithoutDependentInput>
  }

  export type CustomerCardUncheckedUpdateOneWithoutDependentNestedInput = {
    create?: XOR<CustomerCardCreateWithoutDependentInput, CustomerCardUncheckedCreateWithoutDependentInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutDependentInput
    upsert?: CustomerCardUpsertWithoutDependentInput
    disconnect?: CustomerCardWhereInput | boolean
    delete?: CustomerCardWhereInput | boolean
    connect?: CustomerCardWhereUniqueInput
    update?: XOR<XOR<CustomerCardUpdateToOneWithWhereWithoutDependentInput, CustomerCardUpdateWithoutDependentInput>, CustomerCardUncheckedUpdateWithoutDependentInput>
  }

  export type CustomerCardCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<CustomerCardCreateWithoutEmployeeInput, CustomerCardUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutEmployeeInput
    connect?: CustomerCardWhereUniqueInput
  }

  export type DependentCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DependentCreateWithoutEmployeeInput, DependentUncheckedCreateWithoutEmployeeInput> | DependentCreateWithoutEmployeeInput[] | DependentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutEmployeeInput | DependentCreateOrConnectWithoutEmployeeInput[]
    createMany?: DependentCreateManyEmployeeInputEnvelope
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
  }

  export type CustomerCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<CustomerCreateWithoutEmployeeInput, CustomerUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutEmployeeInput
    connect?: CustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    connect?: UserWhereUniqueInput
  }

  export type CustomerCardUncheckedCreateNestedOneWithoutEmployeeInput = {
    create?: XOR<CustomerCardCreateWithoutEmployeeInput, CustomerCardUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutEmployeeInput
    connect?: CustomerCardWhereUniqueInput
  }

  export type DependentUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<DependentCreateWithoutEmployeeInput, DependentUncheckedCreateWithoutEmployeeInput> | DependentCreateWithoutEmployeeInput[] | DependentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutEmployeeInput | DependentCreateOrConnectWithoutEmployeeInput[]
    createMany?: DependentCreateManyEmployeeInputEnvelope
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
  }

  export type CustomerCardUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<CustomerCardCreateWithoutEmployeeInput, CustomerCardUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutEmployeeInput
    upsert?: CustomerCardUpsertWithoutEmployeeInput
    disconnect?: CustomerCardWhereInput | boolean
    delete?: CustomerCardWhereInput | boolean
    connect?: CustomerCardWhereUniqueInput
    update?: XOR<XOR<CustomerCardUpdateToOneWithWhereWithoutEmployeeInput, CustomerCardUpdateWithoutEmployeeInput>, CustomerCardUncheckedUpdateWithoutEmployeeInput>
  }

  export type DependentUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DependentCreateWithoutEmployeeInput, DependentUncheckedCreateWithoutEmployeeInput> | DependentCreateWithoutEmployeeInput[] | DependentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutEmployeeInput | DependentCreateOrConnectWithoutEmployeeInput[]
    upsert?: DependentUpsertWithWhereUniqueWithoutEmployeeInput | DependentUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DependentCreateManyEmployeeInputEnvelope
    set?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    disconnect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    delete?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    update?: DependentUpdateWithWhereUniqueWithoutEmployeeInput | DependentUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DependentUpdateManyWithWhereWithoutEmployeeInput | DependentUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DependentScalarWhereInput | DependentScalarWhereInput[]
  }

  export type CustomerUpdateOneRequiredWithoutEmployeeNestedInput = {
    create?: XOR<CustomerCreateWithoutEmployeeInput, CustomerUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutEmployeeInput
    upsert?: CustomerUpsertWithoutEmployeeInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutEmployeeInput, CustomerUpdateWithoutEmployeeInput>, CustomerUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateOneRequiredWithoutEmployeeNestedInput = {
    create?: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployeeInput
    upsert?: UserUpsertWithoutEmployeeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployeeInput, UserUpdateWithoutEmployeeInput>, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type CustomerCardUncheckedUpdateOneWithoutEmployeeNestedInput = {
    create?: XOR<CustomerCardCreateWithoutEmployeeInput, CustomerCardUncheckedCreateWithoutEmployeeInput>
    connectOrCreate?: CustomerCardCreateOrConnectWithoutEmployeeInput
    upsert?: CustomerCardUpsertWithoutEmployeeInput
    disconnect?: CustomerCardWhereInput | boolean
    delete?: CustomerCardWhereInput | boolean
    connect?: CustomerCardWhereUniqueInput
    update?: XOR<XOR<CustomerCardUpdateToOneWithWhereWithoutEmployeeInput, CustomerCardUpdateWithoutEmployeeInput>, CustomerCardUncheckedUpdateWithoutEmployeeInput>
  }

  export type DependentUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<DependentCreateWithoutEmployeeInput, DependentUncheckedCreateWithoutEmployeeInput> | DependentCreateWithoutEmployeeInput[] | DependentUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: DependentCreateOrConnectWithoutEmployeeInput | DependentCreateOrConnectWithoutEmployeeInput[]
    upsert?: DependentUpsertWithWhereUniqueWithoutEmployeeInput | DependentUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: DependentCreateManyEmployeeInputEnvelope
    set?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    disconnect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    delete?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    connect?: DependentWhereUniqueInput | DependentWhereUniqueInput[]
    update?: DependentUpdateWithWhereUniqueWithoutEmployeeInput | DependentUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: DependentUpdateManyWithWhereWithoutEmployeeInput | DependentUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: DependentScalarWhereInput | DependentScalarWhereInput[]
  }

  export type SubscriptionCreateNestedOneWithoutInvoiceInput = {
    create?: XOR<SubscriptionCreateWithoutInvoiceInput, SubscriptionUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutInvoiceInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type EnumInvoiceStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvoiceStatus
  }

  export type SubscriptionUpdateOneRequiredWithoutInvoiceNestedInput = {
    create?: XOR<SubscriptionCreateWithoutInvoiceInput, SubscriptionUncheckedCreateWithoutInvoiceInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutInvoiceInput
    upsert?: SubscriptionUpsertWithoutInvoiceInput
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutInvoiceInput, SubscriptionUpdateWithoutInvoiceInput>, SubscriptionUncheckedUpdateWithoutInvoiceInput>
  }

  export type PlanCreateallowedPaymentTypesInput = {
    set: $Enums.PaymentType[]
  }

  export type CustomerCreateNestedManyWithoutPlanInput = {
    create?: XOR<CustomerCreateWithoutPlanInput, CustomerUncheckedCreateWithoutPlanInput> | CustomerCreateWithoutPlanInput[] | CustomerUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutPlanInput | CustomerCreateOrConnectWithoutPlanInput[]
    createMany?: CustomerCreateManyPlanInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type CustomerUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<CustomerCreateWithoutPlanInput, CustomerUncheckedCreateWithoutPlanInput> | CustomerCreateWithoutPlanInput[] | CustomerUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutPlanInput | CustomerCreateOrConnectWithoutPlanInput[]
    createMany?: CustomerCreateManyPlanInputEnvelope
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type PlanUpdateallowedPaymentTypesInput = {
    set?: $Enums.PaymentType[]
    push?: $Enums.PaymentType | $Enums.PaymentType[]
  }

  export type CustomerUpdateManyWithoutPlanNestedInput = {
    create?: XOR<CustomerCreateWithoutPlanInput, CustomerUncheckedCreateWithoutPlanInput> | CustomerCreateWithoutPlanInput[] | CustomerUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutPlanInput | CustomerCreateOrConnectWithoutPlanInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutPlanInput | CustomerUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: CustomerCreateManyPlanInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutPlanInput | CustomerUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutPlanInput | CustomerUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPlanInput | SubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPlanInput | SubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPlanInput | SubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type CustomerUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<CustomerCreateWithoutPlanInput, CustomerUncheckedCreateWithoutPlanInput> | CustomerCreateWithoutPlanInput[] | CustomerUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerCreateOrConnectWithoutPlanInput | CustomerCreateOrConnectWithoutPlanInput[]
    upsert?: CustomerUpsertWithWhereUniqueWithoutPlanInput | CustomerUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: CustomerCreateManyPlanInputEnvelope
    set?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    disconnect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    delete?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    connect?: CustomerWhereUniqueInput | CustomerWhereUniqueInput[]
    update?: CustomerUpdateWithWhereUniqueWithoutPlanInput | CustomerUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: CustomerUpdateManyWithWhereWithoutPlanInput | CustomerUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput> | SubscriptionCreateWithoutPlanInput[] | SubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPlanInput | SubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPlanInput | SubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: SubscriptionCreateManyPlanInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPlanInput | SubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPlanInput | SubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type InvoiceCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<InvoiceCreateWithoutSubscriptionInput, InvoiceUncheckedCreateWithoutSubscriptionInput> | InvoiceCreateWithoutSubscriptionInput[] | InvoiceUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSubscriptionInput | InvoiceCreateOrConnectWithoutSubscriptionInput[]
    createMany?: InvoiceCreateManySubscriptionInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type CustomerCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<CustomerCreateWithoutSubscriptionInput, CustomerUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSubscriptionInput
    connect?: CustomerWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<PlanCreateWithoutSubscriptionInput, PlanUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSubscriptionInput
    connect?: PlanWhereUniqueInput
  }

  export type InvoiceUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<InvoiceCreateWithoutSubscriptionInput, InvoiceUncheckedCreateWithoutSubscriptionInput> | InvoiceCreateWithoutSubscriptionInput[] | InvoiceUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSubscriptionInput | InvoiceCreateOrConnectWithoutSubscriptionInput[]
    createMany?: InvoiceCreateManySubscriptionInputEnvelope
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type InvoiceUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<InvoiceCreateWithoutSubscriptionInput, InvoiceUncheckedCreateWithoutSubscriptionInput> | InvoiceCreateWithoutSubscriptionInput[] | InvoiceUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSubscriptionInput | InvoiceCreateOrConnectWithoutSubscriptionInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutSubscriptionInput | InvoiceUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: InvoiceCreateManySubscriptionInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutSubscriptionInput | InvoiceUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutSubscriptionInput | InvoiceUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type CustomerUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<CustomerCreateWithoutSubscriptionInput, CustomerUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutSubscriptionInput
    upsert?: CustomerUpsertWithoutSubscriptionInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutSubscriptionInput, CustomerUpdateWithoutSubscriptionInput>, CustomerUncheckedUpdateWithoutSubscriptionInput>
  }

  export type PlanUpdateOneRequiredWithoutSubscriptionNestedInput = {
    create?: XOR<PlanCreateWithoutSubscriptionInput, PlanUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSubscriptionInput
    upsert?: PlanUpsertWithoutSubscriptionInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutSubscriptionInput, PlanUpdateWithoutSubscriptionInput>, PlanUncheckedUpdateWithoutSubscriptionInput>
  }

  export type InvoiceUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<InvoiceCreateWithoutSubscriptionInput, InvoiceUncheckedCreateWithoutSubscriptionInput> | InvoiceCreateWithoutSubscriptionInput[] | InvoiceUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: InvoiceCreateOrConnectWithoutSubscriptionInput | InvoiceCreateOrConnectWithoutSubscriptionInput[]
    upsert?: InvoiceUpsertWithWhereUniqueWithoutSubscriptionInput | InvoiceUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: InvoiceCreateManySubscriptionInputEnvelope
    set?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    disconnect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    delete?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    connect?: InvoiceWhereUniqueInput | InvoiceWhereUniqueInput[]
    update?: InvoiceUpdateWithWhereUniqueWithoutSubscriptionInput | InvoiceUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: InvoiceUpdateManyWithWhereWithoutSubscriptionInput | InvoiceUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
  }

  export type AffiliateCreateNestedOneWithoutUserInput = {
    create?: XOR<AffiliateCreateWithoutUserInput, AffiliateUncheckedCreateWithoutUserInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutUserInput
    connect?: AffiliateWhereUniqueInput
  }

  export type CustomerCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type DependentCreateNestedOneWithoutUserInput = {
    create?: XOR<DependentCreateWithoutUserInput, DependentUncheckedCreateWithoutUserInput>
    connectOrCreate?: DependentCreateOrConnectWithoutUserInput
    connect?: DependentWhereUniqueInput
  }

  export type EmployeeCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type AffiliateUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AffiliateCreateWithoutUserInput, AffiliateUncheckedCreateWithoutUserInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutUserInput
    connect?: AffiliateWhereUniqueInput
  }

  export type CustomerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type DependentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<DependentCreateWithoutUserInput, DependentUncheckedCreateWithoutUserInput>
    connectOrCreate?: DependentCreateOrConnectWithoutUserInput
    connect?: DependentWhereUniqueInput
  }

  export type EmployeeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    connect?: EmployeeWhereUniqueInput
  }

  export type EnumUserTypeFieldUpdateOperationsInput = {
    set?: $Enums.UserType
  }

  export type AffiliateUpdateOneWithoutUserNestedInput = {
    create?: XOR<AffiliateCreateWithoutUserInput, AffiliateUncheckedCreateWithoutUserInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutUserInput
    upsert?: AffiliateUpsertWithoutUserInput
    disconnect?: AffiliateWhereInput | boolean
    delete?: AffiliateWhereInput | boolean
    connect?: AffiliateWhereUniqueInput
    update?: XOR<XOR<AffiliateUpdateToOneWithWhereWithoutUserInput, AffiliateUpdateWithoutUserInput>, AffiliateUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type DependentUpdateOneWithoutUserNestedInput = {
    create?: XOR<DependentCreateWithoutUserInput, DependentUncheckedCreateWithoutUserInput>
    connectOrCreate?: DependentCreateOrConnectWithoutUserInput
    upsert?: DependentUpsertWithoutUserInput
    disconnect?: DependentWhereInput | boolean
    delete?: DependentWhereInput | boolean
    connect?: DependentWhereUniqueInput
    update?: XOR<XOR<DependentUpdateToOneWithWhereWithoutUserInput, DependentUpdateWithoutUserInput>, DependentUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type AffiliateUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AffiliateCreateWithoutUserInput, AffiliateUncheckedCreateWithoutUserInput>
    connectOrCreate?: AffiliateCreateOrConnectWithoutUserInput
    upsert?: AffiliateUpsertWithoutUserInput
    disconnect?: AffiliateWhereInput | boolean
    delete?: AffiliateWhereInput | boolean
    connect?: AffiliateWhereUniqueInput
    update?: XOR<XOR<AffiliateUpdateToOneWithWhereWithoutUserInput, AffiliateUpdateWithoutUserInput>, AffiliateUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type DependentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<DependentCreateWithoutUserInput, DependentUncheckedCreateWithoutUserInput>
    connectOrCreate?: DependentCreateOrConnectWithoutUserInput
    upsert?: DependentUpsertWithoutUserInput
    disconnect?: DependentWhereInput | boolean
    delete?: DependentWhereInput | boolean
    connect?: DependentWhereUniqueInput
    update?: XOR<XOR<DependentUpdateToOneWithWhereWithoutUserInput, DependentUpdateWithoutUserInput>, DependentUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployeeCreateOrConnectWithoutUserInput
    upsert?: EmployeeUpsertWithoutUserInput
    disconnect?: EmployeeWhereInput | boolean
    delete?: EmployeeWhereInput | boolean
    connect?: EmployeeWhereUniqueInput
    update?: XOR<XOR<EmployeeUpdateToOneWithWhereWithoutUserInput, EmployeeUpdateWithoutUserInput>, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumCommissionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeFilter<$PrismaModel> | $Enums.CommissionType
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumCommissionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommissionType | EnumCommissionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommissionType[] | ListEnumCommissionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCommissionTypeWithAggregatesFilter<$PrismaModel> | $Enums.CommissionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommissionTypeFilter<$PrismaModel>
    _max?: NestedEnumCommissionTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedEnumCustomerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusFilter<$PrismaModel> | $Enums.CustomerStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumCustomerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerType | EnumCustomerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerTypeFilter<$PrismaModel> | $Enums.CustomerType
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumCustomerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerStatus | EnumCustomerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerStatus[] | ListEnumCustomerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerStatusWithAggregatesFilter<$PrismaModel> | $Enums.CustomerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCustomerStatusFilter<$PrismaModel>
    _max?: NestedEnumCustomerStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCustomerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CustomerType | EnumCustomerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CustomerType[] | ListEnumCustomerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCustomerTypeWithAggregatesFilter<$PrismaModel> | $Enums.CustomerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCustomerTypeFilter<$PrismaModel>
    _max?: NestedEnumCustomerTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumInvoiceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusFilter<$PrismaModel> | $Enums.InvoiceStatus
  }

  export type NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvoiceStatus | EnumInvoiceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvoiceStatus[] | ListEnumInvoiceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvoiceStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvoiceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvoiceStatusFilter<$PrismaModel>
    _max?: NestedEnumInvoiceStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeFilter<$PrismaModel> | $Enums.UserType
  }

  export type NestedEnumUserTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUserTypeWithAggregatesFilter<$PrismaModel> | $Enums.UserType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserTypeFilter<$PrismaModel>
    _max?: NestedEnumUserTypeFilter<$PrismaModel>
  }

  export type UserCreateWithoutAffiliateInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerCreateNestedOneWithoutUserInput
    Dependent?: DependentCreateNestedOneWithoutUserInput
    Employee?: EmployeeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAffiliateInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    Dependent?: DependentUncheckedCreateNestedOneWithoutUserInput
    Employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAffiliateInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAffiliateInput, UserUncheckedCreateWithoutAffiliateInput>
  }

  export type AffiliateCustomerCreateWithoutAffiliateInput = {
    id: string
    createdAt?: Date | string
    updatedAt: Date | string
    Customer: CustomerCreateNestedOneWithoutAffiliateCustomerInput
  }

  export type AffiliateCustomerUncheckedCreateWithoutAffiliateInput = {
    id: string
    customerId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateCustomerCreateOrConnectWithoutAffiliateInput = {
    where: AffiliateCustomerWhereUniqueInput
    create: XOR<AffiliateCustomerCreateWithoutAffiliateInput, AffiliateCustomerUncheckedCreateWithoutAffiliateInput>
  }

  export type AffiliateCustomerCreateManyAffiliateInputEnvelope = {
    data: AffiliateCustomerCreateManyAffiliateInput | AffiliateCustomerCreateManyAffiliateInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutAffiliateInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAffiliateInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAffiliateInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAffiliateInput, CustomerUncheckedCreateWithoutAffiliateInput>
  }

  export type CustomerCreateManyAffiliateInputEnvelope = {
    data: CustomerCreateManyAffiliateInput | CustomerCreateManyAffiliateInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAffiliateInput = {
    update: XOR<UserUpdateWithoutAffiliateInput, UserUncheckedUpdateWithoutAffiliateInput>
    create: XOR<UserCreateWithoutAffiliateInput, UserUncheckedCreateWithoutAffiliateInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAffiliateInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAffiliateInput, UserUncheckedUpdateWithoutAffiliateInput>
  }

  export type UserUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneWithoutUserNestedInput
    Dependent?: DependentUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    Dependent?: DependentUncheckedUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AffiliateCustomerUpsertWithWhereUniqueWithoutAffiliateInput = {
    where: AffiliateCustomerWhereUniqueInput
    update: XOR<AffiliateCustomerUpdateWithoutAffiliateInput, AffiliateCustomerUncheckedUpdateWithoutAffiliateInput>
    create: XOR<AffiliateCustomerCreateWithoutAffiliateInput, AffiliateCustomerUncheckedCreateWithoutAffiliateInput>
  }

  export type AffiliateCustomerUpdateWithWhereUniqueWithoutAffiliateInput = {
    where: AffiliateCustomerWhereUniqueInput
    data: XOR<AffiliateCustomerUpdateWithoutAffiliateInput, AffiliateCustomerUncheckedUpdateWithoutAffiliateInput>
  }

  export type AffiliateCustomerUpdateManyWithWhereWithoutAffiliateInput = {
    where: AffiliateCustomerScalarWhereInput
    data: XOR<AffiliateCustomerUpdateManyMutationInput, AffiliateCustomerUncheckedUpdateManyWithoutAffiliateInput>
  }

  export type AffiliateCustomerScalarWhereInput = {
    AND?: AffiliateCustomerScalarWhereInput | AffiliateCustomerScalarWhereInput[]
    OR?: AffiliateCustomerScalarWhereInput[]
    NOT?: AffiliateCustomerScalarWhereInput | AffiliateCustomerScalarWhereInput[]
    id?: StringFilter<"AffiliateCustomer"> | string
    customerId?: StringFilter<"AffiliateCustomer"> | string
    affiliateId?: StringFilter<"AffiliateCustomer"> | string
    createdAt?: DateTimeFilter<"AffiliateCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"AffiliateCustomer"> | Date | string
  }

  export type CustomerUpsertWithWhereUniqueWithoutAffiliateInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutAffiliateInput, CustomerUncheckedUpdateWithoutAffiliateInput>
    create: XOR<CustomerCreateWithoutAffiliateInput, CustomerUncheckedCreateWithoutAffiliateInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutAffiliateInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutAffiliateInput, CustomerUncheckedUpdateWithoutAffiliateInput>
  }

  export type CustomerUpdateManyWithWhereWithoutAffiliateInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutAffiliateInput>
  }

  export type CustomerScalarWhereInput = {
    AND?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    OR?: CustomerScalarWhereInput[]
    NOT?: CustomerScalarWhereInput | CustomerScalarWhereInput[]
    id?: StringFilter<"Customer"> | string
    userId?: StringFilter<"Customer"> | string
    externalId?: StringNullableFilter<"Customer"> | string | null
    name?: StringFilter<"Customer"> | string
    document?: StringFilter<"Customer"> | string
    observation?: StringNullableFilter<"Customer"> | string | null
    mainPaymentMethod?: EnumPaymentTypeFilter<"Customer"> | $Enums.PaymentType
    status?: EnumCustomerStatusFilter<"Customer"> | $Enums.CustomerStatus
    email?: StringNullableFilter<"Customer"> | string | null
    phone?: StringNullableFilter<"Customer"> | string | null
    adherenceDate?: DateTimeFilter<"Customer"> | Date | string
    renovationDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    expireDate?: DateTimeNullableFilter<"Customer"> | Date | string | null
    clientType?: EnumCustomerTypeFilter<"Customer"> | $Enums.CustomerType
    affiliateCode?: StringNullableFilter<"Customer"> | string | null
    planId?: StringNullableFilter<"Customer"> | string | null
    cep?: IntNullableFilter<"Customer"> | number | null
    address?: StringNullableFilter<"Customer"> | string | null
    number?: IntNullableFilter<"Customer"> | number | null
    complement?: StringNullableFilter<"Customer"> | string | null
    district?: StringNullableFilter<"Customer"> | string | null
    city?: StringNullableFilter<"Customer"> | string | null
    state?: StringNullableFilter<"Customer"> | string | null
    isActive?: BoolFilter<"Customer"> | boolean
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
  }

  export type AffiliateCreateWithoutAffiliateCustomerInput = {
    id: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutAffiliateInput
    Customer?: CustomerCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateUncheckedCreateWithoutAffiliateCustomerInput = {
    id: string
    userId: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateCreateOrConnectWithoutAffiliateCustomerInput = {
    where: AffiliateWhereUniqueInput
    create: XOR<AffiliateCreateWithoutAffiliateCustomerInput, AffiliateUncheckedCreateWithoutAffiliateCustomerInput>
  }

  export type CustomerCreateWithoutAffiliateCustomerInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutAffiliateCustomerInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutAffiliateCustomerInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutAffiliateCustomerInput, CustomerUncheckedCreateWithoutAffiliateCustomerInput>
  }

  export type AffiliateUpsertWithoutAffiliateCustomerInput = {
    update: XOR<AffiliateUpdateWithoutAffiliateCustomerInput, AffiliateUncheckedUpdateWithoutAffiliateCustomerInput>
    create: XOR<AffiliateCreateWithoutAffiliateCustomerInput, AffiliateUncheckedCreateWithoutAffiliateCustomerInput>
    where?: AffiliateWhereInput
  }

  export type AffiliateUpdateToOneWithWhereWithoutAffiliateCustomerInput = {
    where?: AffiliateWhereInput
    data: XOR<AffiliateUpdateWithoutAffiliateCustomerInput, AffiliateUncheckedUpdateWithoutAffiliateCustomerInput>
  }

  export type AffiliateUpdateWithoutAffiliateCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAffiliateNestedInput
    Customer?: CustomerUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateUncheckedUpdateWithoutAffiliateCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type CustomerUpsertWithoutAffiliateCustomerInput = {
    update: XOR<CustomerUpdateWithoutAffiliateCustomerInput, CustomerUncheckedUpdateWithoutAffiliateCustomerInput>
    create: XOR<CustomerCreateWithoutAffiliateCustomerInput, CustomerUncheckedCreateWithoutAffiliateCustomerInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutAffiliateCustomerInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutAffiliateCustomerInput, CustomerUncheckedUpdateWithoutAffiliateCustomerInput>
  }

  export type CustomerUpdateWithoutAffiliateCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAffiliateCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutCreditCardInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCreditCardInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCreditCardInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCreditCardInput, CustomerUncheckedCreateWithoutCreditCardInput>
  }

  export type CustomerUpsertWithoutCreditCardInput = {
    update: XOR<CustomerUpdateWithoutCreditCardInput, CustomerUncheckedUpdateWithoutCreditCardInput>
    create: XOR<CustomerCreateWithoutCreditCardInput, CustomerUncheckedCreateWithoutCreditCardInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCreditCardInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCreditCardInput, CustomerUncheckedUpdateWithoutCreditCardInput>
  }

  export type CustomerUpdateWithoutCreditCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCreditCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type AffiliateCustomerCreateWithoutCustomerInput = {
    id: string
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate: AffiliateCreateNestedOneWithoutAffiliateCustomerInput
  }

  export type AffiliateCustomerUncheckedCreateWithoutCustomerInput = {
    id: string
    affiliateId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateCustomerCreateOrConnectWithoutCustomerInput = {
    where: AffiliateCustomerWhereUniqueInput
    create: XOR<AffiliateCustomerCreateWithoutCustomerInput, AffiliateCustomerUncheckedCreateWithoutCustomerInput>
  }

  export type AffiliateCustomerCreateManyCustomerInputEnvelope = {
    data: AffiliateCustomerCreateManyCustomerInput | AffiliateCustomerCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CreditCardCreateWithoutCustomerInput = {
    id: string
    token: string
    last4: string
    brand: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditCardUncheckedCreateWithoutCustomerInput = {
    id: string
    token: string
    last4: string
    brand: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditCardCreateOrConnectWithoutCustomerInput = {
    where: CreditCardWhereUniqueInput
    create: XOR<CreditCardCreateWithoutCustomerInput, CreditCardUncheckedCreateWithoutCustomerInput>
  }

  export type CreditCardCreateManyCustomerInputEnvelope = {
    data: CreditCardCreateManyCustomerInput | CreditCardCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type AffiliateCreateWithoutCustomerInput = {
    id: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    User: UserCreateNestedOneWithoutAffiliateInput
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateUncheckedCreateWithoutCustomerInput = {
    id: string
    userId: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateCreateOrConnectWithoutCustomerInput = {
    where: AffiliateWhereUniqueInput
    create: XOR<AffiliateCreateWithoutCustomerInput, AffiliateUncheckedCreateWithoutCustomerInput>
  }

  export type PlanCreateWithoutCustomerInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Subscription?: SubscriptionCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutCustomerInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutCustomerInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutCustomerInput, PlanUncheckedCreateWithoutCustomerInput>
  }

  export type UserCreateWithoutCustomerInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateCreateNestedOneWithoutUserInput
    Dependent?: DependentCreateNestedOneWithoutUserInput
    Employee?: EmployeeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomerInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateUncheckedCreateNestedOneWithoutUserInput
    Dependent?: DependentUncheckedCreateNestedOneWithoutUserInput
    Employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerCardCreateWithoutCustomerInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    Dependent?: DependentCreateNestedOneWithoutCustomerCardInput
    Employee?: EmployeeCreateNestedOneWithoutCustomerCardInput
  }

  export type CustomerCardUncheckedCreateWithoutCustomerInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    dependentId?: string | null
    employeeId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerCardCreateOrConnectWithoutCustomerInput = {
    where: CustomerCardWhereUniqueInput
    create: XOR<CustomerCardCreateWithoutCustomerInput, CustomerCardUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerPfDataCreateWithoutCustomerInput = {
    id: string
    birthDate: Date | string
    rg?: string | null
    cpf: string
    sex?: string | null
    civilState?: string | null
    job?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPfDataUncheckedCreateWithoutCustomerInput = {
    id: string
    birthDate: Date | string
    rg?: string | null
    cpf: string
    sex?: string | null
    civilState?: string | null
    job?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPfDataCreateOrConnectWithoutCustomerInput = {
    where: CustomerPfDataWhereUniqueInput
    create: XOR<CustomerPfDataCreateWithoutCustomerInput, CustomerPfDataUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerPjDataCreateWithoutCustomerInput = {
    id: string
    representative?: string | null
    cnpj: string
    cpf?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPjDataUncheckedCreateWithoutCustomerInput = {
    id: string
    representative?: string | null
    cnpj: string
    cpf?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerPjDataCreateOrConnectWithoutCustomerInput = {
    where: CustomerPjDataWhereUniqueInput
    create: XOR<CustomerPjDataCreateWithoutCustomerInput, CustomerPjDataUncheckedCreateWithoutCustomerInput>
  }

  export type DependentCreateWithoutCustomerInput = {
    id: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutDependentInput
    Employee?: EmployeeCreateNestedOneWithoutDependentInput
    User: UserCreateNestedOneWithoutDependentInput
  }

  export type DependentUncheckedCreateWithoutCustomerInput = {
    id: string
    userId: string
    name: string
    relationship?: string | null
    employeeDependentId?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutDependentInput
  }

  export type DependentCreateOrConnectWithoutCustomerInput = {
    where: DependentWhereUniqueInput
    create: XOR<DependentCreateWithoutCustomerInput, DependentUncheckedCreateWithoutCustomerInput>
  }

  export type DependentCreateManyCustomerInputEnvelope = {
    data: DependentCreateManyCustomerInput | DependentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type EmployeeCreateWithoutCustomerInput = {
    id: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutEmployeeInput
    Dependent?: DependentCreateNestedManyWithoutEmployeeInput
    User: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCustomerInput = {
    id: string
    userId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutEmployeeInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCustomerInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCustomerInput, EmployeeUncheckedCreateWithoutCustomerInput>
  }

  export type EmployeeCreateManyCustomerInputEnvelope = {
    data: EmployeeCreateManyCustomerInput | EmployeeCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutCustomerInput = {
    id: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutSubscriptionInput
    Plan: PlanCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutCustomerInput = {
    id: string
    planId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutCustomerInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutCustomerInput, SubscriptionUncheckedCreateWithoutCustomerInput>
  }

  export type SubscriptionCreateManyCustomerInputEnvelope = {
    data: SubscriptionCreateManyCustomerInput | SubscriptionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type AffiliateCustomerUpsertWithWhereUniqueWithoutCustomerInput = {
    where: AffiliateCustomerWhereUniqueInput
    update: XOR<AffiliateCustomerUpdateWithoutCustomerInput, AffiliateCustomerUncheckedUpdateWithoutCustomerInput>
    create: XOR<AffiliateCustomerCreateWithoutCustomerInput, AffiliateCustomerUncheckedCreateWithoutCustomerInput>
  }

  export type AffiliateCustomerUpdateWithWhereUniqueWithoutCustomerInput = {
    where: AffiliateCustomerWhereUniqueInput
    data: XOR<AffiliateCustomerUpdateWithoutCustomerInput, AffiliateCustomerUncheckedUpdateWithoutCustomerInput>
  }

  export type AffiliateCustomerUpdateManyWithWhereWithoutCustomerInput = {
    where: AffiliateCustomerScalarWhereInput
    data: XOR<AffiliateCustomerUpdateManyMutationInput, AffiliateCustomerUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CreditCardUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CreditCardWhereUniqueInput
    update: XOR<CreditCardUpdateWithoutCustomerInput, CreditCardUncheckedUpdateWithoutCustomerInput>
    create: XOR<CreditCardCreateWithoutCustomerInput, CreditCardUncheckedCreateWithoutCustomerInput>
  }

  export type CreditCardUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CreditCardWhereUniqueInput
    data: XOR<CreditCardUpdateWithoutCustomerInput, CreditCardUncheckedUpdateWithoutCustomerInput>
  }

  export type CreditCardUpdateManyWithWhereWithoutCustomerInput = {
    where: CreditCardScalarWhereInput
    data: XOR<CreditCardUpdateManyMutationInput, CreditCardUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CreditCardScalarWhereInput = {
    AND?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
    OR?: CreditCardScalarWhereInput[]
    NOT?: CreditCardScalarWhereInput | CreditCardScalarWhereInput[]
    id?: StringFilter<"CreditCard"> | string
    clientId?: StringFilter<"CreditCard"> | string
    token?: StringFilter<"CreditCard"> | string
    last4?: StringFilter<"CreditCard"> | string
    brand?: StringFilter<"CreditCard"> | string
    createdAt?: DateTimeFilter<"CreditCard"> | Date | string
    updatedAt?: DateTimeFilter<"CreditCard"> | Date | string
  }

  export type AffiliateUpsertWithoutCustomerInput = {
    update: XOR<AffiliateUpdateWithoutCustomerInput, AffiliateUncheckedUpdateWithoutCustomerInput>
    create: XOR<AffiliateCreateWithoutCustomerInput, AffiliateUncheckedCreateWithoutCustomerInput>
    where?: AffiliateWhereInput
  }

  export type AffiliateUpdateToOneWithWhereWithoutCustomerInput = {
    where?: AffiliateWhereInput
    data: XOR<AffiliateUpdateWithoutCustomerInput, AffiliateUncheckedUpdateWithoutCustomerInput>
  }

  export type AffiliateUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutAffiliateNestedInput
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type PlanUpsertWithoutCustomerInput = {
    update: XOR<PlanUpdateWithoutCustomerInput, PlanUncheckedUpdateWithoutCustomerInput>
    create: XOR<PlanCreateWithoutCustomerInput, PlanUncheckedCreateWithoutCustomerInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutCustomerInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutCustomerInput, PlanUncheckedUpdateWithoutCustomerInput>
  }

  export type PlanUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Subscription?: SubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Subscription?: SubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type UserUpsertWithoutCustomerInput = {
    update: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type UserUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUpdateOneWithoutUserNestedInput
    Dependent?: DependentUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUncheckedUpdateOneWithoutUserNestedInput
    Dependent?: DependentUncheckedUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CustomerCardUpsertWithoutCustomerInput = {
    update: XOR<CustomerCardUpdateWithoutCustomerInput, CustomerCardUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerCardCreateWithoutCustomerInput, CustomerCardUncheckedCreateWithoutCustomerInput>
    where?: CustomerCardWhereInput
  }

  export type CustomerCardUpdateToOneWithWhereWithoutCustomerInput = {
    where?: CustomerCardWhereInput
    data: XOR<CustomerCardUpdateWithoutCustomerInput, CustomerCardUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerCardUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Dependent?: DependentUpdateOneWithoutCustomerCardNestedInput
    Employee?: EmployeeUpdateOneWithoutCustomerCardNestedInput
  }

  export type CustomerCardUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dependentId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPfDataUpsertWithoutCustomerInput = {
    update: XOR<CustomerPfDataUpdateWithoutCustomerInput, CustomerPfDataUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerPfDataCreateWithoutCustomerInput, CustomerPfDataUncheckedCreateWithoutCustomerInput>
    where?: CustomerPfDataWhereInput
  }

  export type CustomerPfDataUpdateToOneWithWhereWithoutCustomerInput = {
    where?: CustomerPfDataWhereInput
    data: XOR<CustomerPfDataUpdateWithoutCustomerInput, CustomerPfDataUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPfDataUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    civilState?: NullableStringFieldUpdateOperationsInput | string | null
    job?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPfDataUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: StringFieldUpdateOperationsInput | string
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    civilState?: NullableStringFieldUpdateOperationsInput | string | null
    job?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPjDataUpsertWithoutCustomerInput = {
    update: XOR<CustomerPjDataUpdateWithoutCustomerInput, CustomerPjDataUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerPjDataCreateWithoutCustomerInput, CustomerPjDataUncheckedCreateWithoutCustomerInput>
    where?: CustomerPjDataWhereInput
  }

  export type CustomerPjDataUpdateToOneWithWhereWithoutCustomerInput = {
    where?: CustomerPjDataWhereInput
    data: XOR<CustomerPjDataUpdateWithoutCustomerInput, CustomerPjDataUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerPjDataUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    representative?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerPjDataUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    representative?: NullableStringFieldUpdateOperationsInput | string | null
    cnpj?: StringFieldUpdateOperationsInput | string
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DependentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: DependentWhereUniqueInput
    update: XOR<DependentUpdateWithoutCustomerInput, DependentUncheckedUpdateWithoutCustomerInput>
    create: XOR<DependentCreateWithoutCustomerInput, DependentUncheckedCreateWithoutCustomerInput>
  }

  export type DependentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: DependentWhereUniqueInput
    data: XOR<DependentUpdateWithoutCustomerInput, DependentUncheckedUpdateWithoutCustomerInput>
  }

  export type DependentUpdateManyWithWhereWithoutCustomerInput = {
    where: DependentScalarWhereInput
    data: XOR<DependentUpdateManyMutationInput, DependentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type DependentScalarWhereInput = {
    AND?: DependentScalarWhereInput | DependentScalarWhereInput[]
    OR?: DependentScalarWhereInput[]
    NOT?: DependentScalarWhereInput | DependentScalarWhereInput[]
    id?: StringFilter<"Dependent"> | string
    userId?: StringFilter<"Dependent"> | string
    holderId?: StringFilter<"Dependent"> | string
    name?: StringFilter<"Dependent"> | string
    relationship?: StringNullableFilter<"Dependent"> | string | null
    employeeDependentId?: StringNullableFilter<"Dependent"> | string | null
    cpf?: StringNullableFilter<"Dependent"> | string | null
    birthDate?: DateTimeFilter<"Dependent"> | Date | string
    isActive?: BoolFilter<"Dependent"> | boolean
    createdAt?: DateTimeFilter<"Dependent"> | Date | string
    updatedAt?: DateTimeFilter<"Dependent"> | Date | string
  }

  export type EmployeeUpsertWithWhereUniqueWithoutCustomerInput = {
    where: EmployeeWhereUniqueInput
    update: XOR<EmployeeUpdateWithoutCustomerInput, EmployeeUncheckedUpdateWithoutCustomerInput>
    create: XOR<EmployeeCreateWithoutCustomerInput, EmployeeUncheckedCreateWithoutCustomerInput>
  }

  export type EmployeeUpdateWithWhereUniqueWithoutCustomerInput = {
    where: EmployeeWhereUniqueInput
    data: XOR<EmployeeUpdateWithoutCustomerInput, EmployeeUncheckedUpdateWithoutCustomerInput>
  }

  export type EmployeeUpdateManyWithWhereWithoutCustomerInput = {
    where: EmployeeScalarWhereInput
    data: XOR<EmployeeUpdateManyMutationInput, EmployeeUncheckedUpdateManyWithoutCustomerInput>
  }

  export type EmployeeScalarWhereInput = {
    AND?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    OR?: EmployeeScalarWhereInput[]
    NOT?: EmployeeScalarWhereInput | EmployeeScalarWhereInput[]
    id?: StringFilter<"Employee"> | string
    userId?: StringFilter<"Employee"> | string
    holderId?: StringFilter<"Employee"> | string
    name?: StringFilter<"Employee"> | string
    position?: StringNullableFilter<"Employee"> | string | null
    cpf?: StringNullableFilter<"Employee"> | string | null
    birthDate?: DateTimeFilter<"Employee"> | Date | string
    isActive?: BoolFilter<"Employee"> | boolean
    createdAt?: DateTimeFilter<"Employee"> | Date | string
    updatedAt?: DateTimeFilter<"Employee"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutCustomerInput, SubscriptionUncheckedUpdateWithoutCustomerInput>
    create: XOR<SubscriptionCreateWithoutCustomerInput, SubscriptionUncheckedCreateWithoutCustomerInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutCustomerInput, SubscriptionUncheckedUpdateWithoutCustomerInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutCustomerInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    customerId?: StringFilter<"Subscription"> | string
    planId?: StringFilter<"Subscription"> | string
    status?: EnumSubscriptionStatusFilter<"Subscription"> | $Enums.SubscriptionStatus
    startDate?: DateTimeFilter<"Subscription"> | Date | string
    endDate?: DateTimeFilter<"Subscription"> | Date | string
    firstPayDayDate?: DateTimeFilter<"Subscription"> | Date | string
    paymentType?: EnumPaymentTypeFilter<"Subscription"> | $Enums.PaymentType
    installments?: IntFilter<"Subscription"> | number
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type CustomerCreateWithoutCustomerCardInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCustomerCardInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCustomerCardInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCustomerCardInput, CustomerUncheckedCreateWithoutCustomerCardInput>
  }

  export type DependentCreateWithoutCustomerCardInput = {
    id: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Employee?: EmployeeCreateNestedOneWithoutDependentInput
    Customer: CustomerCreateNestedOneWithoutDependentInput
    User: UserCreateNestedOneWithoutDependentInput
  }

  export type DependentUncheckedCreateWithoutCustomerCardInput = {
    id: string
    userId: string
    holderId: string
    name: string
    relationship?: string | null
    employeeDependentId?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DependentCreateOrConnectWithoutCustomerCardInput = {
    where: DependentWhereUniqueInput
    create: XOR<DependentCreateWithoutCustomerCardInput, DependentUncheckedCreateWithoutCustomerCardInput>
  }

  export type EmployeeCreateWithoutCustomerCardInput = {
    id: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Dependent?: DependentCreateNestedManyWithoutEmployeeInput
    Customer: CustomerCreateNestedOneWithoutEmployeeInput
    User: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutCustomerCardInput = {
    id: string
    userId: string
    holderId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Dependent?: DependentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutCustomerCardInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutCustomerCardInput, EmployeeUncheckedCreateWithoutCustomerCardInput>
  }

  export type CustomerUpsertWithoutCustomerCardInput = {
    update: XOR<CustomerUpdateWithoutCustomerCardInput, CustomerUncheckedUpdateWithoutCustomerCardInput>
    create: XOR<CustomerCreateWithoutCustomerCardInput, CustomerUncheckedCreateWithoutCustomerCardInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCustomerCardInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCustomerCardInput, CustomerUncheckedUpdateWithoutCustomerCardInput>
  }

  export type CustomerUpdateWithoutCustomerCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCustomerCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type DependentUpsertWithoutCustomerCardInput = {
    update: XOR<DependentUpdateWithoutCustomerCardInput, DependentUncheckedUpdateWithoutCustomerCardInput>
    create: XOR<DependentCreateWithoutCustomerCardInput, DependentUncheckedCreateWithoutCustomerCardInput>
    where?: DependentWhereInput
  }

  export type DependentUpdateToOneWithWhereWithoutCustomerCardInput = {
    where?: DependentWhereInput
    data: XOR<DependentUpdateWithoutCustomerCardInput, DependentUncheckedUpdateWithoutCustomerCardInput>
  }

  export type DependentUpdateWithoutCustomerCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Employee?: EmployeeUpdateOneWithoutDependentNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutDependentNestedInput
    User?: UserUpdateOneRequiredWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateWithoutCustomerCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    employeeDependentId?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpsertWithoutCustomerCardInput = {
    update: XOR<EmployeeUpdateWithoutCustomerCardInput, EmployeeUncheckedUpdateWithoutCustomerCardInput>
    create: XOR<EmployeeCreateWithoutCustomerCardInput, EmployeeUncheckedCreateWithoutCustomerCardInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutCustomerCardInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutCustomerCardInput, EmployeeUncheckedUpdateWithoutCustomerCardInput>
  }

  export type EmployeeUpdateWithoutCustomerCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Dependent?: DependentUpdateManyWithoutEmployeeNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutEmployeeNestedInput
    User?: UserUpdateOneRequiredWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCustomerCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Dependent?: DependentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type CustomerCreateWithoutCustomerPfDataInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCustomerPfDataInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCustomerPfDataInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCustomerPfDataInput, CustomerUncheckedCreateWithoutCustomerPfDataInput>
  }

  export type CustomerUpsertWithoutCustomerPfDataInput = {
    update: XOR<CustomerUpdateWithoutCustomerPfDataInput, CustomerUncheckedUpdateWithoutCustomerPfDataInput>
    create: XOR<CustomerCreateWithoutCustomerPfDataInput, CustomerUncheckedCreateWithoutCustomerPfDataInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCustomerPfDataInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCustomerPfDataInput, CustomerUncheckedUpdateWithoutCustomerPfDataInput>
  }

  export type CustomerUpdateWithoutCustomerPfDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCustomerPfDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutCustomerPjDataInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCustomerPjDataInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCustomerPjDataInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCustomerPjDataInput, CustomerUncheckedCreateWithoutCustomerPjDataInput>
  }

  export type CustomerUpsertWithoutCustomerPjDataInput = {
    update: XOR<CustomerUpdateWithoutCustomerPjDataInput, CustomerUncheckedUpdateWithoutCustomerPjDataInput>
    create: XOR<CustomerCreateWithoutCustomerPjDataInput, CustomerUncheckedCreateWithoutCustomerPjDataInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCustomerPjDataInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCustomerPjDataInput, CustomerUncheckedUpdateWithoutCustomerPjDataInput>
  }

  export type CustomerUpdateWithoutCustomerPjDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCustomerPjDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCardCreateWithoutDependentInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerCreateNestedOneWithoutCustomerCardInput
    Employee?: EmployeeCreateNestedOneWithoutCustomerCardInput
  }

  export type CustomerCardUncheckedCreateWithoutDependentInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    customerId?: string | null
    employeeId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerCardCreateOrConnectWithoutDependentInput = {
    where: CustomerCardWhereUniqueInput
    create: XOR<CustomerCardCreateWithoutDependentInput, CustomerCardUncheckedCreateWithoutDependentInput>
  }

  export type EmployeeCreateWithoutDependentInput = {
    id: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutEmployeeInput
    Customer: CustomerCreateNestedOneWithoutEmployeeInput
    User: UserCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutDependentInput = {
    id: string
    userId: string
    holderId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutDependentInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutDependentInput, EmployeeUncheckedCreateWithoutDependentInput>
  }

  export type CustomerCreateWithoutDependentInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutDependentInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutDependentInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutDependentInput, CustomerUncheckedCreateWithoutDependentInput>
  }

  export type UserCreateWithoutDependentInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateCreateNestedOneWithoutUserInput
    Customer?: CustomerCreateNestedOneWithoutUserInput
    Employee?: EmployeeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDependentInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateUncheckedCreateNestedOneWithoutUserInput
    Customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    Employee?: EmployeeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDependentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDependentInput, UserUncheckedCreateWithoutDependentInput>
  }

  export type CustomerCardUpsertWithoutDependentInput = {
    update: XOR<CustomerCardUpdateWithoutDependentInput, CustomerCardUncheckedUpdateWithoutDependentInput>
    create: XOR<CustomerCardCreateWithoutDependentInput, CustomerCardUncheckedCreateWithoutDependentInput>
    where?: CustomerCardWhereInput
  }

  export type CustomerCardUpdateToOneWithWhereWithoutDependentInput = {
    where?: CustomerCardWhereInput
    data: XOR<CustomerCardUpdateWithoutDependentInput, CustomerCardUncheckedUpdateWithoutDependentInput>
  }

  export type CustomerCardUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneWithoutCustomerCardNestedInput
    Employee?: EmployeeUpdateOneWithoutCustomerCardNestedInput
  }

  export type CustomerCardUncheckedUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpsertWithoutDependentInput = {
    update: XOR<EmployeeUpdateWithoutDependentInput, EmployeeUncheckedUpdateWithoutDependentInput>
    create: XOR<EmployeeCreateWithoutDependentInput, EmployeeUncheckedCreateWithoutDependentInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutDependentInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutDependentInput, EmployeeUncheckedUpdateWithoutDependentInput>
  }

  export type EmployeeUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutEmployeeNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutEmployeeNestedInput
    User?: UserUpdateOneRequiredWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutEmployeeNestedInput
  }

  export type CustomerUpsertWithoutDependentInput = {
    update: XOR<CustomerUpdateWithoutDependentInput, CustomerUncheckedUpdateWithoutDependentInput>
    create: XOR<CustomerCreateWithoutDependentInput, CustomerUncheckedCreateWithoutDependentInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutDependentInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutDependentInput, CustomerUncheckedUpdateWithoutDependentInput>
  }

  export type CustomerUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutDependentInput = {
    update: XOR<UserUpdateWithoutDependentInput, UserUncheckedUpdateWithoutDependentInput>
    create: XOR<UserCreateWithoutDependentInput, UserUncheckedCreateWithoutDependentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDependentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDependentInput, UserUncheckedUpdateWithoutDependentInput>
  }

  export type UserUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUpdateOneWithoutUserNestedInput
    Customer?: CustomerUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDependentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUncheckedUpdateOneWithoutUserNestedInput
    Customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    Employee?: EmployeeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CustomerCardCreateWithoutEmployeeInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerCreateNestedOneWithoutCustomerCardInput
    Dependent?: DependentCreateNestedOneWithoutCustomerCardInput
  }

  export type CustomerCardUncheckedCreateWithoutEmployeeInput = {
    id: string
    cardNumber: string
    expireDate: Date | string
    customerId?: string | null
    dependentId?: string | null
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerCardCreateOrConnectWithoutEmployeeInput = {
    where: CustomerCardWhereUniqueInput
    create: XOR<CustomerCardCreateWithoutEmployeeInput, CustomerCardUncheckedCreateWithoutEmployeeInput>
  }

  export type DependentCreateWithoutEmployeeInput = {
    id: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutDependentInput
    Customer: CustomerCreateNestedOneWithoutDependentInput
    User: UserCreateNestedOneWithoutDependentInput
  }

  export type DependentUncheckedCreateWithoutEmployeeInput = {
    id: string
    userId: string
    holderId: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutDependentInput
  }

  export type DependentCreateOrConnectWithoutEmployeeInput = {
    where: DependentWhereUniqueInput
    create: XOR<DependentCreateWithoutEmployeeInput, DependentUncheckedCreateWithoutEmployeeInput>
  }

  export type DependentCreateManyEmployeeInputEnvelope = {
    data: DependentCreateManyEmployeeInput | DependentCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutEmployeeInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutEmployeeInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutEmployeeInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutEmployeeInput, CustomerUncheckedCreateWithoutEmployeeInput>
  }

  export type UserCreateWithoutEmployeeInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateCreateNestedOneWithoutUserInput
    Customer?: CustomerCreateNestedOneWithoutUserInput
    Dependent?: DependentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployeeInput = {
    id: string
    username: string
    password: string
    type: $Enums.UserType
    createdAt?: Date | string
    updatedAt: Date | string
    Affiliate?: AffiliateUncheckedCreateNestedOneWithoutUserInput
    Customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
    Dependent?: DependentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
  }

  export type CustomerCardUpsertWithoutEmployeeInput = {
    update: XOR<CustomerCardUpdateWithoutEmployeeInput, CustomerCardUncheckedUpdateWithoutEmployeeInput>
    create: XOR<CustomerCardCreateWithoutEmployeeInput, CustomerCardUncheckedCreateWithoutEmployeeInput>
    where?: CustomerCardWhereInput
  }

  export type CustomerCardUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: CustomerCardWhereInput
    data: XOR<CustomerCardUpdateWithoutEmployeeInput, CustomerCardUncheckedUpdateWithoutEmployeeInput>
  }

  export type CustomerCardUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneWithoutCustomerCardNestedInput
    Dependent?: DependentUpdateOneWithoutCustomerCardNestedInput
  }

  export type CustomerCardUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    expireDate?: DateTimeFieldUpdateOperationsInput | Date | string
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    dependentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DependentUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: DependentWhereUniqueInput
    update: XOR<DependentUpdateWithoutEmployeeInput, DependentUncheckedUpdateWithoutEmployeeInput>
    create: XOR<DependentCreateWithoutEmployeeInput, DependentUncheckedCreateWithoutEmployeeInput>
  }

  export type DependentUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: DependentWhereUniqueInput
    data: XOR<DependentUpdateWithoutEmployeeInput, DependentUncheckedUpdateWithoutEmployeeInput>
  }

  export type DependentUpdateManyWithWhereWithoutEmployeeInput = {
    where: DependentScalarWhereInput
    data: XOR<DependentUpdateManyMutationInput, DependentUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type CustomerUpsertWithoutEmployeeInput = {
    update: XOR<CustomerUpdateWithoutEmployeeInput, CustomerUncheckedUpdateWithoutEmployeeInput>
    create: XOR<CustomerCreateWithoutEmployeeInput, CustomerUncheckedCreateWithoutEmployeeInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutEmployeeInput, CustomerUncheckedUpdateWithoutEmployeeInput>
  }

  export type CustomerUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserUpsertWithoutEmployeeInput = {
    update: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
    create: XOR<UserCreateWithoutEmployeeInput, UserUncheckedCreateWithoutEmployeeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployeeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployeeInput, UserUncheckedUpdateWithoutEmployeeInput>
  }

  export type UserUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUpdateOneWithoutUserNestedInput
    Customer?: CustomerUpdateOneWithoutUserNestedInput
    Dependent?: DependentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumUserTypeFieldUpdateOperationsInput | $Enums.UserType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUncheckedUpdateOneWithoutUserNestedInput
    Customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
    Dependent?: DependentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type SubscriptionCreateWithoutInvoiceInput = {
    id: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Customer: CustomerCreateNestedOneWithoutSubscriptionInput
    Plan: PlanCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutInvoiceInput = {
    id: string
    customerId: string
    planId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutInvoiceInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutInvoiceInput, SubscriptionUncheckedCreateWithoutInvoiceInput>
  }

  export type SubscriptionUpsertWithoutInvoiceInput = {
    update: XOR<SubscriptionUpdateWithoutInvoiceInput, SubscriptionUncheckedUpdateWithoutInvoiceInput>
    create: XOR<SubscriptionCreateWithoutInvoiceInput, SubscriptionUncheckedCreateWithoutInvoiceInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutInvoiceInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutInvoiceInput, SubscriptionUncheckedUpdateWithoutInvoiceInput>
  }

  export type SubscriptionUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneRequiredWithoutSubscriptionNestedInput
    Plan?: PlanUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutInvoiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateWithoutPlanInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutPlanInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutPlanInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutPlanInput, CustomerUncheckedCreateWithoutPlanInput>
  }

  export type CustomerCreateManyPlanInputEnvelope = {
    data: CustomerCreateManyPlanInput | CustomerCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutPlanInput = {
    id: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Invoice?: InvoiceCreateNestedManyWithoutSubscriptionInput
    Customer: CustomerCreateNestedOneWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutPlanInput = {
    id: string
    customerId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
    Invoice?: InvoiceUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionCreateManyPlanInputEnvelope = {
    data: SubscriptionCreateManyPlanInput | SubscriptionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type CustomerUpsertWithWhereUniqueWithoutPlanInput = {
    where: CustomerWhereUniqueInput
    update: XOR<CustomerUpdateWithoutPlanInput, CustomerUncheckedUpdateWithoutPlanInput>
    create: XOR<CustomerCreateWithoutPlanInput, CustomerUncheckedCreateWithoutPlanInput>
  }

  export type CustomerUpdateWithWhereUniqueWithoutPlanInput = {
    where: CustomerWhereUniqueInput
    data: XOR<CustomerUpdateWithoutPlanInput, CustomerUncheckedUpdateWithoutPlanInput>
  }

  export type CustomerUpdateManyWithWhereWithoutPlanInput = {
    where: CustomerScalarWhereInput
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyWithoutPlanInput>
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutPlanInput, SubscriptionUncheckedUpdateWithoutPlanInput>
    create: XOR<SubscriptionCreateWithoutPlanInput, SubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutPlanInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutPlanInput, SubscriptionUncheckedUpdateWithoutPlanInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutPlanInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutPlanInput>
  }

  export type InvoiceCreateWithoutSubscriptionInput = {
    id: string
    dueDate: Date | string
    amount: number
    status: $Enums.InvoiceStatus
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InvoiceUncheckedCreateWithoutSubscriptionInput = {
    id: string
    dueDate: Date | string
    amount: number
    status: $Enums.InvoiceStatus
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InvoiceCreateOrConnectWithoutSubscriptionInput = {
    where: InvoiceWhereUniqueInput
    create: XOR<InvoiceCreateWithoutSubscriptionInput, InvoiceUncheckedCreateWithoutSubscriptionInput>
  }

  export type InvoiceCreateManySubscriptionInputEnvelope = {
    data: InvoiceCreateManySubscriptionInput | InvoiceCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type CustomerCreateWithoutSubscriptionInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    User: UserCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutSubscriptionInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutSubscriptionInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutSubscriptionInput, CustomerUncheckedCreateWithoutSubscriptionInput>
  }

  export type PlanCreateWithoutSubscriptionInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutSubscriptionInput = {
    id: string
    externalId?: string | null
    name: string
    contractText: string
    signupFee: number
    allowedPaymentTypes?: PlanCreateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments: number
    prices: JsonNullValueInput | InputJsonValue
    additionalInfo?: string | null
    isShowingInApp?: boolean
    hasTelemedicine?: boolean
    maxDependents?: number | null
    pricePerEmployee?: number | null
    pricePerDependent?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    Customer?: CustomerUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutSubscriptionInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutSubscriptionInput, PlanUncheckedCreateWithoutSubscriptionInput>
  }

  export type InvoiceUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: InvoiceWhereUniqueInput
    update: XOR<InvoiceUpdateWithoutSubscriptionInput, InvoiceUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<InvoiceCreateWithoutSubscriptionInput, InvoiceUncheckedCreateWithoutSubscriptionInput>
  }

  export type InvoiceUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: InvoiceWhereUniqueInput
    data: XOR<InvoiceUpdateWithoutSubscriptionInput, InvoiceUncheckedUpdateWithoutSubscriptionInput>
  }

  export type InvoiceUpdateManyWithWhereWithoutSubscriptionInput = {
    where: InvoiceScalarWhereInput
    data: XOR<InvoiceUpdateManyMutationInput, InvoiceUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type InvoiceScalarWhereInput = {
    AND?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    OR?: InvoiceScalarWhereInput[]
    NOT?: InvoiceScalarWhereInput | InvoiceScalarWhereInput[]
    id?: StringFilter<"Invoice"> | string
    subscriptionId?: StringFilter<"Invoice"> | string
    dueDate?: DateTimeFilter<"Invoice"> | Date | string
    amount?: IntFilter<"Invoice"> | number
    status?: EnumInvoiceStatusFilter<"Invoice"> | $Enums.InvoiceStatus
    createdAt?: DateTimeFilter<"Invoice"> | Date | string
    updatedAt?: DateTimeFilter<"Invoice"> | Date | string
  }

  export type CustomerUpsertWithoutSubscriptionInput = {
    update: XOR<CustomerUpdateWithoutSubscriptionInput, CustomerUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<CustomerCreateWithoutSubscriptionInput, CustomerUncheckedCreateWithoutSubscriptionInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutSubscriptionInput, CustomerUncheckedUpdateWithoutSubscriptionInput>
  }

  export type CustomerUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type PlanUpsertWithoutSubscriptionInput = {
    update: XOR<PlanUpdateWithoutSubscriptionInput, PlanUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<PlanCreateWithoutSubscriptionInput, PlanUncheckedCreateWithoutSubscriptionInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutSubscriptionInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutSubscriptionInput, PlanUncheckedUpdateWithoutSubscriptionInput>
  }

  export type PlanUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    contractText?: StringFieldUpdateOperationsInput | string
    signupFee?: IntFieldUpdateOperationsInput | number
    allowedPaymentTypes?: PlanUpdateallowedPaymentTypesInput | $Enums.PaymentType[]
    maxInstallments?: IntFieldUpdateOperationsInput | number
    prices?: JsonNullValueInput | InputJsonValue
    additionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    isShowingInApp?: BoolFieldUpdateOperationsInput | boolean
    hasTelemedicine?: BoolFieldUpdateOperationsInput | boolean
    maxDependents?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerEmployee?: NullableIntFieldUpdateOperationsInput | number | null
    pricePerDependent?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type AffiliateCreateWithoutUserInput = {
    id: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutAffiliateInput
    Customer?: CustomerCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateUncheckedCreateWithoutUserInput = {
    id: string
    code: string
    name: string
    commissionType: $Enums.CommissionType
    commissionValue: number
    cpf: string
    phone?: string | null
    email?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutAffiliateInput
    Customer?: CustomerUncheckedCreateNestedManyWithoutAffiliateInput
  }

  export type AffiliateCreateOrConnectWithoutUserInput = {
    where: AffiliateWhereUniqueInput
    create: XOR<AffiliateCreateWithoutUserInput, AffiliateUncheckedCreateWithoutUserInput>
  }

  export type CustomerCreateWithoutUserInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardCreateNestedManyWithoutCustomerInput
    Affiliate?: AffiliateCreateNestedOneWithoutCustomerInput
    Plan?: PlanCreateNestedOneWithoutCustomerInput
    CustomerCard?: CustomerCardCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataCreateNestedOneWithoutCustomerInput
    Dependent?: DependentCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutUserInput = {
    id: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedCreateNestedManyWithoutCustomerInput
    CreditCard?: CreditCardUncheckedCreateNestedManyWithoutCustomerInput
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPfData?: CustomerPfDataUncheckedCreateNestedOneWithoutCustomerInput
    CustomerPjData?: CustomerPjDataUncheckedCreateNestedOneWithoutCustomerInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutCustomerInput
    Employee?: EmployeeUncheckedCreateNestedManyWithoutCustomerInput
    Subscription?: SubscriptionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutUserInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type DependentCreateWithoutUserInput = {
    id: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutDependentInput
    Employee?: EmployeeCreateNestedOneWithoutDependentInput
    Customer: CustomerCreateNestedOneWithoutDependentInput
  }

  export type DependentUncheckedCreateWithoutUserInput = {
    id: string
    holderId: string
    name: string
    relationship?: string | null
    employeeDependentId?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutDependentInput
  }

  export type DependentCreateOrConnectWithoutUserInput = {
    where: DependentWhereUniqueInput
    create: XOR<DependentCreateWithoutUserInput, DependentUncheckedCreateWithoutUserInput>
  }

  export type EmployeeCreateWithoutUserInput = {
    id: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardCreateNestedOneWithoutEmployeeInput
    Dependent?: DependentCreateNestedManyWithoutEmployeeInput
    Customer: CustomerCreateNestedOneWithoutEmployeeInput
  }

  export type EmployeeUncheckedCreateWithoutUserInput = {
    id: string
    holderId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
    CustomerCard?: CustomerCardUncheckedCreateNestedOneWithoutEmployeeInput
    Dependent?: DependentUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type EmployeeCreateOrConnectWithoutUserInput = {
    where: EmployeeWhereUniqueInput
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
  }

  export type AffiliateUpsertWithoutUserInput = {
    update: XOR<AffiliateUpdateWithoutUserInput, AffiliateUncheckedUpdateWithoutUserInput>
    create: XOR<AffiliateCreateWithoutUserInput, AffiliateUncheckedCreateWithoutUserInput>
    where?: AffiliateWhereInput
  }

  export type AffiliateUpdateToOneWithWhereWithoutUserInput = {
    where?: AffiliateWhereInput
    data: XOR<AffiliateUpdateWithoutUserInput, AffiliateUncheckedUpdateWithoutUserInput>
  }

  export type AffiliateUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutAffiliateNestedInput
    Customer?: CustomerUpdateManyWithoutAffiliateNestedInput
  }

  export type AffiliateUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    commissionType?: EnumCommissionTypeFieldUpdateOperationsInput | $Enums.CommissionType
    commissionValue?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutAffiliateNestedInput
    Customer?: CustomerUncheckedUpdateManyWithoutAffiliateNestedInput
  }

  export type CustomerUpsertWithoutUserInput = {
    update: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutUserInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type DependentUpsertWithoutUserInput = {
    update: XOR<DependentUpdateWithoutUserInput, DependentUncheckedUpdateWithoutUserInput>
    create: XOR<DependentCreateWithoutUserInput, DependentUncheckedCreateWithoutUserInput>
    where?: DependentWhereInput
  }

  export type DependentUpdateToOneWithWhereWithoutUserInput = {
    where?: DependentWhereInput
    data: XOR<DependentUpdateWithoutUserInput, DependentUncheckedUpdateWithoutUserInput>
  }

  export type DependentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutDependentNestedInput
    Employee?: EmployeeUpdateOneWithoutDependentNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    employeeDependentId?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutDependentNestedInput
  }

  export type EmployeeUpsertWithoutUserInput = {
    update: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
    create: XOR<EmployeeCreateWithoutUserInput, EmployeeUncheckedCreateWithoutUserInput>
    where?: EmployeeWhereInput
  }

  export type EmployeeUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployeeWhereInput
    data: XOR<EmployeeUpdateWithoutUserInput, EmployeeUncheckedUpdateWithoutUserInput>
  }

  export type EmployeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutEmployeeNestedInput
    Dependent?: DependentUpdateManyWithoutEmployeeNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutEmployeeNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type AffiliateCustomerCreateManyAffiliateInput = {
    id: string
    customerId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerCreateManyAffiliateInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    planId?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateCustomerUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Customer?: CustomerUpdateOneRequiredWithoutAffiliateCustomerNestedInput
  }

  export type AffiliateCustomerUncheckedUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateCustomerUncheckedUpdateManyWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Plan?: PlanUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutAffiliateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    planId?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateCustomerCreateManyCustomerInput = {
    id: string
    affiliateId: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CreditCardCreateManyCustomerInput = {
    id: string
    token: string
    last4: string
    brand: string
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DependentCreateManyCustomerInput = {
    id: string
    userId: string
    name: string
    relationship?: string | null
    employeeDependentId?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type EmployeeCreateManyCustomerInput = {
    id: string
    userId: string
    name: string
    position?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SubscriptionCreateManyCustomerInput = {
    id: string
    planId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type AffiliateCustomerUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Affiliate?: AffiliateUpdateOneRequiredWithoutAffiliateCustomerNestedInput
  }

  export type AffiliateCustomerUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    affiliateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AffiliateCustomerUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    affiliateId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditCardUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    last4?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DependentUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutDependentNestedInput
    Employee?: EmployeeUpdateOneWithoutDependentNestedInput
    User?: UserUpdateOneRequiredWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    employeeDependentId?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    employeeDependentId?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployeeUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutEmployeeNestedInput
    Dependent?: DependentUpdateManyWithoutEmployeeNestedInput
    User?: UserUpdateOneRequiredWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutEmployeeNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type EmployeeUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutSubscriptionNestedInput
    Plan?: PlanUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DependentCreateManyEmployeeInput = {
    id: string
    userId: string
    holderId: string
    name: string
    relationship?: string | null
    cpf?: string | null
    birthDate: Date | string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type DependentUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUpdateOneWithoutDependentNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutDependentNestedInput
    User?: UserUpdateOneRequiredWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutDependentNestedInput
  }

  export type DependentUncheckedUpdateManyWithoutEmployeeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    holderId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    relationship?: NullableStringFieldUpdateOperationsInput | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateManyPlanInput = {
    id: string
    userId: string
    externalId?: string | null
    name: string
    document: string
    observation?: string | null
    mainPaymentMethod?: $Enums.PaymentType
    status?: $Enums.CustomerStatus
    email?: string | null
    phone?: string | null
    adherenceDate: Date | string
    renovationDate?: Date | string | null
    expireDate?: Date | string | null
    clientType: $Enums.CustomerType
    affiliateCode?: string | null
    cep?: number | null
    address?: string | null
    number?: number | null
    complement?: string | null
    district?: string | null
    city?: string | null
    state?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type SubscriptionCreateManyPlanInput = {
    id: string
    customerId: string
    status: $Enums.SubscriptionStatus
    startDate: Date | string
    endDate: Date | string
    firstPayDayDate: Date | string
    paymentType: $Enums.PaymentType
    installments: number
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type CustomerUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUpdateManyWithoutCustomerNestedInput
    Affiliate?: AffiliateUpdateOneWithoutCustomerNestedInput
    User?: UserUpdateOneRequiredWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    AffiliateCustomer?: AffiliateCustomerUncheckedUpdateManyWithoutCustomerNestedInput
    CreditCard?: CreditCardUncheckedUpdateManyWithoutCustomerNestedInput
    CustomerCard?: CustomerCardUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPfData?: CustomerPfDataUncheckedUpdateOneWithoutCustomerNestedInput
    CustomerPjData?: CustomerPjDataUncheckedUpdateOneWithoutCustomerNestedInput
    Dependent?: DependentUncheckedUpdateManyWithoutCustomerNestedInput
    Employee?: EmployeeUncheckedUpdateManyWithoutCustomerNestedInput
    Subscription?: SubscriptionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    externalId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    document?: StringFieldUpdateOperationsInput | string
    observation?: NullableStringFieldUpdateOperationsInput | string | null
    mainPaymentMethod?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    status?: EnumCustomerStatusFieldUpdateOperationsInput | $Enums.CustomerStatus
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    adherenceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renovationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clientType?: EnumCustomerTypeFieldUpdateOperationsInput | $Enums.CustomerType
    affiliateCode?: NullableStringFieldUpdateOperationsInput | string | null
    cep?: NullableIntFieldUpdateOperationsInput | number | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableIntFieldUpdateOperationsInput | number | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUpdateManyWithoutSubscriptionNestedInput
    Customer?: CustomerUpdateOneRequiredWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Invoice?: InvoiceUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    firstPayDayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentType?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    installments?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceCreateManySubscriptionInput = {
    id: string
    dueDate: Date | string
    amount: number
    status: $Enums.InvoiceStatus
    createdAt?: Date | string
    updatedAt: Date | string
  }

  export type InvoiceUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvoiceUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    status?: EnumInvoiceStatusFieldUpdateOperationsInput | $Enums.InvoiceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}